// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;
Runtime['addFunction'] = Runtime.addFunction;
Runtime['removeFunction'] = Runtime.removeFunction;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 52428800;
var FAST_MEMORY = Module['FAST_MEMORY'] || 12582912;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 7808;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,0,0,0,0,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,0,0,0,0,10,0,0,0,13,0,0,0,16,0,0,0,11,0,0,0,14,0,0,0,18,0,0,0,13,0,0,0,16,0,0,0,20,0,0,0,14,0,0,0,18,0,0,0,23,0,0,0,16,0,0,0,20,0,0,0,25,0,0,0,18,0,0,0,23,0,0,0,29,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,34,0,0,0,35,0,0,0,35,0,0,0,36,0,0,0,36,0,0,0,37,0,0,0,37,0,0,0,37,0,0,0,38,0,0,0,38,0,0,0,38,0,0,0,39,0,0,0,39,0,0,0,39,0,0,0,39,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,12,0,0,0,13,0,0,0,10,0,0,0,11,0,0,0,14,0,0,0,15,0,0,0,47,31,15,0,23,27,29,30,7,11,13,14,39,43,45,46,16,3,5,10,12,19,21,26,28,35,37,42,44,1,2,4,8,17,18,20,24,6,9,22,25,32,33,34,36,40,38,41,0,16,1,2,4,8,32,3,5,10,12,15,47,7,11,13,14,6,9,31,35,37,42,44,33,34,36,40,39,43,45,46,17,18,20,24,19,21,26,28,23,27,29,30,22,25,38,41,17,1,0,0,0,0,0,0,34,18,1,1,0,0,0,0,50,34,18,2,0,0,0,0,67,51,34,34,18,18,2,2,83,67,51,35,18,18,2,2,19,35,67,51,99,83,2,2,0,0,101,85,68,68,52,52,35,35,35,35,19,19,19,19,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,249,233,217,200,200,184,184,167,167,167,167,151,151,151,151,134,134,134,134,134,134,134,134,118,118,118,118,118,118,118,118,230,214,198,182,165,165,149,149,132,132,132,132,116,116,116,116,100,100,100,100,84,84,84,84,67,67,67,67,67,67,67,67,51,51,51,51,51,51,51,51,35,35,35,35,35,35,35,35,19,19,19,19,19,19,19,19,3,3,3,3,3,3,3,3,214,182,197,197,165,165,149,149,132,132,132,132,84,84,84,84,68,68,68,68,4,4,4,4,115,115,115,115,115,115,115,115,99,99,99,99,99,99,99,99,51,51,51,51,51,51,51,51,35,35,35,35,35,35,35,35,19,19,19,19,19,19,19,19,197,181,165,5,148,148,116,116,52,52,36,36,131,131,131,131,99,99,99,99,83,83,83,83,67,67,67,67,19,19,19,19,181,149,164,164,132,132,36,36,20,20,4,4,115,115,115,115,99,99,99,99,83,83,83,83,67,67,67,67,51,51,51,51,166,6,21,21,132,132,132,132,147,147,147,147,147,147,147,147,115,115,115,115,115,115,115,115,99,99,99,99,99,99,99,99,83,83,83,83,83,83,83,83,67,67,67,67,67,67,67,67,51,51,51,51,51,51,51,51,35,35,35,35,35,35,35,35,150,6,21,21,116,116,116,116,131,131,131,131,131,131,131,131,99,99,99,99,99,99,99,99,67,67,67,67,67,67,67,67,51,51,51,51,51,51,51,51,35,35,35,35,35,35,35,35,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,134,6,37,37,20,20,20,20,115,115,115,115,115,115,115,115,99,99,99,99,99,99,99,99,51,51,51,51,51,51,51,51,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,22,6,117,117,36,36,36,36,83,83,83,83,83,83,83,83,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,21,5,100,100,35,35,35,35,82,82,82,82,82,82,82,82,66,66,66,66,66,66,66,66,50,50,50,50,50,50,50,50,4,20,35,35,51,51,83,83,65,65,65,65,65,65,65,65,4,20,67,67,34,34,34,34,49,49,49,49,49,49,49,49,3,19,50,50,33,33,33,33,2,18,33,33,0,0,0,0,0,0,0,0,0,0,102,32,38,16,6,8,101,24,101,24,67,16,67,16,67,16,67,16,67,16,67,16,67,16,67,16,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,0,0,0,0,0,0,0,0,106,64,74,48,42,40,10,32,105,56,105,56,73,40,73,40,41,32,41,32,9,24,9,24,104,48,104,48,104,48,104,48,72,32,72,32,72,32,72,32,40,24,40,24,40,24,40,24,8,16,8,16,8,16,8,16,103,40,103,40,103,40,103,40,103,40,103,40,103,40,103,40,71,24,71,24,71,24,71,24,71,24,71,24,71,24,71,24,110,96,78,88,46,80,14,80,110,88,78,80,46,72,14,72,13,64,13,64,77,72,77,72,45,64,45,64,13,56,13,56,109,80,109,80,77,64,77,64,45,56,45,56,13,48,13,48,107,72,107,72,107,72,107,72,107,72,107,72,107,72,107,72,75,56,75,56,75,56,75,56,75,56,75,56,75,56,75,56,43,48,43,48,43,48,43,48,43,48,43,48,43,48,43,48,11,40,11,40,11,40,11,40,11,40,11,40,11,40,11,40,0,0,0,0,47,104,47,104,16,128,80,128,48,128,16,120,112,128,80,120,48,120,16,112,112,120,80,112,48,112,16,104,111,112,111,112,79,104,79,104,47,96,47,96,15,96,15,96,111,104,111,104,79,96,79,96,47,88,47,88,15,88,15,88,0,0,0,0,0,0,0,0,102,56,70,32,38,32,6,16,102,48,70,24,38,24,6,8,101,40,101,40,37,16,37,16,100,32,100,32,100,32,100,32,100,24,100,24,100,24,100,24,67,16,67,16,67,16,67,16,67,16,67,16,67,16,67,16,0,0,0,0,0,0,0,0,105,72,73,56,41,56,9,48,8,40,8,40,72,48,72,48,40,48,40,48,8,32,8,32,103,64,103,64,103,64,103,64,71,40,71,40,71,40,71,40,39,40,39,40,39,40,39,40,7,24,7,24,7,24,7,24,0,0,0,0,109,120,109,120,110,128,78,128,46,128,14,128,46,120,14,120,78,120,46,112,77,112,77,112,13,112,13,112,109,112,109,112,77,104,77,104,45,104,45,104,13,104,13,104,109,104,109,104,77,96,77,96,45,96,45,96,13,96,13,96,12,88,12,88,12,88,12,88,76,88,76,88,76,88,76,88,44,88,44,88,44,88,44,88,12,80,12,80,12,80,12,80,108,96,108,96,108,96,108,96,76,80,76,80,76,80,76,80,44,80,44,80,44,80,44,80,12,72,12,72,12,72,12,72,107,88,107,88,107,88,107,88,107,88,107,88,107,88,107,88,75,72,75,72,75,72,75,72,75,72,75,72,75,72,75,72,43,72,43,72,43,72,43,72,43,72,43,72,43,72,43,72,11,64,11,64,11,64,11,64,11,64,11,64,11,64,11,64,107,80,107,80,107,80,107,80,107,80,107,80,107,80,107,80,75,64,75,64,75,64,75,64,75,64,75,64,75,64,75,64,43,64,43,64,43,64,43,64,43,64,43,64,43,64,43,64,11,56,11,56,11,56,11,56,11,56,11,56,11,56,11,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,24,70,56,38,56,6,16,102,72,70,48,38,48,6,8,37,40,37,40,69,40,69,40,37,32,37,32,69,32,69,32,37,24,37,24,101,64,101,64,69,24,69,24,37,16,37,16,100,56,100,56,100,56,100,56,100,48,100,48,100,48,100,48,100,40,100,40,100,40,100,40,100,32,100,32,100,32,100,32,100,24,100,24,100,24,100,24,68,16,68,16,68,16,68,16,36,8,36,8,36,8,36,8,4,0,4,0,4,0,4,0,0,0,10,128,106,128,74,128,42,128,10,120,106,120,74,120,42,120,10,112,106,112,74,112,42,112,10,104,41,104,41,104,9,96,9,96,73,104,73,104,41,96,41,96,9,88,9,88,105,104,105,104,73,96,73,96,41,88,41,88,9,80,9,80,104,96,104,96,104,96,104,96,72,88,72,88,72,88,72,88,40,80,40,80,40,80,40,80,8,72,8,72,8,72,8,72,104,88,104,88,104,88,104,88,72,80,72,80,72,80,72,80,40,72,40,72,40,72,40,72,8,64,8,64,8,64,8,64,7,56,7,56,7,56,7,56,7,56,7,56,7,56,7,56,7,48,7,48,7,48,7,48,7,48,7,48,7,48,7,48,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,7,40,7,40,7,40,7,40,7,40,7,40,7,40,7,40,103,80,103,80,103,80,103,80,103,80,103,80,103,80,103,80,71,64,71,64,71,64,71,64,71,64,71,64,71,64,71,64,39,64,39,64,39,64,39,64,39,64,39,64,39,64,39,64,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,32,6,8,38,8,0,0,6,0,6,16,38,16,70,16,0,0,6,24,38,24,70,24,102,24,6,32,38,32,70,32,102,32,6,40,38,40,70,40,102,40,6,48,38,48,70,48,102,48,6,56,38,56,70,56,102,56,6,64,38,64,70,64,102,64,6,72,38,72,70,72,102,72,6,80,38,80,70,80,102,80,6,88,38,88,70,88,102,88,6,96,38,96,70,96,102,96,6,104,38,104,70,104,102,104,6,112,38,112,70,112,102,112,6,120,38,120,70,120,102,120,6,128,38,128,70,128,102,128,0,0,67,16,2,0,2,0,33,8,33,8,33,8,33,8,103,32,103,32,72,32,40,32,71,24,71,24,39,24,39,24,6,32,6,32,6,32,6,32,6,24,6,24,6,24,6,24,6,16,6,16,6,16,6,16,102,24,102,24,102,24,102,24,38,16,38,16,38,16,38,16,6,8,6,8,6,8,6,8,3,0,0,0,15,0,0,0,1,0,0,0,10,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,1,0,0,0,14,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,13,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,9,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,19,0,0,0,1,0,0,0,18,0,0,0,0,0,0,0,17,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,23,0,0,0,1,0,0,0,22,0,0,0,0,0,0,0,21,0,0,0,4,0,0,0,20,0,0,0,1,0,0,0,11,0,0,0,1,0,0,0,14,0,0,0,4,0,0,0,1,0,0,0,255,0,0,0,4,0,0,0,1,0,0,0,15,0,0,0,2,0,0,0,10,0,0,0,4,0,0,0,5,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,9,0,0,0,255,0,0,0,12,0,0,0,4,0,0,0,7,0,0,0,255,0,0,0,2,0,0,0,4,0,0,0,13,0,0,0,255,0,0,0,8,0,0,0,1,0,0,0,19,0,0,0,2,0,0,0,18,0,0,0,4,0,0,0,17,0,0,0,255,0,0,0,16,0,0,0,1,0,0,0,23,0,0,0,2,0,0,0,22,0,0,0,4,0,0,0,21,0,0,0,255,0,0,0,20,0,0,0,1,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,9,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,7,0,0,0,4,0,0,0,12,0,0,0,4,0,0,0,13,0,0,0,1,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,4,0,0,0,16,0,0,0,4,0,0,0,17,0,0,0,1,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,4,0,0,0,20,0,0,0,4,0,0,0,21,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,0,0,0,0,13,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,15,0,0,0,4,0,0,0,10,0,0,0,4,0,0,0,9,0,0,0,4,0,0,0,12,0,0,0,4,0,0,0,11,0,0,0,4,0,0,0,14,0,0,0,0,0,0,0,17,0,0,0,4,0,0,0,16,0,0,0,0,0,0,0,19,0,0,0,4,0,0,0,18,0,0,0,0,0,0,0,21,0,0,0,4,0,0,0,20,0,0,0,0,0,0,0,23,0,0,0,4,0,0,0,22,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,8,0,0,0,12,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,8,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,12,0,0,0,12,0,0,0,8,0,0,0,8,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,15,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,3,0,0,0,15,0,0,0,0,0,0,0,5,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,3,0,0,0,15,0,0,0,1,0,0,0,10,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,3,0,0,0,15,0,0,0,1,0,0,0,10,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,4,0,0,0,1,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,1,0,0,0,14,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,1,0,0,0,14,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,7,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,13,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,13,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,3,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,9,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,9,0,0,0,4,0,0,0,12,0,0,0,1,0,0,0,14,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,255,0,0,0,4,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,1,0,0,0,14,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,1,0,0,0,14,0,0,0,4,0,0,0,1,0,0,0,255,0,0,0,4,0,0,0,2,0,0,0,10,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,2,0,0,0,10,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,15,0,0,0,2,0,0,0,10,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,15,0,0,0,2,0,0,0,10,0,0,0,4,0,0,0,5,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,255,0,0,0,12,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,9,0,0,0,255,0,0,0,12,0,0,0,255,0,0,0,2,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,2,0,0,0,255,0,0,0,8,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,7,0,0,0,255,0,0,0,2,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,7,0,0,0,255,0,0,0,2,0,0,0,4,0,0,0,13,0,0,0,255,0,0,0,8,0,0,0,1,0,0,0,10,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,10,0,0,0,4,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,14,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,4,0,0,0,4,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,2,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,3,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,9,0,0,0,4,0,0,0,6,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,12,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,7,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,7,0,0,0,4,0,0,0,12,0,0,0,4,0,0,0,13,0,0,0,0,0,0,0,5,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,3,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,0,0,0,0,13,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,15,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,0,0,0,8,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,15,0,0,0,4,0,0,0,10,0,0,0,4,0,0,0,9,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,9,0,0,0,4,0,0,0,11,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,9,0,0,0,4,0,0,0,12,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,9,0,0,0,4,0,0,0,12,0,0,0,4,0,0,0,11,0,0,0,4,0,0,0,14,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,6,7,8,9,10,12,13,15,17,20,22,25,28,32,36,40,45,50,56,63,71,80,90,101,113,127,144,162,182,203,226,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,4,4,4,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,2,1,2,3,1,2,3,2,2,3,2,2,4,2,3,4,2,3,4,3,3,5,3,4,6,3,4,6,4,5,7,4,5,8,4,6,9,5,7,10,6,8,11,6,8,13,7,10,14,8,11,16,9,12,18,10,13,20,11,15,23,13,17,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,69,67,79,68,69,82,32,73,78,73,84,73,65,76,73,90,65,84,73,79,78,32,70,65,73,76,69,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          }
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
   
  Module["_strlen"] = _strlen;
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  function ___errno_location() {
      return ___errno_state;
    }

  function _broadwayOnPictureDecoded($buffer, width, height) {
      _broadwayOnPictureDecoded($buffer, width, height);
    }
  Module["_broadwayOnPictureDecoded"] = _broadwayOnPictureDecoded;

  function _broadwayOnHeadersDecoded() {
      _broadwayOnHeadersDecoded();
    }
  Module["_broadwayOnHeadersDecoded"] = _broadwayOnHeadersDecoded;

  function _abort() {
      Module['abort']();
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "invoke_viiiii": invoke_viiiii, "_broadwayOnPictureDecoded": _broadwayOnPictureDecoded, "_puts": _puts, "_fflush": _fflush, "_fputc": _fputc, "_send": _send, "_pwrite": _pwrite, "_fputs": _fputs, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_abort": _abort, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "_mkport": _mkport, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_broadwayOnHeadersDecoded": _broadwayOnHeadersDecoded, "_write": _write, "_time": _time, "_sysconf": _sysconf, "___errno_location": ___errno_location, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "NaN": NaN, "Infinity": Infinity };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var invoke_viiiii=env.invoke_viiiii;
  var _broadwayOnPictureDecoded=env._broadwayOnPictureDecoded;
  var _puts=env._puts;
  var _fflush=env._fflush;
  var _fputc=env._fputc;
  var _send=env._send;
  var _pwrite=env._pwrite;
  var _fputs=env._fputs;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _abort=env._abort;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var _mkport=env._mkport;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _broadwayOnHeadersDecoded=env._broadwayOnHeadersDecoded;
  var _write=env._write;
  var _time=env._time;
  var _sysconf=env._sysconf;
  var ___errno_location=env.___errno_location;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _h264bsdProcessBlock($data,$qp,$skip,$coeffMap) {
 $data = $data|0;
 $qp = $qp|0;
 $skip = $skip|0;
 $coeffMap = $coeffMap|0;
 var $$0 = 0, $$017 = 0, $$phi$trans$insert = 0, $$phi$trans$insert12 = 0, $$phi$trans$insert14 = 0, $$pre = 0, $$pre11 = 0, $$pre13 = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (8 + ($qp)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (64 + ($qp)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (120 + (($5*12)|0)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 << $2;
 $9 = ((120 + (($5*12)|0)|0) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 << $2;
 $12 = ((120 + (($5*12)|0)|0) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << $2;
 $15 = ($skip|0)==(0);
 if ($15) {
  $16 = HEAP32[$data>>2]|0;
  $17 = Math_imul($16, $8)|0;
  HEAP32[$data>>2] = $17;
 }
 $18 = $coeffMap & 65436;
 $19 = ($18|0)==(0);
 L4: do {
  if ($19) {
   $154 = $coeffMap & 98;
   $155 = ($154|0)==(0);
   if (!($155)) {
    $176 = (($data) + 4|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = Math_imul($177, $11)|0;
    $179 = (($data) + 20|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = Math_imul($180, $8)|0;
    $182 = (($data) + 8|0);
    $183 = (($data) + 24|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = Math_imul($184, $11)|0;
    $186 = (($data) + 12|0);
    $187 = HEAP32[$data>>2]|0;
    $188 = (($181) + ($187))|0;
    $189 = (($187) - ($181))|0;
    $190 = $178 >> 1;
    $191 = (($190) - ($185))|0;
    $192 = $185 >> 1;
    $193 = (($178) + ($192))|0;
    $194 = (($188) + 32)|0;
    $195 = (($194) + ($193))|0;
    $196 = $195 >> 6;
    HEAP32[$data>>2] = $196;
    $197 = (($189) + 32)|0;
    $198 = (($197) + ($191))|0;
    $199 = $198 >> 6;
    HEAP32[$176>>2] = $199;
    $200 = (($197) - ($191))|0;
    $201 = $200 >> 6;
    HEAP32[$182>>2] = $201;
    $202 = (($194) - ($193))|0;
    $203 = $202 >> 6;
    HEAP32[$186>>2] = $203;
    $204 = (($data) + 48|0);
    HEAP32[$204>>2] = $196;
    $205 = (($data) + 32|0);
    HEAP32[$205>>2] = $196;
    $206 = (($data) + 16|0);
    HEAP32[$206>>2] = $196;
    $207 = (($data) + 52|0);
    HEAP32[$207>>2] = $199;
    $208 = (($data) + 36|0);
    HEAP32[$208>>2] = $199;
    HEAP32[$179>>2] = $199;
    $209 = (($data) + 56|0);
    HEAP32[$209>>2] = $201;
    $210 = (($data) + 40|0);
    HEAP32[$210>>2] = $201;
    HEAP32[$183>>2] = $201;
    $211 = (($data) + 60|0);
    HEAP32[$211>>2] = $203;
    $212 = (($data) + 44|0);
    HEAP32[$212>>2] = $203;
    $213 = (($data) + 28|0);
    HEAP32[$213>>2] = $203;
    $214 = (($196) + 512)|0;
    $215 = ($214>>>0)>(1023);
    $216 = (($199) + 512)|0;
    $217 = ($216>>>0)>(1023);
    $or$cond19 = $215 | $217;
    $218 = (($201) + 512)|0;
    $219 = ($218>>>0)>(1023);
    $or$cond21 = $or$cond19 | $219;
    $220 = (($203) + 512)|0;
    $221 = ($220>>>0)>(1023);
    $or$cond23 = $or$cond21 | $221;
    if ($or$cond23) {
     $$0 = 1;
    } else {
     break;
    }
    STACKTOP = sp;return ($$0|0);
   }
   $156 = HEAP32[$data>>2]|0;
   $157 = (($156) + 32)|0;
   $158 = $157 >> 6;
   $159 = (($158) + 512)|0;
   $160 = ($159>>>0)>(1023);
   if ($160) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $161 = (($data) + 60|0);
    HEAP32[$161>>2] = $158;
    $162 = (($data) + 56|0);
    HEAP32[$162>>2] = $158;
    $163 = (($data) + 52|0);
    HEAP32[$163>>2] = $158;
    $164 = (($data) + 48|0);
    HEAP32[$164>>2] = $158;
    $165 = (($data) + 44|0);
    HEAP32[$165>>2] = $158;
    $166 = (($data) + 40|0);
    HEAP32[$166>>2] = $158;
    $167 = (($data) + 36|0);
    HEAP32[$167>>2] = $158;
    $168 = (($data) + 32|0);
    HEAP32[$168>>2] = $158;
    $169 = (($data) + 28|0);
    HEAP32[$169>>2] = $158;
    $170 = (($data) + 24|0);
    HEAP32[$170>>2] = $158;
    $171 = (($data) + 20|0);
    HEAP32[$171>>2] = $158;
    $172 = (($data) + 16|0);
    HEAP32[$172>>2] = $158;
    $173 = (($data) + 12|0);
    HEAP32[$173>>2] = $158;
    $174 = (($data) + 8|0);
    HEAP32[$174>>2] = $158;
    $175 = (($data) + 4|0);
    HEAP32[$175>>2] = $158;
    HEAP32[$data>>2] = $158;
    break;
   }
  } else {
   $20 = (($data) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($data) + 56|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($data) + 60|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = Math_imul($21, $11)|0;
   $27 = Math_imul($23, $11)|0;
   HEAP32[$22>>2] = $27;
   $28 = Math_imul($25, $14)|0;
   HEAP32[$24>>2] = $28;
   $29 = (($data) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($data) + 20|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($data) + 16|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = Math_imul($32, $8)|0;
   $36 = Math_imul($34, $14)|0;
   $37 = (($data) + 32|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($data) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($data) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = Math_imul($38, $11)|0;
   $44 = Math_imul($42, $11)|0;
   $45 = (($data) + 28|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($data) + 48|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($data) + 36|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = Math_imul($48, $14)|0;
   $52 = Math_imul($50, $11)|0;
   $53 = (($data) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($data) + 44|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($data) + 52|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = Math_imul($54, $14)|0;
   $60 = Math_imul($58, $11)|0;
   $61 = HEAP32[$data>>2]|0;
   $62 = (($35) + ($61))|0;
   $63 = (($61) - ($35))|0;
   $64 = $26 >> 1;
   $65 = (($64) - ($44))|0;
   $66 = $44 >> 1;
   $67 = (($66) + ($26))|0;
   $68 = (($67) + ($62))|0;
   HEAP32[$data>>2] = $68;
   $69 = (($65) + ($63))|0;
   HEAP32[$20>>2] = $69;
   $70 = (($63) - ($65))|0;
   HEAP32[$29>>2] = $70;
   $71 = (($62) - ($67))|0;
   HEAP32[$39>>2] = $71;
   $72 = (($data) + 24|0);
   $73 = (($46) + ($30))|0;
   $74 = Math_imul($11, $73)|0;
   $75 = (($30) - ($46))|0;
   $76 = Math_imul($75, $11)|0;
   $77 = (($data) + 20|0);
   $78 = $36 >> 1;
   $79 = (($data) + 28|0);
   $80 = (($78) - ($51))|0;
   $81 = $51 >> 1;
   $82 = (($81) + ($36))|0;
   $83 = (($82) + ($74))|0;
   HEAP32[$33>>2] = $83;
   $84 = (($80) + ($76))|0;
   HEAP32[$77>>2] = $84;
   $85 = (($76) - ($80))|0;
   HEAP32[$72>>2] = $85;
   $86 = (($74) - ($82))|0;
   HEAP32[$79>>2] = $86;
   $87 = (($data) + 32|0);
   $88 = (($data) + 40|0);
   $89 = (($56) + ($40))|0;
   $90 = Math_imul($8, $89)|0;
   $91 = (($40) - ($56))|0;
   $92 = Math_imul($91, $8)|0;
   $93 = (($data) + 36|0);
   $94 = $43 >> 1;
   $95 = (($data) + 44|0);
   $96 = (($94) - ($60))|0;
   $97 = $60 >> 1;
   $98 = (($97) + ($43))|0;
   $99 = (($98) + ($90))|0;
   HEAP32[$87>>2] = $99;
   $100 = (($96) + ($92))|0;
   HEAP32[$93>>2] = $100;
   $101 = (($92) - ($96))|0;
   HEAP32[$88>>2] = $101;
   $102 = (($90) - ($98))|0;
   HEAP32[$95>>2] = $102;
   $103 = (($data) + 48|0);
   $104 = (($data) + 56|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = (($105) + ($52))|0;
   $107 = (($52) - ($105))|0;
   $108 = (($data) + 52|0);
   $109 = $59 >> 1;
   $110 = (($data) + 60|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($109) - ($111))|0;
   $113 = $111 >> 1;
   $114 = (($113) + ($59))|0;
   $115 = (($114) + ($106))|0;
   HEAP32[$103>>2] = $115;
   $116 = (($112) + ($107))|0;
   HEAP32[$108>>2] = $116;
   $117 = (($107) - ($112))|0;
   HEAP32[$104>>2] = $117;
   $118 = (($106) - ($114))|0;
   HEAP32[$110>>2] = $118;
   $$017 = $data;$120 = 3;$125 = $68;$126 = $99;$130 = $83;$133 = $115;
   while(1) {
    $123 = (($$017) + 32|0);
    $124 = (($126) + ($125))|0;
    $127 = (($125) - ($126))|0;
    $128 = (($$017) + 16|0);
    $129 = $130 >> 1;
    $131 = (($$017) + 48|0);
    $132 = (($129) - ($133))|0;
    $134 = $133 >> 1;
    $135 = (($134) + ($130))|0;
    $136 = (($124) + 32)|0;
    $137 = (($136) + ($135))|0;
    $138 = $137 >> 6;
    HEAP32[$$017>>2] = $138;
    $139 = (($127) + 32)|0;
    $140 = (($139) + ($132))|0;
    $141 = $140 >> 6;
    HEAP32[$128>>2] = $141;
    $142 = (($139) - ($132))|0;
    $143 = $142 >> 6;
    HEAP32[$123>>2] = $143;
    $144 = (($136) - ($135))|0;
    $145 = $144 >> 6;
    HEAP32[$131>>2] = $145;
    $146 = (($138) + 512)|0;
    $147 = ($146>>>0)>(1023);
    $148 = (($141) + 512)|0;
    $149 = ($148>>>0)>(1023);
    $or$cond17 = $147 | $149;
    if ($or$cond17) {
     $$0 = 1;
     label = 14;
     break;
    }
    $150 = (($143) + 512)|0;
    $151 = ($150>>>0)>(1023);
    $152 = (($145) + 512)|0;
    $153 = ($152>>>0)>(1023);
    $or$cond = $151 | $153;
    if ($or$cond) {
     $$0 = 1;
     label = 14;
     break;
    }
    $119 = (($$017) + 4|0);
    $121 = ($120|0)==(0);
    if ($121) {
     break L4;
    }
    $122 = (($120) + -1)|0;
    $$pre = HEAP32[$119>>2]|0;
    $$phi$trans$insert = (($$017) + 36|0);
    $$pre11 = HEAP32[$$phi$trans$insert>>2]|0;
    $$phi$trans$insert12 = (($$017) + 20|0);
    $$pre13 = HEAP32[$$phi$trans$insert12>>2]|0;
    $$phi$trans$insert14 = (($$017) + 52|0);
    $$pre15 = HEAP32[$$phi$trans$insert14>>2]|0;
    $$017 = $119;$120 = $122;$125 = $$pre;$126 = $$pre11;$130 = $$pre13;$133 = $$pre15;
   }
   if ((label|0) == 14) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdProcessLumaDc($data,$qp) {
 $data = $data|0;
 $qp = $qp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (64 + ($qp)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = (8 + ($qp)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = (($data) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($data) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($data) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($data) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($data) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($data) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($data) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($data) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($data) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($data) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($data) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($data) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$data>>2]|0;
 $29 = (($7) + ($28))|0;
 $30 = (($28) - ($7))|0;
 $31 = (($data) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) - ($15))|0;
 $34 = (($15) + ($32))|0;
 $35 = (($34) + ($29))|0;
 HEAP32[$data>>2] = $35;
 $36 = (($33) + ($30))|0;
 HEAP32[$31>>2] = $36;
 $37 = (($30) - ($33))|0;
 HEAP32[$4>>2] = $37;
 $38 = (($29) - ($34))|0;
 HEAP32[$12>>2] = $38;
 $39 = (($data) + 24|0);
 $40 = (($17) + ($5))|0;
 $41 = (($5) - ($17))|0;
 $42 = (($data) + 20|0);
 $43 = (($data) + 28|0);
 $44 = (($9) - ($19))|0;
 $45 = (($19) + ($9))|0;
 $46 = (($45) + ($40))|0;
 HEAP32[$8>>2] = $46;
 $47 = (($44) + ($41))|0;
 HEAP32[$42>>2] = $47;
 $48 = (($41) - ($44))|0;
 HEAP32[$39>>2] = $48;
 $49 = (($40) - ($45))|0;
 HEAP32[$43>>2] = $49;
 $50 = (($data) + 32|0);
 $51 = (($data) + 40|0);
 $52 = (($25) + ($13))|0;
 $53 = (($13) - ($25))|0;
 $54 = (($data) + 36|0);
 $55 = (($data) + 44|0);
 $56 = (($11) - ($27))|0;
 $57 = (($27) + ($11))|0;
 $58 = (($57) + ($52))|0;
 HEAP32[$50>>2] = $58;
 $59 = (($56) + ($53))|0;
 HEAP32[$54>>2] = $59;
 $60 = (($53) - ($56))|0;
 HEAP32[$51>>2] = $60;
 $61 = (($52) - ($57))|0;
 HEAP32[$55>>2] = $61;
 $62 = (($data) + 48|0);
 $63 = (($data) + 56|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + ($21))|0;
 $66 = (($21) - ($64))|0;
 $67 = (($data) + 52|0);
 $68 = (($data) + 60|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($23) - ($69))|0;
 $71 = (($69) + ($23))|0;
 $72 = (($71) + ($65))|0;
 HEAP32[$62>>2] = $72;
 $73 = (($70) + ($66))|0;
 HEAP32[$67>>2] = $73;
 $74 = (($66) - ($70))|0;
 HEAP32[$63>>2] = $74;
 $75 = (($65) - ($71))|0;
 HEAP32[$68>>2] = $75;
 $76 = $1&255;
 $77 = $3&255;
 $78 = (120 + (($76*12)|0)|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($qp>>>0)>(11);
 if ($80) {
  $81 = (($77) + -2)|0;
  $82 = $79 << $81;
  $83 = (($58) + ($35))|0;
  $84 = (($35) - ($58))|0;
  $85 = (($46) - ($72))|0;
  $86 = (($72) + ($46))|0;
  $87 = (($86) + ($83))|0;
  $88 = Math_imul($87, $82)|0;
  HEAP32[$data>>2] = $88;
  $89 = (($85) + ($84))|0;
  $90 = Math_imul($89, $82)|0;
  HEAP32[$8>>2] = $90;
  $91 = (($84) - ($85))|0;
  $92 = Math_imul($91, $82)|0;
  HEAP32[$10>>2] = $92;
  $93 = (($83) - ($86))|0;
  $94 = Math_imul($93, $82)|0;
  HEAP32[$18>>2] = $94;
  $95 = (($data) + 36|0);
  $96 = (($59) + ($36))|0;
  $97 = (($36) - ($59))|0;
  $98 = (($data) + 20|0);
  $99 = (($data) + 52|0);
  $100 = (($47) - ($73))|0;
  $101 = (($73) + ($47))|0;
  $102 = (($101) + ($96))|0;
  $103 = Math_imul($102, $82)|0;
  HEAP32[$31>>2] = $103;
  $104 = (($100) + ($97))|0;
  $105 = Math_imul($104, $82)|0;
  HEAP32[$98>>2] = $105;
  $106 = (($97) - ($100))|0;
  $107 = Math_imul($106, $82)|0;
  HEAP32[$95>>2] = $107;
  $108 = (($96) - ($101))|0;
  $109 = Math_imul($108, $82)|0;
  HEAP32[$99>>2] = $109;
  $110 = (($data) + 8|0);
  $111 = (($data) + 40|0);
  $112 = (($60) + ($37))|0;
  $113 = (($37) - ($60))|0;
  $114 = (($data) + 24|0);
  $115 = (($data) + 56|0);
  $116 = (($48) - ($74))|0;
  $117 = (($74) + ($48))|0;
  $118 = (($117) + ($112))|0;
  $119 = Math_imul($118, $82)|0;
  HEAP32[$110>>2] = $119;
  $120 = (($116) + ($113))|0;
  $121 = Math_imul($120, $82)|0;
  HEAP32[$114>>2] = $121;
  $122 = (($113) - ($116))|0;
  $123 = Math_imul($122, $82)|0;
  HEAP32[$111>>2] = $123;
  $124 = (($112) - ($117))|0;
  $125 = Math_imul($124, $82)|0;
  HEAP32[$115>>2] = $125;
  $126 = (($data) + 12|0);
  $127 = (($data) + 44|0);
  $128 = (($61) + ($38))|0;
  $129 = (($38) - ($61))|0;
  $130 = (($data) + 28|0);
  $131 = (($data) + 60|0);
  $132 = (($49) - ($75))|0;
  $133 = (($75) + ($49))|0;
  $134 = (($133) + ($128))|0;
  $135 = Math_imul($134, $82)|0;
  HEAP32[$126>>2] = $135;
  $136 = (($132) + ($129))|0;
  $137 = Math_imul($136, $82)|0;
  HEAP32[$130>>2] = $137;
  $138 = (($129) - ($132))|0;
  $139 = Math_imul($138, $82)|0;
  HEAP32[$127>>2] = $139;
  $140 = (($128) - ($133))|0;
  $141 = Math_imul($140, $82)|0;
  HEAP32[$131>>2] = $141;
  STACKTOP = sp;return;
 } else {
  $142 = (($qp) + -6)|0;
  $143 = ($142>>>0)<(6);
  $144 = $143 ? 1 : 2;
  $145 = (2 - ($77))|0;
  $146 = (($58) + ($35))|0;
  $147 = (($35) - ($58))|0;
  $148 = (($46) - ($72))|0;
  $149 = (($72) + ($46))|0;
  $150 = (($149) + ($146))|0;
  $151 = Math_imul($150, $79)|0;
  $152 = (($151) + ($144))|0;
  $153 = $152 >> $145;
  HEAP32[$data>>2] = $153;
  $154 = (($148) + ($147))|0;
  $155 = Math_imul($154, $79)|0;
  $156 = (($155) + ($144))|0;
  $157 = $156 >> $145;
  HEAP32[$8>>2] = $157;
  $158 = (($147) - ($148))|0;
  $159 = Math_imul($158, $79)|0;
  $160 = (($159) + ($144))|0;
  $161 = $160 >> $145;
  HEAP32[$10>>2] = $161;
  $162 = (($146) - ($149))|0;
  $163 = Math_imul($162, $79)|0;
  $164 = (($163) + ($144))|0;
  $165 = $164 >> $145;
  HEAP32[$18>>2] = $165;
  $166 = (($data) + 36|0);
  $167 = (($59) + ($36))|0;
  $168 = (($36) - ($59))|0;
  $169 = (($data) + 20|0);
  $170 = (($data) + 52|0);
  $171 = (($47) - ($73))|0;
  $172 = (($73) + ($47))|0;
  $173 = (($172) + ($167))|0;
  $174 = Math_imul($173, $79)|0;
  $175 = (($174) + ($144))|0;
  $176 = $175 >> $145;
  HEAP32[$31>>2] = $176;
  $177 = (($171) + ($168))|0;
  $178 = Math_imul($177, $79)|0;
  $179 = (($178) + ($144))|0;
  $180 = $179 >> $145;
  HEAP32[$169>>2] = $180;
  $181 = (($168) - ($171))|0;
  $182 = Math_imul($181, $79)|0;
  $183 = (($182) + ($144))|0;
  $184 = $183 >> $145;
  HEAP32[$166>>2] = $184;
  $185 = (($167) - ($172))|0;
  $186 = Math_imul($185, $79)|0;
  $187 = (($186) + ($144))|0;
  $188 = $187 >> $145;
  HEAP32[$170>>2] = $188;
  $189 = (($data) + 8|0);
  $190 = (($data) + 40|0);
  $191 = (($60) + ($37))|0;
  $192 = (($37) - ($60))|0;
  $193 = (($data) + 24|0);
  $194 = (($data) + 56|0);
  $195 = (($48) - ($74))|0;
  $196 = (($74) + ($48))|0;
  $197 = (($196) + ($191))|0;
  $198 = Math_imul($197, $79)|0;
  $199 = (($198) + ($144))|0;
  $200 = $199 >> $145;
  HEAP32[$189>>2] = $200;
  $201 = (($195) + ($192))|0;
  $202 = Math_imul($201, $79)|0;
  $203 = (($202) + ($144))|0;
  $204 = $203 >> $145;
  HEAP32[$193>>2] = $204;
  $205 = (($192) - ($195))|0;
  $206 = Math_imul($205, $79)|0;
  $207 = (($206) + ($144))|0;
  $208 = $207 >> $145;
  HEAP32[$190>>2] = $208;
  $209 = (($191) - ($196))|0;
  $210 = Math_imul($209, $79)|0;
  $211 = (($210) + ($144))|0;
  $212 = $211 >> $145;
  HEAP32[$194>>2] = $212;
  $213 = (($data) + 12|0);
  $214 = (($data) + 44|0);
  $215 = (($61) + ($38))|0;
  $216 = (($38) - ($61))|0;
  $217 = (($data) + 28|0);
  $218 = (($data) + 60|0);
  $219 = (($49) - ($75))|0;
  $220 = (($75) + ($49))|0;
  $221 = (($220) + ($215))|0;
  $222 = Math_imul($221, $79)|0;
  $223 = (($222) + ($144))|0;
  $224 = $223 >> $145;
  HEAP32[$213>>2] = $224;
  $225 = (($219) + ($216))|0;
  $226 = Math_imul($225, $79)|0;
  $227 = (($226) + ($144))|0;
  $228 = $227 >> $145;
  HEAP32[$217>>2] = $228;
  $229 = (($216) - ($219))|0;
  $230 = Math_imul($229, $79)|0;
  $231 = (($230) + ($144))|0;
  $232 = $231 >> $145;
  HEAP32[$214>>2] = $232;
  $233 = (($215) - ($220))|0;
  $234 = Math_imul($233, $79)|0;
  $235 = (($234) + ($144))|0;
  $236 = $235 >> $145;
  HEAP32[$218>>2] = $236;
  STACKTOP = sp;return;
 }
}
function _h264bsdProcessChromaDc($data,$qp) {
 $data = $data|0;
 $qp = $qp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $levScale$0 = 0, $levShift$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (64 + ($qp)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (120 + (($2*12)|0)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($qp>>>0)>(5);
 if ($5) {
  $6 = (8 + ($qp)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = (($8) + -1)|0;
  $10 = $4 << $9;
  $levScale$0 = $10;$levShift$0 = 0;
 } else {
  $levScale$0 = $4;$levShift$0 = 1;
 }
 $11 = HEAP32[$data>>2]|0;
 $12 = (($data) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($11))|0;
 $15 = (($11) - ($13))|0;
 $16 = (($data) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($data) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = (($19) + ($17))|0;
 $22 = (($21) + ($14))|0;
 $23 = Math_imul($22, $levScale$0)|0;
 $24 = $23 >> $levShift$0;
 HEAP32[$data>>2] = $24;
 $25 = (($14) - ($21))|0;
 $26 = Math_imul($25, $levScale$0)|0;
 $27 = $26 >> $levShift$0;
 HEAP32[$16>>2] = $27;
 $28 = (($20) + ($15))|0;
 $29 = Math_imul($28, $levScale$0)|0;
 $30 = $29 >> $levShift$0;
 HEAP32[$12>>2] = $30;
 $31 = (($15) - ($20))|0;
 $32 = Math_imul($31, $levScale$0)|0;
 $33 = $32 >> $levShift$0;
 HEAP32[$18>>2] = $33;
 $34 = (($data) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($data) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + ($35))|0;
 $39 = (($35) - ($37))|0;
 $40 = (($data) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($data) + 28|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) - ($43))|0;
 $45 = (($43) + ($41))|0;
 $46 = (($45) + ($38))|0;
 $47 = Math_imul($46, $levScale$0)|0;
 $48 = $47 >> $levShift$0;
 HEAP32[$34>>2] = $48;
 $49 = (($38) - ($45))|0;
 $50 = Math_imul($49, $levScale$0)|0;
 $51 = $50 >> $levShift$0;
 HEAP32[$40>>2] = $51;
 $52 = (($44) + ($39))|0;
 $53 = Math_imul($52, $levScale$0)|0;
 $54 = $53 >> $levShift$0;
 HEAP32[$36>>2] = $54;
 $55 = (($39) - ($44))|0;
 $56 = Math_imul($55, $levScale$0)|0;
 $57 = $56 >> $levShift$0;
 HEAP32[$42>>2] = $57;
 STACKTOP = sp;return;
}
function _h264bsdCountLeadingZeros($value,$length) {
 $value = $value|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $mask$03 = 0, $or$cond = 0, $zeros$0$lcssa = 0, $zeros$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($length) + -1)|0;
 $1 = 1 << $0;
 $2 = $1 & $value;
 $3 = ($2|0)==(0);
 if ($3) {
  $mask$03 = $1;$zeros$02 = 0;
 } else {
  $zeros$0$lcssa = 0;
  STACKTOP = sp;return ($zeros$0$lcssa|0);
 }
 while(1) {
  $4 = (($zeros$02) + 1)|0;
  $5 = $mask$03 >>> 1;
  $6 = ($5|0)!=(0);
  $7 = $5 & $value;
  $8 = ($7|0)==(0);
  $or$cond = $6 & $8;
  if ($or$cond) {
   $mask$03 = $5;$zeros$02 = $4;
  } else {
   $zeros$0$lcssa = $4;
   break;
  }
 }
 STACKTOP = sp;return ($zeros$0$lcssa|0);
}
function _h264bsdRbspTrailingBits($pStrmData) {
 $pStrmData = $pStrmData|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStrmData) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (8 - ($1))|0;
 $3 = (_h264bsdGetBits($pStrmData,$2)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($2) + -1)|0;
 $6 = (400 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $not$ = ($3|0)!=($7|0);
 $$ = $not$&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdMoreRbspData($pStrmData) {
 $pStrmData = $pStrmData|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStrmData) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 << 3;
 $3 = (($pStrmData) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = ($2|0)==($4|0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ($5>>>0)>(8);
 if ($7) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $8 = (_h264bsdShowBits32($pStrmData)|0);
  $9 = (32 - ($5))|0;
  $10 = $8 >>> $9;
  $11 = (($5) + -1)|0;
  $12 = 1 << $11;
  $not$ = ($10|0)!=($12|0);
  $$ = $not$&1;
  STACKTOP = sp;return ($$|0);
 }
 return (0)|0;
}
function _h264bsdNextMbAddress($pSliceGroupMap,$picSizeInMbs,$currMbAddr) {
 $pSliceGroupMap = $pSliceGroupMap|0;
 $picSizeInMbs = $picSizeInMbs|0;
 $currMbAddr = $currMbAddr|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $i$0$sink = 0, $tmp$0 = 0, $tmp$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pSliceGroupMap) + ($currMbAddr<<2)|0);
 $1 = HEAP32[$0>>2]|0;
 $i$0$sink = $currMbAddr;
 while(1) {
  $2 = (($i$0$sink) + 1)|0;
  $3 = ($2>>>0)<($picSizeInMbs>>>0);
  if (!($3)) {
   break;
  }
  $tmp$0$in = (($pSliceGroupMap) + ($2<<2)|0);
  $tmp$0 = HEAP32[$tmp$0$in>>2]|0;
  $4 = ($tmp$0|0)==($1|0);
  if ($4) {
   break;
  } else {
   $i$0$sink = $2;
  }
 }
 $5 = ($2|0)==($picSizeInMbs|0);
 $$ = $5 ? 0 : $2;
 STACKTOP = sp;return ($$|0);
}
function _h264bsdSetCurrImageMbPointers($image,$mbNum) {
 $image = $image|0;
 $mbNum = $mbNum|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($image) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($image) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($mbNum>>>0) % ($1>>>0))&-1;
 $5 = (($mbNum) - ($4))|0;
 $6 = Math_imul($3, $1)|0;
 $7 = HEAP32[$image>>2]|0;
 $8 = $4 << 4;
 $9 = $5 << 8;
 $$sum = (($9) + ($8))|0;
 $10 = (($7) + ($$sum)|0);
 $11 = (($image) + 12|0);
 HEAP32[$11>>2] = $10;
 $12 = $6 << 8;
 $13 = $5 << 6;
 $14 = $4 << 3;
 $$sum1 = (($14) + ($12))|0;
 $$sum2 = (($$sum1) + ($13))|0;
 $15 = (($7) + ($$sum2)|0);
 $16 = (($image) + 16|0);
 HEAP32[$16>>2] = $15;
 $17 = $6 << 6;
 $$sum3 = (($$sum2) + ($17))|0;
 $18 = (($7) + ($$sum3)|0);
 $19 = (($image) + 20|0);
 HEAP32[$19>>2] = $18;
 STACKTOP = sp;return;
}
function _clip($x,$y,$z) {
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($z|0)<($x|0);
 if ($0) {
  $3 = $x;
 } else {
  $1 = ($z|0)>($y|0);
  $2 = $1 ? $y : $z;
  $3 = $2;
 }
 STACKTOP = sp;return ($3|0);
}
function _h264bsdExtractNalUnit($pByteStream,$len,$pStrmData,$readBytes) {
 $pByteStream = $pByteStream|0;
 $len = $len|0;
 $pStrmData = $pStrmData|0;
 $readBytes = $readBytes|0;
 var $$0 = 0, $$invalidStream$0 = 0, $$neg = 0, $$neg31 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $byteCount$1 = 0, $hasEmulation$0 = 0;
 var $hasEmulation$1 = 0, $hasEmulation$2 = 0, $i$0 = 0, $i$0$ph = 0, $initByteCount$0 = 0, $invalidStream$0 = 0, $invalidStream$2 = 0, $invalidStream$3 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $readPtr$1 = 0, $readPtr$2 = 0, $readPtr$2$ph = 0, $writePtr$0$ph = 0, $zeroCount$0$be = 0, $zeroCount$030 = 0, $zeroCount$1 = 0, $zeroCount$1$ = 0, $zeroCount$3 = 0;
 var $zeroCount$4 = 0, $zeroCount$5 = 0, $zeroCount$5$ph = 0, $zeroCount$538 = 0, $zeroCount$6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len>>>0)>(3);
 L1: do {
  if ($0) {
   $1 = HEAP8[$pByteStream>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $3 = (($pByteStream) + 1|0);
    $4 = HEAP8[$3>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (($pByteStream) + 2|0);
     $7 = HEAP8[$6>>0]|0;
     $8 = ($7&255)<(2);
     if ($8) {
      $9 = ($len|0)==(3);
      L6: do {
       if (!($9)) {
        $10 = (($pByteStream) + 3|0);
        $$neg31 = -3;$11 = $7;$15 = 3;$18 = $10;$zeroCount$030 = 2;
        while(1) {
         $12 = ($11<<24>>24)==(0);
         if ($12) {
          $13 = (($zeroCount$030) + 1)|0;
          $zeroCount$0$be = $13;
         } else {
          $19 = ($11<<24>>24)==(1);
          $20 = ($zeroCount$030>>>0)>(1);
          $or$cond = $19 & $20;
          if ($or$cond) {
           $byteCount$1 = $15;$hasEmulation$0 = 0;$invalidStream$0 = 0;$readPtr$1 = $18;$zeroCount$1 = 0;
           break;
          } else {
           $zeroCount$0$be = 0;
          }
         }
         $14 = (($15) + 1)|0;
         $16 = ($14|0)==($len|0);
         if ($16) {
          break L6;
         }
         $$neg = $15 ^ -1;
         $17 = (($18) + 1|0);
         $$pre = HEAP8[$18>>0]|0;
         $$neg31 = $$neg;$11 = $$pre;$15 = $14;$18 = $17;$zeroCount$030 = $zeroCount$0$be;
        }
        while(1) {
         $21 = (($readPtr$1) + 1|0);
         $22 = HEAP8[$readPtr$1>>0]|0;
         $23 = (($byteCount$1) + 1)|0;
         $24 = ($22<<24>>24)!=(0);
         $25 = $24&1;
         $26 = $25 ^ 1;
         $zeroCount$1$ = (($26) + ($zeroCount$1))|0;
         $27 = ($22<<24>>24)==(3);
         $28 = ($zeroCount$1$|0)==(2);
         $or$cond3 = $27 & $28;
         $hasEmulation$1 = $or$cond3 ? 1 : $hasEmulation$0;
         $29 = ($22<<24>>24)==(1);
         $30 = ($zeroCount$1$>>>0)>(1);
         $or$cond5 = $29 & $30;
         if ($or$cond5) {
          label = 14;
          break;
         }
         if ($24) {
          $37 = ($zeroCount$1$>>>0)>(2);
          $$invalidStream$0 = $37 ? 1 : $invalidStream$0;
          $invalidStream$2 = $$invalidStream$0;$zeroCount$3 = 0;
         } else {
          $invalidStream$2 = $invalidStream$0;$zeroCount$3 = $zeroCount$1$;
         }
         $38 = ($23|0)==($len|0);
         if ($38) {
          label = 18;
          break;
         } else {
          $byteCount$1 = $23;$hasEmulation$0 = $hasEmulation$1;$invalidStream$0 = $invalidStream$2;$readPtr$1 = $21;$zeroCount$1 = $zeroCount$3;
         }
        }
        if ((label|0) == 14) {
         $31 = (($$neg31) + ($byteCount$1))|0;
         $32 = (($31) - ($zeroCount$1$))|0;
         $33 = (($pStrmData) + 12|0);
         HEAP32[$33>>2] = $32;
         $34 = ($zeroCount$1$>>>0)<(3);
         $35 = $34 ? $zeroCount$1$ : 3;
         $36 = (($zeroCount$1$) - ($35))|0;
         $50 = $32;$hasEmulation$2 = $hasEmulation$1;$initByteCount$0 = $15;$invalidStream$3 = $invalidStream$0;$zeroCount$4 = $36;
         break L1;
        }
        else if ((label|0) == 18) {
         $39 = (($$neg31) + ($len))|0;
         $40 = (($39) - ($zeroCount$3))|0;
         $41 = (($pStrmData) + 12|0);
         HEAP32[$41>>2] = $40;
         $50 = $40;$hasEmulation$2 = $hasEmulation$1;$initByteCount$0 = $15;$invalidStream$3 = $invalidStream$2;$zeroCount$4 = $zeroCount$3;
         break L1;
        }
       }
      } while(0);
      HEAP32[$readBytes>>2] = $len;
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     } else {
      label = 19;
     }
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
  } else {
   label = 19;
  }
 } while(0);
 if ((label|0) == 19) {
  $42 = (($pStrmData) + 12|0);
  HEAP32[$42>>2] = $len;
  $50 = $len;$hasEmulation$2 = 1;$initByteCount$0 = 0;$invalidStream$3 = 0;$zeroCount$4 = 0;
 }
 $43 = (($pByteStream) + ($initByteCount$0)|0);
 HEAP32[$pStrmData>>2] = $43;
 $44 = (($pStrmData) + 4|0);
 HEAP32[$44>>2] = $43;
 $45 = (($pStrmData) + 8|0);
 HEAP32[$45>>2] = 0;
 $46 = (($pStrmData) + 16|0);
 HEAP32[$46>>2] = 0;
 $47 = (($pStrmData) + 12|0);
 $48 = (($zeroCount$4) + ($initByteCount$0))|0;
 $49 = (($48) + ($50))|0;
 HEAP32[$readBytes>>2] = $49;
 $51 = ($invalidStream$3|0)==(0);
 if (!($51)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $52 = ($hasEmulation$2|0)==(0);
 if ($52) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = HEAP32[$47>>2]|0;
 $i$0$ph = $53;$readPtr$2$ph = $43;$writePtr$0$ph = $43;$zeroCount$5$ph = 0;
 L35: while(1) {
  $i$0 = $i$0$ph;$readPtr$2 = $readPtr$2$ph;$zeroCount$5 = $zeroCount$5$ph;
  while(1) {
   $54 = (($i$0) + -1)|0;
   $55 = ($i$0|0)==(0);
   if ($55) {
    label = 31;
    break L35;
   }
   $56 = ($zeroCount$5|0)==(2);
   $57 = HEAP8[$readPtr$2>>0]|0;
   if (!($56)) {
    $zeroCount$538 = $zeroCount$5;
    break;
   }
   $58 = ($57<<24>>24)==(3);
   if (!($58)) {
    label = 29;
    break;
   }
   $59 = ($54|0)==(0);
   if ($59) {
    $$0 = 1;
    label = 32;
    break L35;
   }
   $60 = (($readPtr$2) + 1|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = ($61&255)>(3);
   if ($62) {
    $$0 = 1;
    label = 32;
    break L35;
   } else {
    $i$0 = $54;$readPtr$2 = $60;$zeroCount$5 = 0;
   }
  }
  if ((label|0) == 29) {
   label = 0;
   $63 = ($57&255)<(3);
   if ($63) {
    $$0 = 1;
    label = 32;
    break;
   } else {
    $zeroCount$538 = 2;
   }
  }
  $64 = ($57<<24>>24)==(0);
  $65 = (($zeroCount$538) + 1)|0;
  $zeroCount$6 = $64 ? $65 : 0;
  $66 = (($readPtr$2) + 1|0);
  $67 = (($writePtr$0$ph) + 1|0);
  HEAP8[$writePtr$0$ph>>0] = $57;
  $i$0$ph = $54;$readPtr$2$ph = $66;$writePtr$0$ph = $67;$zeroCount$5$ph = $zeroCount$6;
 }
 if ((label|0) == 31) {
  $68 = $readPtr$2;
  $69 = $writePtr$0$ph;
  $70 = HEAP32[$47>>2]|0;
  $71 = (($69) - ($68))|0;
  $72 = (($71) + ($70))|0;
  HEAP32[$47>>2] = $72;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 32) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _h264bsdDecodeSeqParamSet($pStrmData,$pSeqParamSet) {
 $pStrmData = $pStrmData|0;
 $pSeqParamSet = $pSeqParamSet|0;
 var $$ = 0, $$0 = 0, $$4 = 0, $$neg5 = 0, $$neg7 = 0, $$pre = 0, $$pre11 = 0, $$pre12 = 0, $$pre14 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $i$09 = 0, $maxPicSizeInMbs$0$i = 0, $tmp$0$i = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $value = sp;
 _H264SwDecMemset($pSeqParamSet,0,92);
 $0 = (_h264bsdGetBits($pStrmData,8)|0);
 $1 = ($0|0)==(-1);
 L1: do {
  if ($1) {
   $$0 = 1;
  } else {
   HEAP32[$pSeqParamSet>>2] = $0;
   (_h264bsdGetBits($pStrmData,1)|0);
   (_h264bsdGetBits($pStrmData,1)|0);
   $2 = (_h264bsdGetBits($pStrmData,1)|0);
   $3 = ($2|0)==(-1);
   if ($3) {
    $$0 = 1;
   } else {
    $4 = (_h264bsdGetBits($pStrmData,5)|0);
    $5 = ($4|0)==(-1);
    if ($5) {
     $$0 = 1;
    } else {
     $6 = (_h264bsdGetBits($pStrmData,8)|0);
     $7 = ($6|0)==(-1);
     if ($7) {
      $$0 = 1;
     } else {
      $8 = (($pSeqParamSet) + 4|0);
      HEAP32[$8>>2] = $6;
      $9 = (($pSeqParamSet) + 8|0);
      $10 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$9)|0);
      $11 = ($10|0)==(0);
      if ($11) {
       $12 = HEAP32[$9>>2]|0;
       $13 = ($12>>>0)>(31);
       if ($13) {
        $$0 = 1;
       } else {
        $14 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
        $15 = ($14|0)==(0);
        if ($15) {
         $16 = HEAP32[$value>>2]|0;
         $17 = ($16>>>0)>(12);
         if ($17) {
          $$0 = 1;
         } else {
          $18 = (($16) + 4)|0;
          $19 = 1 << $18;
          $20 = (($pSeqParamSet) + 12|0);
          HEAP32[$20>>2] = $19;
          $21 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
          $22 = ($21|0)==(0);
          if ($22) {
           $23 = HEAP32[$value>>2]|0;
           $24 = ($23>>>0)>(2);
           if ($24) {
            $$0 = 1;
           } else {
            $25 = (($pSeqParamSet) + 16|0);
            HEAP32[$25>>2] = $23;
            L12: do {
             if ((($23|0) == 1)) {
              $33 = (_h264bsdGetBits($pStrmData,1)|0);
              $34 = ($33|0)==(-1);
              if ($34) {
               $$0 = 1;
               break L1;
              }
              $35 = ($33|0)==(1);
              $36 = $35&1;
              $37 = (($pSeqParamSet) + 24|0);
              HEAP32[$37>>2] = $36;
              $38 = (($pSeqParamSet) + 28|0);
              $39 = (_h264bsdDecodeExpGolombSigned($pStrmData,$38)|0);
              $40 = ($39|0)==(0);
              if (!($40)) {
               $$0 = $39;
               break L1;
              }
              $41 = (($pSeqParamSet) + 32|0);
              $42 = (_h264bsdDecodeExpGolombSigned($pStrmData,$41)|0);
              $43 = ($42|0)==(0);
              if (!($43)) {
               $$0 = $42;
               break L1;
              }
              $44 = (($pSeqParamSet) + 36|0);
              $45 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$44)|0);
              $46 = ($45|0)==(0);
              if (!($46)) {
               $$0 = $45;
               break L1;
              }
              $47 = HEAP32[$44>>2]|0;
              $48 = ($47>>>0)>(255);
              if ($48) {
               $$0 = 1;
               break L1;
              }
              $49 = ($47|0)==(0);
              if ($49) {
               $63 = (($pSeqParamSet) + 40|0);
               HEAP32[$63>>2] = 0;
               break;
              }
              $50 = $47 << 2;
              $51 = (_H264SwDecMalloc($50)|0);
              $52 = (($pSeqParamSet) + 40|0);
              HEAP32[$52>>2] = $51;
              $53 = ($51|0)==(0|0);
              if ($53) {
               $$0 = 65535;
               break L1;
              }
              $54 = HEAP32[$44>>2]|0;
              $55 = ($54|0)==(0);
              if (!($55)) {
               $60 = $51;$i$09 = 0;
               while(1) {
                $59 = (($60) + ($i$09<<2)|0);
                $61 = (_h264bsdDecodeExpGolombSigned($pStrmData,$59)|0);
                $62 = ($61|0)==(0);
                $57 = (($i$09) + 1)|0;
                if (!($62)) {
                 $$0 = $61;
                 break L1;
                }
                $56 = HEAP32[$44>>2]|0;
                $58 = ($57>>>0)<($56>>>0);
                if (!($58)) {
                 break L12;
                }
                $$pre14 = HEAP32[$52>>2]|0;
                $60 = $$pre14;$i$09 = $57;
               }
              }
             } else if ((($23|0) == 0)) {
              $26 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
              $27 = ($26|0)==(0);
              if (!($27)) {
               $$0 = $26;
               break L1;
              }
              $28 = HEAP32[$value>>2]|0;
              $29 = ($28>>>0)>(12);
              if ($29) {
               $$0 = 1;
               break L1;
              }
              $30 = (($28) + 4)|0;
              $31 = 1 << $30;
              $32 = (($pSeqParamSet) + 20|0);
              HEAP32[$32>>2] = $31;
             }
            } while(0);
            $64 = (($pSeqParamSet) + 44|0);
            $65 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$64)|0);
            $66 = ($65|0)==(0);
            if ($66) {
             $67 = HEAP32[$64>>2]|0;
             $68 = ($67>>>0)>(16);
             if ($68) {
              $$0 = 1;
             } else {
              $69 = (_h264bsdGetBits($pStrmData,1)|0);
              $70 = ($69|0)==(-1);
              if ($70) {
               $$0 = 1;
              } else {
               $71 = ($69|0)==(1);
               $72 = $71&1;
               $73 = (($pSeqParamSet) + 48|0);
               HEAP32[$73>>2] = $72;
               $74 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
               $75 = ($74|0)==(0);
               if ($75) {
                $76 = HEAP32[$value>>2]|0;
                $77 = (($76) + 1)|0;
                $78 = (($pSeqParamSet) + 52|0);
                HEAP32[$78>>2] = $77;
                $79 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
                $80 = ($79|0)==(0);
                if ($80) {
                 $81 = HEAP32[$value>>2]|0;
                 $82 = (($81) + 1)|0;
                 $83 = (($pSeqParamSet) + 56|0);
                 HEAP32[$83>>2] = $82;
                 $84 = (_h264bsdGetBits($pStrmData,1)|0);
                 if ((($84|0) == 0) | (($84|0) == -1)) {
                  $$0 = 1;
                 } else {
                  $85 = (_h264bsdGetBits($pStrmData,1)|0);
                  $86 = ($85|0)==(-1);
                  if ($86) {
                   $$0 = 1;
                  } else {
                   $87 = (_h264bsdGetBits($pStrmData,1)|0);
                   $88 = ($87|0)==(-1);
                   if ($88) {
                    $$0 = 1;
                   } else {
                    $89 = ($87|0)==(1);
                    $90 = $89&1;
                    $91 = (($pSeqParamSet) + 60|0);
                    HEAP32[$91>>2] = $90;
                    if ($89) {
                     $92 = (($pSeqParamSet) + 64|0);
                     $93 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$92)|0);
                     $94 = ($93|0)==(0);
                     if (!($94)) {
                      $$0 = $93;
                      break;
                     }
                     $95 = (($pSeqParamSet) + 68|0);
                     $96 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$95)|0);
                     $97 = ($96|0)==(0);
                     if (!($97)) {
                      $$0 = $96;
                      break;
                     }
                     $98 = (($pSeqParamSet) + 72|0);
                     $99 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$98)|0);
                     $100 = ($99|0)==(0);
                     if (!($100)) {
                      $$0 = $99;
                      break;
                     }
                     $101 = (($pSeqParamSet) + 76|0);
                     $102 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$101)|0);
                     $103 = ($102|0)==(0);
                     if (!($103)) {
                      $$0 = $102;
                      break;
                     }
                     $104 = HEAP32[$92>>2]|0;
                     $105 = HEAP32[$78>>2]|0;
                     $106 = $105 << 3;
                     $107 = HEAP32[$95>>2]|0;
                     $$neg5 = $107 ^ -1;
                     $108 = (($106) + ($$neg5))|0;
                     $109 = ($104|0)>($108|0);
                     if ($109) {
                      $$0 = 1;
                      break;
                     }
                     $110 = HEAP32[$98>>2]|0;
                     $111 = HEAP32[$83>>2]|0;
                     $112 = $111 << 3;
                     $113 = HEAP32[$101>>2]|0;
                     $$neg7 = $113 ^ -1;
                     $114 = (($112) + ($$neg7))|0;
                     $115 = ($110|0)>($114|0);
                     if ($115) {
                      $$0 = 1;
                      break;
                     } else {
                      $117 = $105;$118 = $111;
                     }
                    } else {
                     $$pre = HEAP32[$78>>2]|0;
                     $$pre11 = HEAP32[$83>>2]|0;
                     $117 = $$pre;$118 = $$pre11;
                    }
                    $116 = Math_imul($118, $117)|0;
                    $119 = HEAP32[$8>>2]|0;
                    do {
                     switch ($119|0) {
                     case 21:  {
                      $maxPicSizeInMbs$0$i = 792;$tmp$0$i = 1824768;
                      label = 58;
                      break;
                     }
                     case 22:  {
                      $maxPicSizeInMbs$0$i = 1620;$tmp$0$i = 3110400;
                      label = 58;
                      break;
                     }
                     case 30:  {
                      $maxPicSizeInMbs$0$i = 1620;$tmp$0$i = 3110400;
                      label = 58;
                      break;
                     }
                     case 31:  {
                      $maxPicSizeInMbs$0$i = 3600;$tmp$0$i = 6912000;
                      label = 58;
                      break;
                     }
                     case 32:  {
                      $maxPicSizeInMbs$0$i = 5120;$tmp$0$i = 7864320;
                      label = 58;
                      break;
                     }
                     case 40:  {
                      $maxPicSizeInMbs$0$i = 8192;$tmp$0$i = 12582912;
                      label = 58;
                      break;
                     }
                     case 41:  {
                      $maxPicSizeInMbs$0$i = 8192;$tmp$0$i = 12582912;
                      label = 58;
                      break;
                     }
                     case 42:  {
                      $maxPicSizeInMbs$0$i = 8704;$tmp$0$i = 13369344;
                      label = 58;
                      break;
                     }
                     case 50:  {
                      $maxPicSizeInMbs$0$i = 22080;$tmp$0$i = 42393600;
                      label = 58;
                      break;
                     }
                     case 51:  {
                      $maxPicSizeInMbs$0$i = 36864;$tmp$0$i = 70778880;
                      label = 58;
                      break;
                     }
                     case 10:  {
                      $maxPicSizeInMbs$0$i = 99;$tmp$0$i = 152064;
                      label = 58;
                      break;
                     }
                     case 11:  {
                      $maxPicSizeInMbs$0$i = 396;$tmp$0$i = 345600;
                      label = 58;
                      break;
                     }
                     case 12:  {
                      $maxPicSizeInMbs$0$i = 396;$tmp$0$i = 912384;
                      label = 58;
                      break;
                     }
                     case 13:  {
                      $maxPicSizeInMbs$0$i = 396;$tmp$0$i = 912384;
                      label = 58;
                      break;
                     }
                     case 20:  {
                      $maxPicSizeInMbs$0$i = 396;$tmp$0$i = 912384;
                      label = 58;
                      break;
                     }
                     default: {
                      label = 60;
                     }
                     }
                    } while(0);
                    do {
                     if ((label|0) == 58) {
                      $120 = ($maxPicSizeInMbs$0$i>>>0)<($116>>>0);
                      if ($120) {
                       label = 60;
                       break;
                      }
                      $121 = ($116*384)|0;
                      $122 = (($tmp$0$i>>>0) / ($121>>>0))&-1;
                      $123 = ($122>>>0)<(16);
                      $$4 = $123 ? $122 : 16;
                      HEAP32[$value>>2] = $$4;
                      $124 = HEAP32[$64>>2]|0;
                      $125 = ($124>>>0)>($$4>>>0);
                      if ($125) {
                       $126 = $124;
                       label = 61;
                      } else {
                       $128 = $$4;
                      }
                     }
                    } while(0);
                    if ((label|0) == 60) {
                     HEAP32[$value>>2] = 2147483647;
                     $$pre12 = HEAP32[$64>>2]|0;
                     $126 = $$pre12;
                     label = 61;
                    }
                    if ((label|0) == 61) {
                     HEAP32[$value>>2] = $126;
                     $128 = $126;
                    }
                    $127 = (($pSeqParamSet) + 88|0);
                    HEAP32[$127>>2] = $128;
                    $129 = (_h264bsdGetBits($pStrmData,1)|0);
                    $130 = ($129|0)==(-1);
                    if ($130) {
                     $$0 = 1;
                     break;
                    }
                    $131 = ($129|0)==(1);
                    $132 = $131&1;
                    $133 = (($pSeqParamSet) + 80|0);
                    HEAP32[$133>>2] = $132;
                    do {
                     if ($131) {
                      $134 = (_H264SwDecMalloc(952)|0);
                      $135 = (($pSeqParamSet) + 84|0);
                      HEAP32[$135>>2] = $134;
                      $136 = ($134|0)==(0|0);
                      if ($136) {
                       $$0 = 65535;
                       break L1;
                      }
                      $137 = (_h264bsdDecodeVuiParameters($pStrmData,$134)|0);
                      $138 = ($137|0)==(0);
                      if (!($138)) {
                       $$0 = $137;
                       break L1;
                      }
                      $139 = HEAP32[$135>>2]|0;
                      $140 = (($139) + 920|0);
                      $141 = HEAP32[$140>>2]|0;
                      $142 = ($141|0)==(0);
                      if ($142) {
                       break;
                      }
                      $143 = (($139) + 944|0);
                      $144 = HEAP32[$143>>2]|0;
                      $145 = (($139) + 948|0);
                      $146 = HEAP32[$145>>2]|0;
                      $147 = ($144>>>0)>($146>>>0);
                      if ($147) {
                       $$0 = 1;
                       break L1;
                      }
                      $148 = HEAP32[$64>>2]|0;
                      $149 = ($146>>>0)<($148>>>0);
                      if ($149) {
                       $$0 = 1;
                       break L1;
                      }
                      $150 = HEAP32[$127>>2]|0;
                      $151 = ($146>>>0)>($150>>>0);
                      if ($151) {
                       $$0 = 1;
                       break L1;
                      }
                      $152 = ($146|0)==(0);
                      $$ = $152 ? 1 : $146;
                      HEAP32[$127>>2] = $$;
                     }
                    } while(0);
                    (_h264bsdRbspTrailingBits($pStrmData)|0);
                    $$0 = 0;
                   }
                  }
                 }
                } else {
                 $$0 = $79;
                }
               } else {
                $$0 = $74;
               }
              }
             }
            } else {
             $$0 = $65;
            }
           }
          } else {
           $$0 = $21;
          }
         }
        } else {
         $$0 = $14;
        }
       }
      } else {
       $$0 = $10;
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCompareSeqParamSets($pSps1,$pSps2) {
 $pSps1 = $pSps1|0;
 $pSps2 = $pSps2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pSps1>>2]|0;
 $1 = HEAP32[$pSps2>>2]|0;
 $2 = ($0|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = (($pSps1) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($pSps2) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4|0)==($6|0);
   if ($7) {
    $8 = (($pSps1) + 12|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($pSps2) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($9|0)==($11|0);
    if ($12) {
     $13 = (($pSps1) + 16|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($pSps2) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = (($pSps1) + 44|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (($pSps2) + 44|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = ($19|0)==($21|0);
      if ($22) {
       $23 = (($pSps1) + 48|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = (($pSps2) + 48|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($24|0)==($26|0);
       if ($27) {
        $28 = (($pSps1) + 52|0);
        $29 = HEAP32[$28>>2]|0;
        $30 = (($pSps2) + 52|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = ($29|0)==($31|0);
        if ($32) {
         $33 = (($pSps1) + 56|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = (($pSps2) + 56|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34|0)==($36|0);
         if ($37) {
          $38 = (($pSps1) + 60|0);
          $39 = HEAP32[$38>>2]|0;
          $40 = (($pSps2) + 60|0);
          $41 = HEAP32[$40>>2]|0;
          $42 = ($39|0)==($41|0);
          if ($42) {
           $43 = (($pSps1) + 80|0);
           $44 = HEAP32[$43>>2]|0;
           $45 = (($pSps2) + 80|0);
           $46 = HEAP32[$45>>2]|0;
           $47 = ($44|0)==($46|0);
           if ($47) {
            if ((($14|0) == 1)) {
             $53 = (($pSps1) + 24|0);
             $54 = HEAP32[$53>>2]|0;
             $55 = (($pSps2) + 24|0);
             $56 = HEAP32[$55>>2]|0;
             $57 = ($54|0)==($56|0);
             if (!($57)) {
              $$0 = 1;
              break;
             }
             $58 = (($pSps1) + 28|0);
             $59 = HEAP32[$58>>2]|0;
             $60 = (($pSps2) + 28|0);
             $61 = HEAP32[$60>>2]|0;
             $62 = ($59|0)==($61|0);
             if (!($62)) {
              $$0 = 1;
              break;
             }
             $63 = (($pSps1) + 32|0);
             $64 = HEAP32[$63>>2]|0;
             $65 = (($pSps2) + 32|0);
             $66 = HEAP32[$65>>2]|0;
             $67 = ($64|0)==($66|0);
             if (!($67)) {
              $$0 = 1;
              break;
             }
             $68 = (($pSps1) + 36|0);
             $69 = HEAP32[$68>>2]|0;
             $70 = (($pSps2) + 36|0);
             $71 = HEAP32[$70>>2]|0;
             $72 = ($69|0)==($71|0);
             if (!($72)) {
              $$0 = 1;
              break;
             }
             $73 = ($69|0)==(0);
             if (!($73)) {
              $74 = (($pSps1) + 40|0);
              $75 = HEAP32[$74>>2]|0;
              $76 = (($pSps2) + 40|0);
              $77 = HEAP32[$76>>2]|0;
              $i$02 = 0;
              while(1) {
               $80 = (($75) + ($i$02<<2)|0);
               $81 = HEAP32[$80>>2]|0;
               $82 = (($77) + ($i$02<<2)|0);
               $83 = HEAP32[$82>>2]|0;
               $84 = ($81|0)==($83|0);
               $78 = (($i$02) + 1)|0;
               if (!($84)) {
                $$0 = 1;
                break L1;
               }
               $79 = ($78>>>0)<($69>>>0);
               if ($79) {
                $i$02 = $78;
               } else {
                break;
               }
              }
             }
            } else if ((($14|0) == 0)) {
             $48 = (($pSps1) + 20|0);
             $49 = HEAP32[$48>>2]|0;
             $50 = (($pSps2) + 20|0);
             $51 = HEAP32[$50>>2]|0;
             $52 = ($49|0)==($51|0);
             if (!($52)) {
              $$0 = 1;
              break;
             }
            }
            $85 = ($39|0)==(0);
            if (!($85)) {
             $86 = (($pSps1) + 64|0);
             $87 = HEAP32[$86>>2]|0;
             $88 = (($pSps2) + 64|0);
             $89 = HEAP32[$88>>2]|0;
             $90 = ($87|0)==($89|0);
             if (!($90)) {
              $$0 = 1;
              break;
             }
             $91 = (($pSps1) + 68|0);
             $92 = HEAP32[$91>>2]|0;
             $93 = (($pSps2) + 68|0);
             $94 = HEAP32[$93>>2]|0;
             $95 = ($92|0)==($94|0);
             if (!($95)) {
              $$0 = 1;
              break;
             }
             $96 = (($pSps1) + 72|0);
             $97 = HEAP32[$96>>2]|0;
             $98 = (($pSps2) + 72|0);
             $99 = HEAP32[$98>>2]|0;
             $100 = ($97|0)==($99|0);
             if (!($100)) {
              $$0 = 1;
              break;
             }
             $101 = (($pSps1) + 76|0);
             $102 = HEAP32[$101>>2]|0;
             $103 = (($pSps2) + 76|0);
             $104 = HEAP32[$103>>2]|0;
             $105 = ($102|0)==($104|0);
             if (!($105)) {
              $$0 = 1;
              break;
             }
            }
            $$0 = 0;
           } else {
            $$0 = 1;
           }
          } else {
           $$0 = 1;
          }
         } else {
          $$0 = 1;
         }
        } else {
         $$0 = 1;
        }
       } else {
        $$0 = 1;
       }
      } else {
       $$0 = 1;
      }
     } else {
      $$0 = 1;
     }
    } else {
     $$0 = 1;
    }
   } else {
    $$0 = 1;
   }
  } else {
   $$0 = 1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDecodePicParamSet($pStrmData,$pPicParamSet) {
 $pStrmData = $pStrmData|0;
 $pPicParamSet = $pPicParamSet|0;
 var $$0 = 0, $$off = 0, $$off6 = 0, $$off7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$09 = 0, $i$113 = 0, $i$217 = 0, $itmp = 0, $or$cond = 0, $value = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $value = sp + 4|0;
 $itmp = sp;
 _H264SwDecMemset($pPicParamSet,0,72);
 $0 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$pPicParamSet)|0);
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $2 = HEAP32[$pPicParamSet>>2]|0;
   $3 = ($2>>>0)>(255);
   if ($3) {
    $$0 = 1;
   } else {
    $4 = (($pPicParamSet) + 4|0);
    $5 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$4)|0);
    $6 = ($5|0)==(0);
    if ($6) {
     $7 = HEAP32[$4>>2]|0;
     $8 = ($7>>>0)>(31);
     if ($8) {
      $$0 = 1;
     } else {
      $9 = (_h264bsdGetBits($pStrmData,1)|0);
      $10 = ($9|0)==(0);
      if ($10) {
       $11 = (_h264bsdGetBits($pStrmData,1)|0);
       $12 = ($11|0)==(-1);
       if ($12) {
        $$0 = 1;
       } else {
        $13 = ($11|0)==(1);
        $14 = $13&1;
        $15 = (($pPicParamSet) + 8|0);
        HEAP32[$15>>2] = $14;
        $16 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
        $17 = ($16|0)==(0);
        if ($17) {
         $18 = HEAP32[$value>>2]|0;
         $19 = (($18) + 1)|0;
         $20 = (($pPicParamSet) + 12|0);
         HEAP32[$20>>2] = $19;
         $21 = ($19>>>0)>(8);
         if ($21) {
          $$0 = 1;
         } else {
          $22 = ($19>>>0)>(1);
          L10: do {
           if ($22) {
            $23 = (($pPicParamSet) + 16|0);
            $24 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$23)|0);
            $25 = ($24|0)==(0);
            if (!($25)) {
             $$0 = $24;
             break L1;
            }
            $26 = HEAP32[$23>>2]|0;
            $27 = ($26>>>0)>(6);
            if ($27) {
             $$0 = 1;
             break L1;
            }
            switch ($26|0) {
            case 0:  {
             $28 = HEAP32[$20>>2]|0;
             $29 = $28 << 2;
             $30 = (_H264SwDecMalloc($29)|0);
             $31 = (($pPicParamSet) + 20|0);
             HEAP32[$31>>2] = $30;
             $32 = ($30|0)==(0|0);
             if ($32) {
              $$0 = 65535;
              break L1;
             }
             $33 = HEAP32[$20>>2]|0;
             $34 = ($33|0)==(0);
             if ($34) {
              break L10;
             } else {
              $i$09 = 0;
             }
             while(1) {
              $35 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
              $36 = ($35|0)==(0);
              if (!($36)) {
               $$0 = $35;
               break L1;
              }
              $37 = HEAP32[$value>>2]|0;
              $38 = (($37) + 1)|0;
              $39 = HEAP32[$31>>2]|0;
              $40 = (($39) + ($i$09<<2)|0);
              HEAP32[$40>>2] = $38;
              $41 = (($i$09) + 1)|0;
              $42 = HEAP32[$20>>2]|0;
              $43 = ($41>>>0)<($42>>>0);
              if ($43) {
               $i$09 = $41;
              } else {
               break;
              }
             }
             break;
            }
            case 6:  {
             $83 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
             $84 = ($83|0)==(0);
             if (!($84)) {
              $$0 = $83;
              break L1;
             }
             $85 = HEAP32[$value>>2]|0;
             $86 = (($85) + 1)|0;
             $87 = (($pPicParamSet) + 40|0);
             HEAP32[$87>>2] = $86;
             $88 = $86 << 2;
             $89 = (_H264SwDecMalloc($88)|0);
             $90 = (($pPicParamSet) + 44|0);
             HEAP32[$90>>2] = $89;
             $91 = ($89|0)==(0|0);
             if ($91) {
              $$0 = 65535;
              break L1;
             }
             $92 = HEAP32[$20>>2]|0;
             $93 = (($92) + -1)|0;
             $94 = (432 + ($93<<2)|0);
             $95 = HEAP32[$94>>2]|0;
             $96 = HEAP32[$87>>2]|0;
             $97 = ($96|0)==(0);
             if ($97) {
              break L10;
             } else {
              $i$217 = 0;
             }
             while(1) {
              $101 = (_h264bsdGetBits($pStrmData,$95)|0);
              $102 = HEAP32[$90>>2]|0;
              $103 = (($102) + ($i$217<<2)|0);
              HEAP32[$103>>2] = $101;
              $104 = HEAP32[$20>>2]|0;
              $105 = ($101>>>0)<($104>>>0);
              $99 = (($i$217) + 1)|0;
              if (!($105)) {
               $$0 = 1;
               break L1;
              }
              $98 = HEAP32[$87>>2]|0;
              $100 = ($99>>>0)<($98>>>0);
              if ($100) {
               $i$217 = $99;
              } else {
               break;
              }
             }
             break;
            }
            case 2:  {
             $44 = HEAP32[$20>>2]|0;
             $45 = $44 << 2;
             $46 = (($45) + -4)|0;
             $47 = (_H264SwDecMalloc($46)|0);
             $48 = (($pPicParamSet) + 24|0);
             HEAP32[$48>>2] = $47;
             $49 = HEAP32[$20>>2]|0;
             $50 = $49 << 2;
             $51 = (($50) + -4)|0;
             $52 = (_H264SwDecMalloc($51)|0);
             $53 = (($pPicParamSet) + 28|0);
             HEAP32[$53>>2] = $52;
             $54 = HEAP32[$48>>2]|0;
             $55 = ($54|0)==(0|0);
             $56 = ($52|0)==(0|0);
             $or$cond = $55 | $56;
             if ($or$cond) {
              $$0 = 65535;
              break L1;
             }
             $57 = HEAP32[$20>>2]|0;
             $58 = ($57|0)==(1);
             if ($58) {
              break L10;
             } else {
              $i$113 = 0;
             }
             while(1) {
              $59 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
              $60 = ($59|0)==(0);
              if (!($60)) {
               $$0 = $59;
               break L1;
              }
              $61 = HEAP32[$value>>2]|0;
              $62 = HEAP32[$48>>2]|0;
              $63 = (($62) + ($i$113<<2)|0);
              HEAP32[$63>>2] = $61;
              $64 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
              $65 = ($64|0)==(0);
              if (!($65)) {
               $$0 = $64;
               break L1;
              }
              $66 = HEAP32[$value>>2]|0;
              $67 = HEAP32[$53>>2]|0;
              $68 = (($67) + ($i$113<<2)|0);
              HEAP32[$68>>2] = $66;
              $69 = (($i$113) + 1)|0;
              $70 = HEAP32[$20>>2]|0;
              $71 = (($70) + -1)|0;
              $72 = ($69>>>0)<($71>>>0);
              if ($72) {
               $i$113 = $69;
              } else {
               break;
              }
             }
             break;
            }
            case 5: case 4: case 3:  {
             $73 = (_h264bsdGetBits($pStrmData,1)|0);
             $74 = ($73|0)==(-1);
             if ($74) {
              $$0 = 1;
              break L1;
             }
             $75 = ($73|0)==(1);
             $76 = $75&1;
             $77 = (($pPicParamSet) + 32|0);
             HEAP32[$77>>2] = $76;
             $78 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
             $79 = ($78|0)==(0);
             if (!($79)) {
              $$0 = $78;
              break L1;
             }
             $80 = HEAP32[$value>>2]|0;
             $81 = (($80) + 1)|0;
             $82 = (($pPicParamSet) + 36|0);
             HEAP32[$82>>2] = $81;
             break L10;
             break;
            }
            default: {
             break L10;
            }
            }
           }
          } while(0);
          $106 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
          $107 = ($106|0)==(0);
          if ($107) {
           $108 = HEAP32[$value>>2]|0;
           $109 = ($108>>>0)>(31);
           if ($109) {
            $$0 = 1;
           } else {
            $110 = (($108) + 1)|0;
            $111 = (($pPicParamSet) + 48|0);
            HEAP32[$111>>2] = $110;
            $112 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
            $113 = ($112|0)==(0);
            if ($113) {
             $114 = HEAP32[$value>>2]|0;
             $115 = ($114>>>0)>(31);
             if ($115) {
              $$0 = 1;
             } else {
              $116 = (_h264bsdGetBits($pStrmData,1)|0);
              $117 = ($116|0)==(0);
              if ($117) {
               $118 = (_h264bsdGetBits($pStrmData,2)|0);
               $119 = ($118>>>0)>(2);
               if ($119) {
                $$0 = 1;
               } else {
                $120 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
                $121 = ($120|0)==(0);
                if ($121) {
                 $122 = HEAP32[$itmp>>2]|0;
                 $$off = (($122) + 26)|0;
                 $123 = ($$off>>>0)>(51);
                 if ($123) {
                  $$0 = 1;
                 } else {
                  $124 = (($pPicParamSet) + 52|0);
                  HEAP32[$124>>2] = $$off;
                  $125 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
                  $126 = ($125|0)==(0);
                  if ($126) {
                   $127 = HEAP32[$itmp>>2]|0;
                   $$off6 = (($127) + 26)|0;
                   $128 = ($$off6>>>0)>(51);
                   if ($128) {
                    $$0 = 1;
                   } else {
                    $129 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
                    $130 = ($129|0)==(0);
                    if (!($130)) {
                     $$0 = $129;
                     break;
                    }
                    $131 = HEAP32[$itmp>>2]|0;
                    $$off7 = (($131) + 12)|0;
                    $132 = ($$off7>>>0)>(24);
                    if ($132) {
                     $$0 = 1;
                     break;
                    }
                    $133 = (($pPicParamSet) + 56|0);
                    HEAP32[$133>>2] = $131;
                    $134 = (_h264bsdGetBits($pStrmData,1)|0);
                    $135 = ($134|0)==(-1);
                    if ($135) {
                     $$0 = 1;
                     break;
                    }
                    $136 = ($134|0)==(1);
                    $137 = $136&1;
                    $138 = (($pPicParamSet) + 60|0);
                    HEAP32[$138>>2] = $137;
                    $139 = (_h264bsdGetBits($pStrmData,1)|0);
                    $140 = ($139|0)==(-1);
                    if ($140) {
                     $$0 = 1;
                     break;
                    }
                    $141 = ($139|0)==(1);
                    $142 = $141&1;
                    $143 = (($pPicParamSet) + 64|0);
                    HEAP32[$143>>2] = $142;
                    $144 = (_h264bsdGetBits($pStrmData,1)|0);
                    $145 = ($144|0)==(-1);
                    if ($145) {
                     $$0 = 1;
                     break;
                    }
                    $146 = ($144|0)==(1);
                    $147 = $146&1;
                    $148 = (($pPicParamSet) + 68|0);
                    HEAP32[$148>>2] = $147;
                    (_h264bsdRbspTrailingBits($pStrmData)|0);
                    $$0 = 0;
                   }
                  } else {
                   $$0 = $125;
                  }
                 }
                } else {
                 $$0 = $120;
                }
               }
              } else {
               $$0 = 1;
              }
             }
            } else {
             $$0 = $112;
            }
           }
          } else {
           $$0 = $106;
          }
         }
        } else {
         $$0 = $16;
        }
       }
      } else {
       $$0 = 1;
      }
     }
    } else {
     $$0 = $5;
    }
   }
  } else {
   $$0 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDecodeSliceHeader($pStrmData,$pSliceHeader,$pSeqParamSet,$pPicParamSet,$pNalUnit) {
 $pStrmData = $pStrmData|0;
 $pSliceHeader = $pSliceHeader|0;
 $pSeqParamSet = $pSeqParamSet|0;
 $pPicParamSet = $pPicParamSet|0;
 $pNalUnit = $pNalUnit|0;
 var $$ = 0, $$0 = 0, $$9 = 0, $$in = 0, $$num5$0$i = 0, $$num6$0$i = 0, $$off = 0, $$off17 = 0, $$off8 = 0, $$op = 0, $$pr = 0, $$pr$i = 0, $$pr12$i = 0, $$pr16 = 0, $$pre$i = 0, $$pre13$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $command$i = 0, $i$0 = 0, $i$0$i = 0, $i$0$i13 = 0, $i$1 = 0, $itmp = 0, $num1to3$0$i = 0, $num1to3$1$i = 0, $num4$0$i = 0, $num4$1$i = 0;
 var $num5$0$i = 0, $num6$0$i = 0, $numBits$0$$i = 0, $numBits$0$i = 0, $operation$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond11$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond9$i = 0, $tmp$0$i = 0, $tmp$0$v$i = 0, $value = 0, $value$i = 0, $value$i11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $value$i11 = sp + 20|0;
 $operation$i = sp + 16|0;
 $value$i = sp + 12|0;
 $command$i = sp + 8|0;
 $value = sp + 4|0;
 $itmp = sp;
 _H264SwDecMemset($pSliceHeader,0,988);
 $0 = (($pSeqParamSet) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pSeqParamSet) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $1)|0;
 $5 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$value>>2]|0;
 HEAP32[$pSliceHeader>>2] = $7;
 $8 = ($7>>>0)<($4>>>0);
 if (!($8)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = HEAP32[$value>>2]|0;
 $12 = (($pSliceHeader) + 4|0);
 HEAP32[$12>>2] = $11;
 if ((($11|0) == 5) | (($11|0) == 0)) {
  label = 5;
 } else if (!((($11|0) == 7) | (($11|0) == 2))) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((label|0) == 5) {
  $13 = HEAP32[$pNalUnit>>2]|0;
  $14 = ($13|0)==(5);
  if ($14) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $15 = (($pSeqParamSet) + 44|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0);
  if ($17) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $18 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
 $19 = ($18|0)==(0);
 if (!($19)) {
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = HEAP32[$value>>2]|0;
 $21 = (($pSliceHeader) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = HEAP32[$pPicParamSet>>2]|0;
 $23 = ($20|0)==($22|0);
 if (!($23)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = (($pSeqParamSet) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $i$0 = 0;
 while(1) {
  $26 = $25 >>> $i$0;
  $27 = ($26|0)==(0);
  $28 = (($i$0) + 1)|0;
  if ($27) {
   break;
  } else {
   $i$0 = $28;
  }
 }
 $29 = (($i$0) + -1)|0;
 $30 = (_h264bsdGetBits($pStrmData,$29)|0);
 $31 = ($30|0)==(-1);
 if ($31) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = HEAP32[$pNalUnit>>2]|0;
 $33 = ($32|0)==(5);
 $34 = ($30|0)!=(0);
 $or$cond = $33 & $34;
 if ($or$cond) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = (($pSliceHeader) + 12|0);
 HEAP32[$35>>2] = $30;
 if ($33) {
  $36 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0 = $36;
   STACKTOP = sp;return ($$0|0);
  }
  $38 = HEAP32[$value>>2]|0;
  $39 = (($pSliceHeader) + 16|0);
  HEAP32[$39>>2] = $38;
  $40 = ($38>>>0)>(65535);
  if ($40) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $41 = (($pSeqParamSet) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0);
 if ($43) {
  $44 = (($pSeqParamSet) + 20|0);
  $45 = HEAP32[$44>>2]|0;
  $i$1 = 0;
  while(1) {
   $46 = $45 >>> $i$1;
   $47 = ($46|0)==(0);
   $48 = (($i$1) + 1)|0;
   if ($47) {
    break;
   } else {
    $i$1 = $48;
   }
  }
  $49 = (($i$1) + -1)|0;
  $50 = (_h264bsdGetBits($pStrmData,$49)|0);
  $51 = ($50|0)==(-1);
  if ($51) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $52 = (($pSliceHeader) + 20|0);
  HEAP32[$52>>2] = $50;
  $53 = (($pPicParamSet) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(0);
  do {
   if (!($55)) {
    $56 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
    $57 = ($56|0)==(0);
    if ($57) {
     $58 = HEAP32[$itmp>>2]|0;
     $59 = (($pSliceHeader) + 24|0);
     HEAP32[$59>>2] = $58;
     break;
    } else {
     $$0 = $56;
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $60 = HEAP32[$pNalUnit>>2]|0;
  $61 = ($60|0)==(5);
  if ($61) {
   $62 = HEAP32[$52>>2]|0;
   $63 = HEAP32[$44>>2]|0;
   $64 = $63 >>> 1;
   $65 = ($62>>>0)>($64>>>0);
   if ($65) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $66 = (($pSliceHeader) + 24|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)>(0);
   $$op = (0 - ($67))|0;
   $$ = $68 ? 0 : $$op;
   $69 = ($62|0)==($$|0);
   if (!($69)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $$pr = HEAP32[$41>>2]|0;
  $70 = $$pr;
 } else {
  $70 = $42;
 }
 $71 = ($70|0)==(1);
 if ($71) {
  $72 = (($pSeqParamSet) + 24|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)==(0);
  if ($74) {
   $75 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
   $76 = ($75|0)==(0);
   if (!($76)) {
    $$0 = $75;
    STACKTOP = sp;return ($$0|0);
   }
   $77 = HEAP32[$itmp>>2]|0;
   $78 = (($pSliceHeader) + 28|0);
   HEAP32[$78>>2] = $77;
   $79 = (($pPicParamSet) + 8|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ($80|0)==(0);
   do {
    if (!($81)) {
     $82 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
     $83 = ($82|0)==(0);
     if ($83) {
      $84 = HEAP32[$itmp>>2]|0;
      $85 = (($pSliceHeader) + 32|0);
      HEAP32[$85>>2] = $84;
      break;
     } else {
      $$0 = $82;
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   $86 = HEAP32[$pNalUnit>>2]|0;
   $87 = ($86|0)==(5);
   if ($87) {
    $88 = HEAP32[$78>>2]|0;
    $89 = (($pSeqParamSet) + 32|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + ($88))|0;
    $92 = (($pSliceHeader) + 32|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($91) + ($93))|0;
    $95 = ($88|0)<($94|0);
    $$9 = $95 ? $88 : $94;
    $96 = ($$9|0)==(0);
    if (!($96)) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 $97 = (($pPicParamSet) + 68|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)==(0);
 if (!($99)) {
  $100 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
  $101 = ($100|0)==(0);
  if (!($101)) {
   $$0 = $100;
   STACKTOP = sp;return ($$0|0);
  }
  $102 = HEAP32[$value>>2]|0;
  $103 = (($pSliceHeader) + 36|0);
  HEAP32[$103>>2] = $102;
  $104 = ($102>>>0)>(127);
  if ($104) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $105 = HEAP32[$12>>2]|0;
 if ((($105|0) == 5) | (($105|0) == 0)) {
  $106 = (_h264bsdGetBits($pStrmData,1)|0);
  $107 = ($106|0)==(-1);
  if ($107) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $108 = (($pSliceHeader) + 40|0);
  HEAP32[$108>>2] = $106;
  $109 = ($106|0)==(0);
  do {
   if ($109) {
    $116 = (($pPicParamSet) + 48|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117>>>0)>(16);
    if ($118) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $119 = (($pSliceHeader) + 44|0);
     HEAP32[$119>>2] = $117;
     break;
    }
   } else {
    $110 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
    $111 = ($110|0)==(0);
    if (!($111)) {
     $$0 = $110;
     STACKTOP = sp;return ($$0|0);
    }
    $112 = HEAP32[$value>>2]|0;
    $113 = ($112>>>0)>(15);
    if ($113) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $114 = (($112) + 1)|0;
     $115 = (($pSliceHeader) + 44|0);
     HEAP32[$115>>2] = $114;
     break;
    }
   }
  } while(0);
  $$pr16 = HEAP32[$12>>2]|0;
  $272 = $$pr16;
 } else {
  $272 = $105;
 }
 do {
  if ((($272|0) == 5) | (($272|0) == 0)) {
   $$in = (($pSliceHeader) + 44|0);
   $120 = HEAP32[$$in>>2]|0;
   $121 = HEAP32[$24>>2]|0;
   $122 = (_h264bsdGetBits($pStrmData,1)|0);
   $123 = ($122|0)==(-1);
   if ($123) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $124 = (($pSliceHeader) + 68|0);
   HEAP32[$124>>2] = $122;
   $125 = ($122|0)==(0);
   if (!($125)) {
    $i$0$i = 0;
    L109: while(1) {
     $126 = ($i$0$i>>>0)>($120>>>0);
     if ($126) {
      $$0 = 1;
      label = 110;
      break;
     }
     $127 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$command$i)|0);
     $128 = ($127|0)==(0);
     if (!($128)) {
      $$0 = $127;
      label = 110;
      break;
     }
     $129 = HEAP32[$command$i>>2]|0;
     $130 = ($129>>>0)>(3);
     if ($130) {
      $$0 = 1;
      label = 110;
      break;
     }
     $131 = ((($pSliceHeader) + (($i$0$i*12)|0)|0) + 72|0);
     HEAP32[$131>>2] = $129;
     $132 = ($129>>>0)<(2);
     do {
      if ($132) {
       $133 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i)|0);
       $134 = ($133|0)==(0);
       if (!($134)) {
        $$0 = $133;
        label = 110;
        break L109;
       }
       $135 = HEAP32[$value$i>>2]|0;
       $136 = ($135>>>0)<($121>>>0);
       if (!($136)) {
        $$0 = 1;
        label = 110;
        break L109;
       }
       $137 = (($135) + 1)|0;
       $138 = ((($pSliceHeader) + (($i$0$i*12)|0)|0) + 76|0);
       HEAP32[$138>>2] = $137;
      } else {
       $139 = ($129|0)==(2);
       if (!($139)) {
        break;
       }
       $140 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i)|0);
       $141 = ($140|0)==(0);
       if (!($141)) {
        $$0 = $140;
        label = 110;
        break L109;
       }
       $142 = HEAP32[$value$i>>2]|0;
       $143 = ((($pSliceHeader) + (($i$0$i*12)|0)|0) + 80|0);
       HEAP32[$143>>2] = $142;
      }
     } while(0);
     $144 = (($i$0$i) + 1)|0;
     $145 = HEAP32[$command$i>>2]|0;
     $146 = ($145|0)==(3);
     if ($146) {
      label = 61;
      break;
     } else {
      $i$0$i = $144;
     }
    }
    if ((label|0) == 61) {
     $147 = ($i$0$i|0)==(0);
     if ($147) {
      $$0 = 1;
     } else {
      break;
     }
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 110) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $148 = (($pNalUnit) + 4|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ($149|0)==(0);
 do {
  if (!($150)) {
   $151 = HEAP32[$pNalUnit>>2]|0;
   $152 = (($pSeqParamSet) + 44|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = ($151|0)==(5);
   $155 = (_h264bsdGetBits($pStrmData,1)|0);
   $156 = ($155|0)==(-1);
   if ($154) {
    if ($156) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    $157 = (($pSliceHeader) + 276|0);
    HEAP32[$157>>2] = $155;
    $158 = (_h264bsdGetBits($pStrmData,1)|0);
    $159 = ($158|0)==(-1);
    if ($159) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    $160 = (($pSliceHeader) + 280|0);
    HEAP32[$160>>2] = $158;
    $161 = ($153|0)!=(0);
    $162 = ($158|0)==(0);
    $or$cond$i = $161 | $162;
    if ($or$cond$i) {
     break;
    } else {
     $$0 = 1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   if ($156) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $163 = (($pSliceHeader) + 284|0);
   HEAP32[$163>>2] = $155;
   $164 = ($155|0)==(0);
   if (!($164)) {
    $165 = $153 << 1;
    $166 = (($165) + 2)|0;
    $i$0$i13 = 0;$num1to3$0$i = 0;$num4$0$i = 0;$num5$0$i = 0;$num6$0$i = 0;
    while(1) {
     $167 = ($i$0$i13>>>0)>($166>>>0);
     if ($167) {
      $$0 = 1;
      label = 110;
      break;
     }
     $168 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$operation$i)|0);
     $169 = ($168|0)==(0);
     if (!($169)) {
      $$0 = $168;
      label = 110;
      break;
     }
     $170 = HEAP32[$operation$i>>2]|0;
     $171 = ($170>>>0)>(6);
     if ($171) {
      $$0 = 1;
      label = 110;
      break;
     }
     $172 = ((($pSliceHeader) + (($i$0$i13*20)|0)|0) + 288|0);
     HEAP32[$172>>2] = $170;
     $173 = $170 & -3;
     $174 = ($173|0)==(1);
     if ($174) {
      $175 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i11)|0);
      $176 = ($175|0)==(0);
      if (!($176)) {
       $$0 = $175;
       label = 110;
       break;
      }
      $177 = HEAP32[$value$i11>>2]|0;
      $178 = (($177) + 1)|0;
      $179 = ((($pSliceHeader) + (($i$0$i13*20)|0)|0) + 292|0);
      HEAP32[$179>>2] = $178;
      $$pr$i = HEAP32[$operation$i>>2]|0;
      $180 = $$pr$i;
     } else {
      $180 = $170;
     }
     $181 = ($180|0)==(2);
     if ($181) {
      $182 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i11)|0);
      $183 = ($182|0)==(0);
      if (!($183)) {
       $$0 = $182;
       label = 110;
       break;
      }
      $184 = HEAP32[$value$i11>>2]|0;
      $185 = ((($pSliceHeader) + (($i$0$i13*20)|0)|0) + 296|0);
      HEAP32[$185>>2] = $184;
      $$pre$i = HEAP32[$operation$i>>2]|0;
      $273 = $$pre$i;
     } else {
      $273 = $180;
     }
     if ((($273|0) == 3) | (($273|0) == 6)) {
      $186 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i11)|0);
      $187 = ($186|0)==(0);
      if (!($187)) {
       $$0 = $186;
       label = 110;
       break;
      }
      $188 = HEAP32[$value$i11>>2]|0;
      $189 = ((($pSliceHeader) + (($i$0$i13*20)|0)|0) + 300|0);
      HEAP32[$189>>2] = $188;
      $$pr12$i = HEAP32[$operation$i>>2]|0;
      $190 = $$pr12$i;
     } else {
      $190 = $273;
     }
     $191 = ($190|0)==(4);
     if ($191) {
      $192 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i11)|0);
      $193 = ($192|0)==(0);
      if (!($193)) {
       $$0 = $192;
       label = 110;
       break;
      }
      $194 = HEAP32[$value$i11>>2]|0;
      $195 = ($194>>>0)>($153>>>0);
      if ($195) {
       $$0 = 1;
       label = 110;
       break;
      }
      $196 = ($194|0)==(0);
      if ($196) {
       $197 = ((($pSliceHeader) + (($i$0$i13*20)|0)|0) + 304|0);
       HEAP32[$197>>2] = 65535;
      } else {
       $198 = (($194) + -1)|0;
       $199 = ((($pSliceHeader) + (($i$0$i13*20)|0)|0) + 304|0);
       HEAP32[$199>>2] = $198;
      }
      $200 = (($num4$0$i) + 1)|0;
      $$pre13$i = HEAP32[$operation$i>>2]|0;
      $201 = $$pre13$i;$num4$1$i = $200;
     } else {
      $201 = $190;$num4$1$i = $num4$0$i;
     }
     $202 = ($201|0)==(5);
     $203 = $202&1;
     $$num5$0$i = (($203) + ($num5$0$i))|0;
     $204 = ($201|0)!=(0);
     $205 = ($201>>>0)<(4);
     $or$cond5$i = $204 & $205;
     $206 = $or$cond5$i&1;
     $num1to3$1$i = (($206) + ($num1to3$0$i))|0;
     $207 = ($201|0)==(6);
     $208 = $207&1;
     $$num6$0$i = (($208) + ($num6$0$i))|0;
     $209 = (($i$0$i13) + 1)|0;
     $210 = ($201|0)==(0);
     if ($210) {
      label = 90;
      break;
     } else {
      $i$0$i13 = $209;$num1to3$0$i = $num1to3$1$i;$num4$0$i = $num4$1$i;$num5$0$i = $$num5$0$i;$num6$0$i = $$num6$0$i;
     }
    }
    if ((label|0) == 90) {
     $211 = ($num4$1$i>>>0)>(1);
     $212 = ($$num5$0$i>>>0)>(1);
     $or$cond7$i = $211 | $212;
     $213 = ($$num6$0$i>>>0)>(1);
     $or$cond9$i = $or$cond7$i | $213;
     if ($or$cond9$i) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
     $214 = ($num1to3$1$i|0)!=(0);
     $215 = ($$num5$0$i|0)!=(0);
     $or$cond11$i = $214 & $215;
     if ($or$cond11$i) {
      $$0 = 1;
     } else {
      break;
     }
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 110) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $216 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
 $217 = ($216|0)==(0);
 if (!($217)) {
  $$0 = $216;
  STACKTOP = sp;return ($$0|0);
 }
 $218 = HEAP32[$itmp>>2]|0;
 $219 = (($pSliceHeader) + 48|0);
 HEAP32[$219>>2] = $218;
 $220 = (($pPicParamSet) + 52|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = (($218) + ($221))|0;
 HEAP32[$itmp>>2] = $222;
 $223 = ($222>>>0)>(51);
 if ($223) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $224 = (($pPicParamSet) + 60|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = ($225|0)==(0);
 do {
  if (!($226)) {
   $227 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
   $228 = ($227|0)==(0);
   if (!($228)) {
    $$0 = $227;
    STACKTOP = sp;return ($$0|0);
   }
   $229 = HEAP32[$value>>2]|0;
   $230 = (($pSliceHeader) + 52|0);
   HEAP32[$230>>2] = $229;
   $231 = ($229>>>0)>(2);
   if ($231) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $232 = ($229|0)==(1);
   if ($232) {
    break;
   }
   $233 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
   $234 = ($233|0)==(0);
   if (!($234)) {
    $$0 = $233;
    STACKTOP = sp;return ($$0|0);
   }
   $235 = HEAP32[$itmp>>2]|0;
   $$off = (($235) + 6)|0;
   $236 = ($$off>>>0)>(12);
   if ($236) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $237 = $235 << 1;
   $238 = (($pSliceHeader) + 56|0);
   HEAP32[$238>>2] = $237;
   $239 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
   $240 = ($239|0)==(0);
   if (!($240)) {
    $$0 = $239;
    STACKTOP = sp;return ($$0|0);
   }
   $241 = HEAP32[$itmp>>2]|0;
   $$off8 = (($241) + 6)|0;
   $242 = ($$off8>>>0)>(12);
   if ($242) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $243 = $241 << 1;
    $244 = (($pSliceHeader) + 60|0);
    HEAP32[$244>>2] = $243;
    break;
   }
  }
 } while(0);
 $245 = (($pPicParamSet) + 12|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ($246>>>0)>(1);
 do {
  if ($247) {
   $248 = (($pPicParamSet) + 16|0);
   $249 = HEAP32[$248>>2]|0;
   $$off17 = (($249) + -3)|0;
   $250 = ($$off17>>>0)<(3);
   if ($250) {
    $251 = (($pPicParamSet) + 36|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = (($4>>>0) % ($252>>>0))&-1;
    $254 = ($253|0)==(0);
    $255 = (($4>>>0) / ($252>>>0))&-1;
    $tmp$0$v$i = $254 ? 1 : 2;
    $tmp$0$i = (($tmp$0$v$i) + ($255))|0;
    $numBits$0$i = 0;
    while(1) {
     $256 = (($numBits$0$i) + 1)|0;
     $257 = -1 << $256;
     $258 = $257 & $tmp$0$i;
     $259 = ($258|0)==(0);
     if ($259) {
      break;
     } else {
      $numBits$0$i = $256;
     }
    }
    $260 = 1 << $numBits$0$i;
    $261 = (($260) + -1)|0;
    $262 = $261 & $tmp$0$i;
    $263 = ($262|0)==(0);
    $numBits$0$$i = $263 ? $numBits$0$i : $256;
    $264 = (_h264bsdGetBits($pStrmData,$numBits$0$$i)|0);
    HEAP32[$value>>2] = $264;
    $265 = ($264|0)==(-1);
    if ($265) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    $266 = (($pSliceHeader) + 64|0);
    HEAP32[$266>>2] = $264;
    $267 = HEAP32[$251>>2]|0;
    $268 = (($4) + -1)|0;
    $269 = (($268) + ($267))|0;
    $270 = (($269>>>0) / ($267>>>0))&-1;
    $271 = ($264>>>0)>($270>>>0);
    if ($271) {
     $$0 = 1;
    } else {
     break;
    }
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCheckPpsId($pStrmData,$picParamSetId) {
 $pStrmData = $pStrmData|0;
 $picParamSetId = $picParamSetId|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tmpStrmData = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $value = sp + 20|0;
 $tmpStrmData = sp;
 ;HEAP32[$tmpStrmData+0>>2]=HEAP32[$pStrmData+0>>2]|0;HEAP32[$tmpStrmData+4>>2]=HEAP32[$pStrmData+4>>2]|0;HEAP32[$tmpStrmData+8>>2]=HEAP32[$pStrmData+8>>2]|0;HEAP32[$tmpStrmData+12>>2]=HEAP32[$pStrmData+12>>2]|0;HEAP32[$tmpStrmData+16>>2]=HEAP32[$pStrmData+16>>2]|0;
 $0 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP32[$value>>2]|0;
 $7 = ($6>>>0)>(255);
 if ($7) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$picParamSetId>>2] = $6;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCheckFrameNum($pStrmData,$maxFrameNum,$frameNum) {
 $pStrmData = $pStrmData|0;
 $maxFrameNum = $maxFrameNum|0;
 $frameNum = $frameNum|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $tmpStrmData = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $value = sp + 20|0;
 $tmpStrmData = sp;
 ;HEAP32[$tmpStrmData+0>>2]=HEAP32[$pStrmData+0>>2]|0;HEAP32[$tmpStrmData+4>>2]=HEAP32[$pStrmData+4>>2]|0;HEAP32[$tmpStrmData+8>>2]=HEAP32[$pStrmData+8>>2]|0;HEAP32[$tmpStrmData+12>>2]=HEAP32[$pStrmData+12>>2]|0;HEAP32[$tmpStrmData+16>>2]=HEAP32[$pStrmData+16>>2]|0;
 $0 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $i$0 = 0;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $6 = $maxFrameNum >>> $i$0;
  $7 = ($6|0)==(0);
  $8 = (($i$0) + 1)|0;
  if ($7) {
   break;
  } else {
   $i$0 = $8;
  }
 }
 $9 = (($i$0) + -1)|0;
 $10 = (_h264bsdGetBits($tmpStrmData,$9)|0);
 $11 = ($10|0)==(-1);
 if ($11) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$frameNum>>2] = $10;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCheckIdrPicId($pStrmData,$maxFrameNum,$nalUnitType,$idrPicId) {
 $pStrmData = $pStrmData|0;
 $maxFrameNum = $maxFrameNum|0;
 $nalUnitType = $nalUnitType|0;
 $idrPicId = $idrPicId|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $tmpStrmData = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $value = sp + 20|0;
 $tmpStrmData = sp;
 $0 = ($nalUnitType|0)==(5);
 if (!($0)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$tmpStrmData+0>>2]=HEAP32[$pStrmData+0>>2]|0;HEAP32[$tmpStrmData+4>>2]=HEAP32[$pStrmData+4>>2]|0;HEAP32[$tmpStrmData+8>>2]=HEAP32[$pStrmData+8>>2]|0;HEAP32[$tmpStrmData+12>>2]=HEAP32[$pStrmData+12>>2]|0;HEAP32[$tmpStrmData+16>>2]=HEAP32[$pStrmData+16>>2]|0;
 $1 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $i$0 = 0;
 } else {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = $maxFrameNum >>> $i$0;
  $8 = ($7|0)==(0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   break;
  } else {
   $i$0 = $9;
  }
 }
 $10 = (($i$0) + -1)|0;
 $11 = (_h264bsdGetBits($tmpStrmData,$10)|0);
 $12 = ($11|0)==(-1);
 if ($12) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$idrPicId)|0);
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCheckPicOrderCntLsb($pStrmData,$pSeqParamSet,$nalUnitType,$picOrderCntLsb) {
 $pStrmData = $pStrmData|0;
 $pSeqParamSet = $pSeqParamSet|0;
 $nalUnitType = $nalUnitType|0;
 $picOrderCntLsb = $picOrderCntLsb|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0, $tmpStrmData = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $value = sp + 20|0;
 $tmpStrmData = sp;
 ;HEAP32[$tmpStrmData+0>>2]=HEAP32[$pStrmData+0>>2]|0;HEAP32[$tmpStrmData+4>>2]=HEAP32[$pStrmData+4>>2]|0;HEAP32[$tmpStrmData+8>>2]=HEAP32[$pStrmData+8>>2]|0;HEAP32[$tmpStrmData+12>>2]=HEAP32[$pStrmData+12>>2]|0;HEAP32[$tmpStrmData+16>>2]=HEAP32[$pStrmData+16>>2]|0;
 $0 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($pSeqParamSet) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $i$0 = 0;
 while(1) {
  $8 = $7 >>> $i$0;
  $9 = ($8|0)==(0);
  $10 = (($i$0) + 1)|0;
  if ($9) {
   break;
  } else {
   $i$0 = $10;
  }
 }
 $11 = (($i$0) + -1)|0;
 $12 = (_h264bsdGetBits($tmpStrmData,$11)|0);
 $13 = ($12|0)==(-1);
 if ($13) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ($nalUnitType|0)==(5);
 if ($14) {
  $15 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   $$0 = $15;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $17 = (($pSeqParamSet) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $i$1 = 0;
 while(1) {
  $19 = $18 >>> $i$1;
  $20 = ($19|0)==(0);
  $21 = (($i$1) + 1)|0;
  if ($20) {
   break;
  } else {
   $i$1 = $21;
  }
 }
 $22 = (($i$1) + -1)|0;
 $23 = (_h264bsdGetBits($tmpStrmData,$22)|0);
 $24 = ($23|0)==(-1);
 if ($24) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$picOrderCntLsb>>2] = $23;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCheckDeltaPicOrderCntBottom($pStrmData,$pSeqParamSet,$nalUnitType,$deltaPicOrderCntBottom) {
 $pStrmData = $pStrmData|0;
 $pSeqParamSet = $pSeqParamSet|0;
 $nalUnitType = $nalUnitType|0;
 $deltaPicOrderCntBottom = $deltaPicOrderCntBottom|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0, $tmpStrmData = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $value = sp + 20|0;
 $tmpStrmData = sp;
 ;HEAP32[$tmpStrmData+0>>2]=HEAP32[$pStrmData+0>>2]|0;HEAP32[$tmpStrmData+4>>2]=HEAP32[$pStrmData+4>>2]|0;HEAP32[$tmpStrmData+8>>2]=HEAP32[$pStrmData+8>>2]|0;HEAP32[$tmpStrmData+12>>2]=HEAP32[$pStrmData+12>>2]|0;HEAP32[$tmpStrmData+16>>2]=HEAP32[$pStrmData+16>>2]|0;
 $0 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($pSeqParamSet) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $i$0 = 0;
 while(1) {
  $8 = $7 >>> $i$0;
  $9 = ($8|0)==(0);
  $10 = (($i$0) + 1)|0;
  if ($9) {
   break;
  } else {
   $i$0 = $10;
  }
 }
 $11 = (($i$0) + -1)|0;
 $12 = (_h264bsdGetBits($tmpStrmData,$11)|0);
 $13 = ($12|0)==(-1);
 if ($13) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ($nalUnitType|0)==(5);
 if ($14) {
  $15 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   $$0 = $15;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $17 = (($pSeqParamSet) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $i$1 = 0;
 while(1) {
  $19 = $18 >>> $i$1;
  $20 = ($19|0)==(0);
  $21 = (($i$1) + 1)|0;
  if ($20) {
   break;
  } else {
   $i$1 = $21;
  }
 }
 $22 = (($i$1) + -1)|0;
 $23 = (_h264bsdGetBits($tmpStrmData,$22)|0);
 $24 = ($23|0)==(-1);
 if ($24) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (_h264bsdDecodeExpGolombSigned($tmpStrmData,$deltaPicOrderCntBottom)|0);
 $$0 = $25;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCheckDeltaPicOrderCnt($pStrmData,$pSeqParamSet,$nalUnitType,$picOrderPresentFlag,$deltaPicOrderCnt) {
 $pStrmData = $pStrmData|0;
 $pSeqParamSet = $pSeqParamSet|0;
 $nalUnitType = $nalUnitType|0;
 $picOrderPresentFlag = $picOrderPresentFlag|0;
 $deltaPicOrderCnt = $deltaPicOrderCnt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $tmpStrmData = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $value = sp + 20|0;
 $tmpStrmData = sp;
 ;HEAP32[$tmpStrmData+0>>2]=HEAP32[$pStrmData+0>>2]|0;HEAP32[$tmpStrmData+4>>2]=HEAP32[$pStrmData+4>>2]|0;HEAP32[$tmpStrmData+8>>2]=HEAP32[$pStrmData+8>>2]|0;HEAP32[$tmpStrmData+12>>2]=HEAP32[$pStrmData+12>>2]|0;HEAP32[$tmpStrmData+16>>2]=HEAP32[$pStrmData+16>>2]|0;
 $0 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($pSeqParamSet) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $i$0 = 0;
 while(1) {
  $8 = $7 >>> $i$0;
  $9 = ($8|0)==(0);
  $10 = (($i$0) + 1)|0;
  if ($9) {
   break;
  } else {
   $i$0 = $10;
  }
 }
 $11 = (($i$0) + -1)|0;
 $12 = (_h264bsdGetBits($tmpStrmData,$11)|0);
 $13 = ($12|0)==(-1);
 if ($13) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ($nalUnitType|0)==(5);
 if ($14) {
  $15 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   $$0 = $15;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $17 = (_h264bsdDecodeExpGolombSigned($tmpStrmData,$deltaPicOrderCnt)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ($picOrderPresentFlag|0)==(0);
 if (!($19)) {
  $20 = (($deltaPicOrderCnt) + 4|0);
  $21 = (_h264bsdDecodeExpGolombSigned($tmpStrmData,$20)|0);
  $22 = ($21|0)==(0);
  if (!($22)) {
   $$0 = $21;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCheckPriorPicsFlag($noOutputOfPriorPicsFlag,$pStrmData,$pSeqParamSet,$pPicParamSet,$nalUnitType) {
 $noOutputOfPriorPicsFlag = $noOutputOfPriorPicsFlag|0;
 $pStrmData = $pStrmData|0;
 $pSeqParamSet = $pSeqParamSet|0;
 $pPicParamSet = $pPicParamSet|0;
 $nalUnitType = $nalUnitType|0;
 var $$ = 0, $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0, $ivalue = 0, $tmpStrmData = 0, $value = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $value = sp + 24|0;
 $ivalue = sp + 20|0;
 $tmpStrmData = sp;
 ;HEAP32[$tmpStrmData+0>>2]=HEAP32[$pStrmData+0>>2]|0;HEAP32[$tmpStrmData+4>>2]=HEAP32[$pStrmData+4>>2]|0;HEAP32[$tmpStrmData+8>>2]=HEAP32[$pStrmData+8>>2]|0;HEAP32[$tmpStrmData+12>>2]=HEAP32[$pStrmData+12>>2]|0;HEAP32[$tmpStrmData+16>>2]=HEAP32[$pStrmData+16>>2]|0;
 $0 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($pSeqParamSet) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $i$0 = 0;
 while(1) {
  $8 = $7 >>> $i$0;
  $9 = ($8|0)==(0);
  $10 = (($i$0) + 1)|0;
  if ($9) {
   break;
  } else {
   $i$0 = $10;
  }
 }
 $11 = (($i$0) + -1)|0;
 $12 = (_h264bsdGetBits($tmpStrmData,$11)|0);
 $13 = ($12|0)==(-1);
 if ($13) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (($pSeqParamSet) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = (($pSeqParamSet) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $i$1 = 0;
  while(1) {
   $21 = $20 >>> $i$1;
   $22 = ($21|0)==(0);
   $23 = (($i$1) + 1)|0;
   if ($22) {
    break;
   } else {
    $i$1 = $23;
   }
  }
  $24 = (($i$1) + -1)|0;
  $25 = (_h264bsdGetBits($tmpStrmData,$24)|0);
  $26 = ($25|0)==(-1);
  if ($26) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $27 = (($pPicParamSet) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0);
  if (!($29)) {
   $30 = (_h264bsdDecodeExpGolombSigned($tmpStrmData,$ivalue)|0);
   $31 = ($30|0)==(0);
   if (!($31)) {
    $$0 = $30;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $$pr = HEAP32[$16>>2]|0;
  $32 = $$pr;
 } else {
  $32 = $17;
 }
 $33 = ($32|0)==(1);
 if ($33) {
  $34 = (($pSeqParamSet) + 24|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(0);
  if ($36) {
   $37 = (_h264bsdDecodeExpGolombSigned($tmpStrmData,$ivalue)|0);
   $38 = ($37|0)==(0);
   if (!($38)) {
    $$0 = $37;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = (($pPicParamSet) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(0);
   if (!($41)) {
    $42 = (_h264bsdDecodeExpGolombSigned($tmpStrmData,$ivalue)|0);
    $43 = ($42|0)==(0);
    if (!($43)) {
     $$0 = $42;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 $44 = (($pPicParamSet) + 68|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0);
 if (!($46)) {
  $47 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
  $48 = ($47|0)==(0);
  if (!($48)) {
   $$0 = $47;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $49 = (_h264bsdGetBits($tmpStrmData,1)|0);
 HEAP32[$noOutputOfPriorPicsFlag>>2] = $49;
 $50 = ($49|0)==(-1);
 $$ = $50&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDecodeSliceData($pStrmData,$pStorage,$currImage,$pSliceHeader) {
 $pStrmData = $pStrmData|0;
 $pStorage = $pStorage|0;
 $currImage = $currImage|0;
 $pSliceHeader = $pSliceHeader|0;
 var $$0 = 0, $$mbCount$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $currMbAddr$0 = 0, $mbCount$0 = 0, $mbData = 0;
 var $or$cond = 0, $or$cond3 = 0, $prevSkipped$0 = 0, $prevSkipped$1 = 0, $prevSkipped$2 = 0, $qpY = 0, $skipRun = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $mbData = sp + 8|0;
 $skipRun = sp + 4|0;
 $qpY = sp;
 $0 = $mbData;
 $1 = (0 - ($0))|0;
 $2 = $1 & 15;
 $3 = (($mbData) + ($2)|0);
 $4 = (($pStorage) + 3376|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$pSliceHeader>>2]|0;
 HEAP32[$skipRun>>2] = 0;
 $7 = (($pStorage) + 1192|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = (($pStorage) + 1200|0);
 HEAP32[$10>>2] = 0;
 $11 = (($pStorage) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($pSliceHeader) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($14))|0;
 HEAP32[$qpY>>2] = $17;
 $18 = (($pSliceHeader) + 36|0);
 $19 = (($pStorage) + 1212|0);
 $20 = (($pSliceHeader) + 52|0);
 $21 = (($pSliceHeader) + 56|0);
 $22 = (($pSliceHeader) + 60|0);
 $23 = (($pSliceHeader) + 4|0);
 $24 = (($pSliceHeader) + 44|0);
 $25 = (($pStorage) + 1220|0);
 $26 = (($pStorage) + 1172|0);
 $27 = (($pStorage) + 1176|0);
 $28 = (($5) + 12|0);
 $currMbAddr$0 = $6;$mbCount$0 = 0;$prevSkipped$0 = 0;
 while(1) {
  $29 = HEAP32[$18>>2]|0;
  $30 = ($29|0)==(0);
  $31 = HEAP32[$19>>2]|0;
  if ($30) {
   $32 = ((($31) + (($currMbAddr$0*216)|0)|0) + 196|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0);
   if (!($34)) {
    $$0 = 1;
    label = 22;
    break;
   }
  }
  $35 = HEAP32[$7>>2]|0;
  $36 = HEAP32[$11>>2]|0;
  $37 = (($36) + 56|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$20>>2]|0;
  $40 = HEAP32[$21>>2]|0;
  $41 = HEAP32[$22>>2]|0;
  $42 = ((($31) + (($currMbAddr$0*216)|0)|0) + 4|0);
  HEAP32[$42>>2] = $35;
  $43 = ((($31) + (($currMbAddr$0*216)|0)|0) + 8|0);
  HEAP32[$43>>2] = $39;
  $44 = ((($31) + (($currMbAddr$0*216)|0)|0) + 12|0);
  HEAP32[$44>>2] = $40;
  $45 = ((($31) + (($currMbAddr$0*216)|0)|0) + 16|0);
  HEAP32[$45>>2] = $41;
  $46 = ((($31) + (($currMbAddr$0*216)|0)|0) + 24|0);
  HEAP32[$46>>2] = $38;
  $47 = HEAP32[$23>>2]|0;
  $48 = ($47|0)==(2);
  if ($48) {
   $prevSkipped$1 = $prevSkipped$0;
  } else {
   $49 = ($47|0)==(7);
   $50 = ($prevSkipped$0|0)!=(0);
   $or$cond3 = $49 | $50;
   if ($or$cond3) {
    $prevSkipped$1 = $prevSkipped$0;
   } else {
    $51 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$skipRun)|0);
    $52 = ($51|0)==(0);
    if (!($52)) {
     $$0 = $51;
     label = 22;
     break;
    }
    $53 = HEAP32[$skipRun>>2]|0;
    $54 = HEAP32[$27>>2]|0;
    $55 = (($54) - ($currMbAddr$0))|0;
    $56 = ($53>>>0)>($55>>>0);
    if ($56) {
     $$0 = 1;
     label = 22;
     break;
    }
    $57 = ($53|0)==(0);
    if ($57) {
     $prevSkipped$1 = 0;
    } else {
     _H264SwDecMemset($28,0,164);
     HEAP32[$5>>2] = 0;
     $prevSkipped$1 = 1;
    }
   }
  }
  $58 = HEAP32[$skipRun>>2]|0;
  $59 = ($58|0)==(0);
  if ($59) {
   $61 = HEAP32[$19>>2]|0;
   $62 = (($61) + (($currMbAddr$0*216)|0)|0);
   $63 = HEAP32[$23>>2]|0;
   $64 = HEAP32[$24>>2]|0;
   $65 = (_h264bsdDecodeMacroblockLayer($pStrmData,$5,$62,$63,$64)|0);
   $66 = ($65|0)==(0);
   if ($66) {
    $prevSkipped$2 = 0;
   } else {
    $$0 = $65;
    label = 22;
    break;
   }
  } else {
   $60 = (($58) + -1)|0;
   HEAP32[$skipRun>>2] = $60;
   $prevSkipped$2 = $prevSkipped$1;
  }
  $67 = HEAP32[$19>>2]|0;
  $68 = (($67) + (($currMbAddr$0*216)|0)|0);
  $69 = HEAP32[$11>>2]|0;
  $70 = (($69) + 64|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (_h264bsdDecodeMacroblock($68,$5,$currImage,$25,$qpY,$currMbAddr$0,$71,$3)|0);
  $73 = ($72|0)==(0);
  if (!($73)) {
   $$0 = $72;
   label = 22;
   break;
  }
  $74 = HEAP32[$19>>2]|0;
  $75 = ((($74) + (($currMbAddr$0*216)|0)|0) + 196|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($76|0)==(1);
  $78 = $77&1;
  $$mbCount$0 = (($78) + ($mbCount$0))|0;
  $79 = (_h264bsdMoreRbspData($pStrmData)|0);
  $80 = ($79|0)==(0);
  if ($80) {
   $81 = HEAP32[$skipRun>>2]|0;
   $82 = ($81|0)!=(0);
   $88 = $82;
  } else {
   $88 = 1;
  }
  $83 = HEAP32[$23>>2]|0;
  if ((($83|0) == 7) | (($83|0) == 2)) {
   HEAP32[$10>>2] = $currMbAddr$0;
  }
  $84 = HEAP32[$26>>2]|0;
  $85 = HEAP32[$27>>2]|0;
  $86 = (_h264bsdNextMbAddress($84,$85,$currMbAddr$0)|0);
  $87 = $88 ^ 1;
  $89 = ($86|0)!=(0);
  $or$cond = $89 | $87;
  if (!($or$cond)) {
   $$0 = 1;
   label = 22;
   break;
  }
  if ($88) {
   $currMbAddr$0 = $86;$mbCount$0 = $$mbCount$0;$prevSkipped$0 = $prevSkipped$2;
  } else {
   label = 20;
   break;
  }
 }
 if ((label|0) == 20) {
  $90 = (($pStorage) + 1196|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + ($$mbCount$0))|0;
  $93 = HEAP32[$27>>2]|0;
  $94 = ($92>>>0)>($93>>>0);
  if ($94) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$90>>2] = $92;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _h264bsdMarkSliceCorrupted($pStorage,$firstMbInSlice) {
 $pStorage = $pStorage|0;
 $firstMbInSlice = $firstMbInSlice|0;
 var $$ = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $currMbAddr$0 = 0, $currMbAddr$0$ph = 0, $i$0 = 0, $i$0$in = 0, $i$0$in$ph = 0, $tmp$0$ph = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pStorage) + 1192|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pStorage) + 1200|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $$pre = (($pStorage) + 1212|0);
 L1: do {
  if ($4) {
   $currMbAddr$0$ph = $firstMbInSlice;
  } else {
   $5 = (($pStorage) + 16|0);
   $i$0$in$ph = $3;$tmp$0$ph = 0;
   while(1) {
    $i$0$in = $i$0$in$ph;
    while(1) {
     $i$0 = (($i$0$in) + -1)|0;
     $6 = ($i$0>>>0)>($firstMbInSlice>>>0);
     if (!($6)) {
      $currMbAddr$0$ph = $i$0;
      break L1;
     }
     $7 = HEAP32[$$pre>>2]|0;
     $8 = ((($7) + (($i$0*216)|0)|0) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ($9|0)==($1|0);
     if ($10) {
      break;
     } else {
      $i$0$in = $i$0;
     }
    }
    $11 = (($tmp$0$ph) + 1)|0;
    $12 = HEAP32[$5>>2]|0;
    $13 = (($12) + 52|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14>>>0)>(10);
    $$ = $15 ? $14 : 10;
    $16 = ($11>>>0)<($$>>>0);
    if ($16) {
     $i$0$in$ph = $i$0;$tmp$0$ph = $11;
    } else {
     $currMbAddr$0$ph = $i$0;
     break;
    }
   }
  }
 } while(0);
 $17 = (($pStorage) + 1172|0);
 $18 = (($pStorage) + 1176|0);
 $currMbAddr$0 = $currMbAddr$0$ph;
 while(1) {
  $19 = HEAP32[$$pre>>2]|0;
  $20 = ((($19) + (($currMbAddr$0*216)|0)|0) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==($1|0);
  if (!($22)) {
   label = 11;
   break;
  }
  $23 = ((($19) + (($currMbAddr$0*216)|0)|0) + 196|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0);
  if ($25) {
   label = 11;
   break;
  }
  $26 = (($24) + -1)|0;
  HEAP32[$23>>2] = $26;
  $27 = HEAP32[$17>>2]|0;
  $28 = HEAP32[$18>>2]|0;
  $29 = (_h264bsdNextMbAddress($27,$28,$currMbAddr$0)|0);
  $30 = ($29|0)==(0);
  if ($30) {
   label = 11;
   break;
  } else {
   $currMbAddr$0 = $29;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function _h264bsdDecodeMacroblockLayer($pStrmData,$pMbLayer,$pMb,$sliceType,$numRefIdxActive) {
 $pStrmData = $pStrmData|0;
 $pMbLayer = $pMbLayer|0;
 $pMb = $pMb|0;
 $sliceType = $sliceType|0;
 $numRefIdxActive = $numRefIdxActive|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0, $$0$i$i = 0, $$0$i12 = 0, $$0$i21$ph = 0, $$0$i244959 = 0, $$0110$i = 0, $$lobit$1$i = 0, $$lobit$2$i = 0, $$lobit$3$i = 0, $$lobit$4$i = 0, $$lobit$5$i = 0, $$lobit$6$i = 0, $$lobit$7$i = 0, $$lobit$i = 0, $$ph = 0, $$ph51 = 0, $$pr$i = 0, $$pr$pr = 0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $blockIndex$0$be$i = 0, $blockIndex$011$i = 0, $blockIndex$17$i = 0, $blockIndex$22$i = 0, $i$0$ph$i = 0, $i$011$i = 0, $i$033 = 0, $i$19$i = 0, $i$213$i = 0, $i$26$i = 0, $is16x16$0$i = 0, $itmp = 0, $itmp$i = 0, $itmp$i17 = 0, $j$04$i = 0, $j$08$i = 0, $j$15$i = 0;
 var $level$034 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i20 = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond3$i = 0, $or$cond5 = 0, $or$cond9 = 0, $switch$i = 0, $tmp$0$i = 0, $tmp$0$i23 = 0, $tmp$1$1$i = 0, $tmp$1$2$i = 0, $tmp$1$3$i = 0, $tmp$1$4$i = 0, $tmp$1$5$i = 0, $tmp$1$6$i = 0, $tmp$1$7$i = 0, $tmp$1$i = 0;
 var $value = 0, $value$i = 0, $value$i16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $value$i16 = sp + 20|0;
 $itmp$i17 = sp + 16|0;
 $value$i = sp + 12|0;
 $itmp$i = sp + 8|0;
 $value = sp + 4|0;
 $itmp = sp;
 _H264SwDecMemset($pMbLayer,0,2088);
 $0 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
 $1 = HEAP32[$value>>2]|0;
 do {
  if ((($sliceType|0) == 2) | (($sliceType|0) == 7)) {
   $2 = (($1) + 6)|0;
   $3 = ($2>>>0)>(31);
   $4 = ($0|0)!=(0);
   $or$cond3 = $3 | $4;
   if ($or$cond3) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$pMbLayer>>2] = $2;
    $$pr$pr = $2;
    break;
   }
  } else {
   $5 = (($1) + 1)|0;
   $6 = ($5>>>0)>(31);
   $7 = ($0|0)!=(0);
   $or$cond5 = $6 | $7;
   if ($or$cond5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$pMbLayer>>2] = $5;
    $$pr$pr = $5;
    break;
   }
  }
 } while(0);
 $8 = ($$pr$pr|0)==(31);
 L11: do {
  if ($8) {
   while(1) {
    $9 = (_h264bsdIsByteAligned($pStrmData)|0);
    $10 = ($9|0)==(0);
    if (!($10)) {
     break;
    }
    $11 = (_h264bsdGetBits($pStrmData,1)|0);
    $12 = ($11|0)==(0);
    if (!($12)) {
     $$0 = 1;
     label = 95;
     break;
    }
   }
   if ((label|0) == 95) {
    STACKTOP = sp;return ($$0|0);
   }
   $13 = (($pMbLayer) + 328|0);
   $i$033 = 0;$level$034 = $13;
   while(1) {
    $14 = (_h264bsdGetBits($pStrmData,8)|0);
    HEAP32[$value>>2] = $14;
    $15 = ($14|0)==(-1);
    if ($15) {
     $$0 = 1;
     break;
    }
    $16 = (($level$034) + 4|0);
    HEAP32[$level$034>>2] = $14;
    $17 = (($i$033) + 1)|0;
    $18 = ($17>>>0)<(384);
    if ($18) {
     $i$033 = $17;$level$034 = $16;
    } else {
     break L11;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $19 = ($$pr$pr>>>0)<(6);
   L13: do {
    if ($19) {
     if ((($$pr$pr|0) == 3) | (($$pr$pr|0) == 2)) {
      $280 = $itmp$i17;$281 = $value$i16;
     } else if ((($$pr$pr|0) == 0) | (($$pr$pr|0) == 1)) {
      $280 = $itmp$i17;$281 = $value$i16;
     } else {
      $i$011$i = 0;
      while(1) {
       $20 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i)|0);
       $21 = ($20|0)!=(0);
       $22 = HEAP32[$value$i>>2]|0;
       $23 = ($22>>>0)>(3);
       $or$cond$i = $21 | $23;
       if ($or$cond$i) {
        $$0 = 1;
        label = 95;
        break;
       }
       $24 = ((($pMbLayer) + ($i$011$i<<2)|0) + 176|0);
       HEAP32[$24>>2] = $22;
       $25 = (($i$011$i) + 1)|0;
       $26 = ($25>>>0)<(4);
       if ($26) {
        $i$011$i = $25;
       } else {
        break;
       }
      }
      if ((label|0) == 95) {
       STACKTOP = sp;return ($$0|0);
      }
      $27 = ($numRefIdxActive>>>0)>(1);
      $28 = ($$pr$pr|0)!=(5);
      $or$cond3$i = $27 & $28;
      L23: do {
       if ($or$cond3$i) {
        $29 = ($numRefIdxActive>>>0)>(2);
        $30 = $29&1;
        $i$19$i = 0;
        while(1) {
         $31 = (_h264bsdDecodeExpGolombTruncated($pStrmData,$value$i,$30)|0);
         $32 = ($31|0)==(0);
         if (!($32)) {
          $$0 = 1;
          label = 95;
          break;
         }
         $33 = HEAP32[$value$i>>2]|0;
         $34 = ($33>>>0)<($numRefIdxActive>>>0);
         if (!($34)) {
          $$0 = 1;
          label = 95;
          break;
         }
         $35 = ((($pMbLayer) + ($i$19$i<<2)|0) + 192|0);
         HEAP32[$35>>2] = $33;
         $36 = (($i$19$i) + 1)|0;
         $37 = ($36>>>0)<(4);
         if ($37) {
          $i$19$i = $36;
         } else {
          $i$26$i = 0;
          break L23;
         }
        }
        if ((label|0) == 95) {
         STACKTOP = sp;return ($$0|0);
        }
       } else {
        $i$26$i = 0;
       }
      } while(0);
      L32: while(1) {
       $38 = ((($pMbLayer) + ($i$26$i<<2)|0) + 176|0);
       $39 = HEAP32[$38>>2]|0;
       if ((($39|0) == 2) | (($39|0) == 1)) {
        $$0$i$i = 1;
       } else if ((($39|0) == 0)) {
        $$0$i$i = 0;
       } else {
        $$0$i$i = 3;
       }
       HEAP32[$value$i>>2] = $$0$i$i;
       $j$04$i = 0;
       while(1) {
        $40 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp$i)|0);
        $41 = ($40|0)==(0);
        if (!($41)) {
         $$0 = $40;
         label = 95;
         break L32;
        }
        $42 = HEAP32[$itmp$i>>2]|0;
        $43 = $42&65535;
        $44 = (((($pMbLayer) + ($i$26$i<<4)|0) + ($j$04$i<<2)|0) + 208|0);
        HEAP16[$44>>1] = $43;
        $45 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp$i)|0);
        $46 = ($45|0)==(0);
        if (!($46)) {
         $$0 = $45;
         label = 95;
         break L32;
        }
        $47 = HEAP32[$itmp$i>>2]|0;
        $48 = $47&65535;
        $49 = (((($pMbLayer) + ($i$26$i<<4)|0) + ($j$04$i<<2)|0) + 210|0);
        HEAP16[$49>>1] = $48;
        $50 = (($j$04$i) + 1)|0;
        $$pr$i = HEAP32[$value$i>>2]|0;
        $51 = (($$pr$i) + -1)|0;
        HEAP32[$value$i>>2] = $51;
        $52 = ($$pr$i|0)==(0);
        if ($52) {
         break;
        } else {
         $j$04$i = $50;
        }
       }
       $53 = (($i$26$i) + 1)|0;
       $54 = ($53>>>0)<(4);
       if ($54) {
        $i$26$i = $53;
       } else {
        $$0$i244959 = 2;
        label = 70;
        break L13;
       }
      }
      if ((label|0) == 95) {
       STACKTOP = sp;return ($$0|0);
      }
     }
     $55 = ($numRefIdxActive>>>0)>(1);
     if ($55) {
      if ((($$pr$pr|0) == 3) | (($$pr$pr|0) == 2)) {
       $i$0$ph$i = 1;
      } else if ((($$pr$pr|0) == 0) | (($$pr$pr|0) == 1)) {
       $i$0$ph$i = 0;
      } else {
       $i$0$ph$i = 3;
      }
      $56 = ($numRefIdxActive>>>0)>(2);
      $57 = $56&1;
      $65 = $i$0$ph$i;$j$08$i = 0;
      while(1) {
       $58 = (_h264bsdDecodeExpGolombTruncated($pStrmData,$value$i16,$57)|0);
       $59 = ($58|0)==(0);
       if (!($59)) {
        $$0$i21$ph = 1;$$ph = $280;$$ph51 = $281;
        label = 68;
        break L13;
       }
       $60 = HEAP32[$value$i16>>2]|0;
       $61 = ($60>>>0)<($numRefIdxActive>>>0);
       if (!($61)) {
        $$0$i21$ph = 1;$$ph = $280;$$ph51 = $281;
        label = 68;
        break L13;
       }
       $62 = ((($pMbLayer) + ($j$08$i<<2)|0) + 144|0);
       HEAP32[$62>>2] = $60;
       $63 = (($j$08$i) + 1)|0;
       $64 = (($65) + -1)|0;
       $66 = ($65|0)==(0);
       if ($66) {
        break;
       } else {
        $65 = $64;$j$08$i = $63;
       }
      }
     }
     if ((($$pr$pr|0) == 0) | (($$pr$pr|0) == 1)) {
      $79 = 0;$j$15$i = 0;
     } else if ((($$pr$pr|0) == 3) | (($$pr$pr|0) == 2)) {
      $79 = 1;$j$15$i = 0;
     } else {
      $79 = 3;$j$15$i = 0;
     }
     while(1) {
      $67 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp$i17)|0);
      $68 = ($67|0)==(0);
      if (!($68)) {
       $$0$i21$ph = $67;$$ph = $280;$$ph51 = $281;
       label = 68;
       break L13;
      }
      $69 = HEAP32[$itmp$i17>>2]|0;
      $70 = $69&65535;
      $71 = ((($pMbLayer) + ($j$15$i<<2)|0) + 160|0);
      HEAP16[$71>>1] = $70;
      $72 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp$i17)|0);
      $73 = ($72|0)==(0);
      if (!($73)) {
       $$0$i21$ph = $72;$$ph = $280;$$ph51 = $281;
       label = 68;
       break L13;
      }
      $74 = HEAP32[$itmp$i17>>2]|0;
      $75 = $74&65535;
      $76 = ((($pMbLayer) + ($j$15$i<<2)|0) + 162|0);
      HEAP16[$76>>1] = $75;
      $77 = (($j$15$i) + 1)|0;
      $78 = (($79) + -1)|0;
      $80 = ($79|0)==(0);
      if ($80) {
       $$0$i244959 = 2;
       label = 70;
       break;
      } else {
       $79 = $78;$j$15$i = $77;
      }
     }
    } else {
     $not$$i = ($$pr$pr|0)!=(6);
     $$$i = $not$$i&1;
     if ((($$$i|0) == 0)) {
      HEAP32[$itmp$i17>>2] = 0;
      $i$213$i = 0;
      while(1) {
       $81 = (_h264bsdShowBits32($pStrmData)|0);
       HEAP32[$value$i16>>2] = $81;
       $$lobit$i = $81 >>> 31;
       $82 = ((($pMbLayer) + ($i$213$i<<2)|0) + 12|0);
       HEAP32[$82>>2] = $$lobit$i;
       $83 = $81 << 1;
       $84 = ($$lobit$i|0)==(0);
       if ($84) {
        $85 = $81 >>> 28;
        $86 = $85 & 7;
        $87 = ((($pMbLayer) + ($i$213$i<<2)|0) + 76|0);
        HEAP32[$87>>2] = $86;
        $88 = $81 << 4;
        $90 = $88;$tmp$1$i = 1;
       } else {
        $90 = $83;$tmp$1$i = 0;
       }
       $89 = $i$213$i | 1;
       $$lobit$1$i = $90 >>> 31;
       $91 = ((($pMbLayer) + ($89<<2)|0) + 12|0);
       HEAP32[$91>>2] = $$lobit$1$i;
       $92 = $90 << 1;
       $93 = ($$lobit$1$i|0)==(0);
       if ($93) {
        $103 = $90 >>> 28;
        $104 = $103 & 7;
        $105 = ((($pMbLayer) + ($89<<2)|0) + 76|0);
        HEAP32[$105>>2] = $104;
        $106 = $90 << 4;
        $107 = (($tmp$1$i) + 1)|0;
        $109 = $106;$tmp$1$1$i = $107;
       } else {
        $109 = $92;$tmp$1$1$i = $tmp$1$i;
       }
       $108 = (($89) + 1)|0;
       $$lobit$2$i = $109 >>> 31;
       $110 = ((($pMbLayer) + ($108<<2)|0) + 12|0);
       HEAP32[$110>>2] = $$lobit$2$i;
       $111 = $109 << 1;
       $112 = ($$lobit$2$i|0)==(0);
       if ($112) {
        $113 = $109 >>> 28;
        $114 = $113 & 7;
        $115 = ((($pMbLayer) + ($108<<2)|0) + 76|0);
        HEAP32[$115>>2] = $114;
        $116 = $109 << 4;
        $117 = (($tmp$1$1$i) + 1)|0;
        $119 = $116;$tmp$1$2$i = $117;
       } else {
        $119 = $111;$tmp$1$2$i = $tmp$1$1$i;
       }
       $118 = $i$213$i | 3;
       $$lobit$3$i = $119 >>> 31;
       $120 = ((($pMbLayer) + ($118<<2)|0) + 12|0);
       HEAP32[$120>>2] = $$lobit$3$i;
       $121 = $119 << 1;
       $122 = ($$lobit$3$i|0)==(0);
       if ($122) {
        $123 = $119 >>> 28;
        $124 = $123 & 7;
        $125 = ((($pMbLayer) + ($118<<2)|0) + 76|0);
        HEAP32[$125>>2] = $124;
        $126 = $119 << 4;
        $127 = (($tmp$1$2$i) + 1)|0;
        $129 = $126;$tmp$1$3$i = $127;
       } else {
        $129 = $121;$tmp$1$3$i = $tmp$1$2$i;
       }
       $128 = (($118) + 1)|0;
       $$lobit$4$i = $129 >>> 31;
       $130 = ((($pMbLayer) + ($128<<2)|0) + 12|0);
       HEAP32[$130>>2] = $$lobit$4$i;
       $131 = $129 << 1;
       $132 = ($$lobit$4$i|0)==(0);
       if ($132) {
        $133 = $129 >>> 28;
        $134 = $133 & 7;
        $135 = ((($pMbLayer) + ($128<<2)|0) + 76|0);
        HEAP32[$135>>2] = $134;
        $136 = $129 << 4;
        $137 = (($tmp$1$3$i) + 1)|0;
        $139 = $136;$tmp$1$4$i = $137;
       } else {
        $139 = $131;$tmp$1$4$i = $tmp$1$3$i;
       }
       $138 = (($118) + 2)|0;
       $$lobit$5$i = $139 >>> 31;
       $140 = ((($pMbLayer) + ($138<<2)|0) + 12|0);
       HEAP32[$140>>2] = $$lobit$5$i;
       $141 = $139 << 1;
       $142 = ($$lobit$5$i|0)==(0);
       if ($142) {
        $143 = $139 >>> 28;
        $144 = $143 & 7;
        $145 = ((($pMbLayer) + ($138<<2)|0) + 76|0);
        HEAP32[$145>>2] = $144;
        $146 = $139 << 4;
        $147 = (($tmp$1$4$i) + 1)|0;
        $149 = $146;$tmp$1$5$i = $147;
       } else {
        $149 = $141;$tmp$1$5$i = $tmp$1$4$i;
       }
       $148 = (($118) + 3)|0;
       $$lobit$6$i = $149 >>> 31;
       $150 = ((($pMbLayer) + ($148<<2)|0) + 12|0);
       HEAP32[$150>>2] = $$lobit$6$i;
       $151 = $149 << 1;
       $152 = ($$lobit$6$i|0)==(0);
       if ($152) {
        $153 = $149 >>> 28;
        $154 = $153 & 7;
        $155 = ((($pMbLayer) + ($148<<2)|0) + 76|0);
        HEAP32[$155>>2] = $154;
        $156 = $149 << 4;
        $157 = (($tmp$1$5$i) + 1)|0;
        $159 = $156;$tmp$1$6$i = $157;
       } else {
        $159 = $151;$tmp$1$6$i = $tmp$1$5$i;
       }
       $158 = $i$213$i | 7;
       $$lobit$7$i = $159 >>> 31;
       $160 = ((($pMbLayer) + ($158<<2)|0) + 12|0);
       HEAP32[$160>>2] = $$lobit$7$i;
       $161 = $159 << 1;
       $162 = ($$lobit$7$i|0)==(0);
       if ($162) {
        $163 = $159 >>> 28;
        $164 = $163 & 7;
        $165 = ((($pMbLayer) + ($158<<2)|0) + 76|0);
        HEAP32[$165>>2] = $164;
        $166 = $159 << 4;
        $167 = (($tmp$1$6$i) + 1)|0;
        $168 = $166;$tmp$1$7$i = $167;
       } else {
        $168 = $161;$tmp$1$7$i = $tmp$1$6$i;
       }
       HEAP32[$value$i16>>2] = $168;
       $169 = ($tmp$1$7$i*3)|0;
       $170 = (($169) + 8)|0;
       $171 = (_h264bsdFlushBits($pStrmData,$170)|0);
       $172 = ($171|0)==(-1);
       if ($172) {
        $$0$i21$ph = 1;$$ph = $itmp$i17;$$ph51 = $value$i16;
        label = 68;
        break L13;
       }
       $94 = (($i$213$i) + 8)|0;
       $95 = HEAP32[$itmp$i17>>2]|0;
       $96 = (($95) + 1)|0;
       HEAP32[$itmp$i17>>2] = $96;
       $97 = ($96|0)<(2);
       if ($97) {
        $i$213$i = $94;
       } else {
        label = 52;
        break;
       }
      }
     } else if ((($$$i|0) == 1)) {
      label = 52;
     }
     if ((label|0) == 52) {
      $98 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i16)|0);
      $99 = ($98|0)!=(0);
      $100 = HEAP32[$value$i16>>2]|0;
      $101 = ($100>>>0)>(3);
      $or$cond$i20 = $99 | $101;
      if ($or$cond$i20) {
       $$0$i21$ph = 1;$$ph = $itmp$i17;$$ph51 = $value$i16;
       label = 68;
       break;
      }
      $102 = (($pMbLayer) + 140|0);
      HEAP32[$102>>2] = $100;
     }
     if ($not$$i) {
      $177 = HEAP32[$pMbLayer>>2]|0;
      $178 = ($177>>>0)>(18);
      $$$i22 = $178 ? 15 : 0;
      $179 = (($177) + -7)|0;
      $180 = $179 >>> 2;
      $181 = ($179>>>0)>(11);
      $182 = (($180) + 268435453)|0;
      $tmp$0$i23 = $181 ? $182 : $180;
      $183 = $tmp$0$i23 << 4;
      $184 = $183 | $$$i22;
      $185 = (($pMbLayer) + 4|0);
      HEAP32[$185>>2] = $184;
     } else {
      $$0$i244959 = $$$i;
      label = 70;
     }
    }
   } while(0);
   if ((label|0) == 68) {
    $$0 = $$0$i21$ph;
    STACKTOP = sp;return ($$0|0);
   }
   do {
    if ((label|0) == 70) {
     $173 = ($$0$i244959|0)==(0);
     $174 = $173&1;
     $175 = (_h264bsdDecodeExpGolombMapped($pStrmData,$value,$174)|0);
     $176 = ($175|0)==(0);
     if ($176) {
      $186 = HEAP32[$value>>2]|0;
      $187 = (($pMbLayer) + 4|0);
      HEAP32[$187>>2] = $186;
      $188 = ($186|0)==(0);
      if ($188) {
       break L11;
      } else {
       break;
      }
     } else {
      $$0 = $175;
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   $189 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
   $190 = ($189|0)!=(0);
   $191 = HEAP32[$itmp>>2]|0;
   $192 = ($191|0)<(-26);
   $or$cond9 = $190 | $192;
   $193 = ($191|0)>(25);
   $or$cond11 = $or$cond9 | $193;
   if ($or$cond11) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $194 = (($pMbLayer) + 4|0);
   $195 = (($pMbLayer) + 8|0);
   HEAP32[$195>>2] = $191;
   $196 = HEAP32[$pMbLayer>>2]|0;
   $197 = HEAP32[$194>>2]|0;
   $switch$i = ($196>>>0)<(7);
   $$pre$i = (($pMbLayer) + 272|0);
   if ($switch$i) {
    $is16x16$0$i = 1;
    label = 77;
   } else {
    $198 = (_DetermineNc($pMb,0,$$pre$i)|0);
    $199 = (($pMbLayer) + 1864|0);
    $200 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$199,$198,16)|0);
    $201 = $200 & 15;
    $202 = ($201|0)==(0);
    if ($202) {
     $203 = $200 >>> 4;
     $204 = $203 & 255;
     $205 = $204&65535;
     $206 = (($pMbLayer) + 320|0);
     HEAP16[$206>>1] = $205;
     $is16x16$0$i = 0;
     label = 77;
    } else {
     $$0$i12 = $200;
    }
   }
   L117: do {
    if ((label|0) == 77) {
     $$0110$i = $197;$231 = 3;$blockIndex$011$i = 0;
     while(1) {
      $207 = $$0110$i & 1;
      $208 = $$0110$i >>> 1;
      $209 = ($207|0)==(0);
      if ($209) {
       $229 = (($blockIndex$011$i) + 4)|0;
       $blockIndex$0$be$i = $229;
      } else {
       $227 = 3;$blockIndex$17$i = $blockIndex$011$i;
       while(1) {
        $210 = (_DetermineNc($pMb,$blockIndex$17$i,$$pre$i)|0);
        if ($is16x16$0$i) {
         $215 = ((($pMbLayer) + ($blockIndex$17$i<<6)|0) + 328|0);
         $216 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$215,$210,16)|0);
         $217 = $216 >>> 16;
         $218 = ((($pMbLayer) + ($blockIndex$17$i<<2)|0) + 1992|0);
         HEAP32[$218>>2] = $217;
         $tmp$0$i = $216;
        } else {
         $211 = ((($pMbLayer) + ($blockIndex$17$i<<6)|0) + 332|0);
         $212 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$211,$210,15)|0);
         $213 = $212 >>> 15;
         $214 = ((($pMbLayer) + ($blockIndex$17$i<<2)|0) + 1992|0);
         HEAP32[$214>>2] = $213;
         $tmp$0$i = $212;
        }
        $219 = $tmp$0$i & 15;
        $220 = ($219|0)==(0);
        if (!($220)) {
         $$0$i12 = $tmp$0$i;
         break L117;
        }
        $221 = $tmp$0$i >>> 4;
        $222 = $221 & 255;
        $223 = $222&65535;
        $224 = ((($pMbLayer) + ($blockIndex$17$i<<1)|0) + 272|0);
        HEAP16[$224>>1] = $223;
        $225 = (($blockIndex$17$i) + 1)|0;
        $226 = (($227) + -1)|0;
        $228 = ($227|0)==(0);
        if ($228) {
         $blockIndex$0$be$i = $225;
         break;
        } else {
         $227 = $226;$blockIndex$17$i = $225;
        }
       }
      }
      $230 = (($231) + -1)|0;
      $232 = ($231|0)==(0);
      if ($232) {
       break;
      } else {
       $$0110$i = $208;$231 = $230;$blockIndex$011$i = $blockIndex$0$be$i;
      }
     }
     $233 = $208 & 3;
     $234 = ($233|0)==(0);
     if (!($234)) {
      $235 = (($pMbLayer) + 1928|0);
      $236 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$235,-1,4)|0);
      $237 = $236 & 15;
      $238 = ($237|0)==(0);
      if (!($238)) {
       $$0$i12 = $236;
       break;
      }
      $239 = $236 >>> 4;
      $240 = $239 & 255;
      $241 = $240&65535;
      $242 = (($pMbLayer) + 322|0);
      HEAP16[$242>>1] = $241;
      $243 = (($pMbLayer) + 1944|0);
      $244 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$243,-1,4)|0);
      $245 = $244 & 15;
      $246 = ($245|0)==(0);
      if (!($246)) {
       $$0$i12 = $244;
       break;
      }
      $247 = $244 >>> 4;
      $248 = $247 & 255;
      $249 = $248&65535;
      $250 = (($pMbLayer) + 324|0);
      HEAP16[$250>>1] = $249;
     }
     $251 = $208 & 2;
     $252 = ($251|0)==(0);
     if ($252) {
      $$0$i12 = 0;
     } else {
      $266 = 7;$blockIndex$22$i = $blockIndex$0$be$i;
      while(1) {
       $253 = (_DetermineNc($pMb,$blockIndex$22$i,$$pre$i)|0);
       $254 = ((($pMbLayer) + ($blockIndex$22$i<<6)|0) + 332|0);
       $255 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$254,$253,15)|0);
       $256 = $255 & 15;
       $257 = ($256|0)==(0);
       if (!($257)) {
        $$0$i12 = $255;
        break L117;
       }
       $258 = $255 >>> 4;
       $259 = $258 & 255;
       $260 = $259&65535;
       $261 = ((($pMbLayer) + ($blockIndex$22$i<<1)|0) + 272|0);
       HEAP16[$261>>1] = $260;
       $262 = $255 >>> 15;
       $263 = ((($pMbLayer) + ($blockIndex$22$i<<2)|0) + 1992|0);
       HEAP32[$263>>2] = $262;
       $264 = (($blockIndex$22$i) + 1)|0;
       $265 = (($266) + -1)|0;
       $267 = ($266|0)==(0);
       if ($267) {
        $$0$i12 = 0;
        break;
       } else {
        $266 = $265;$blockIndex$22$i = $264;
       }
      }
     }
    }
   } while(0);
   $268 = (($pStrmData) + 4|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = HEAP32[$pStrmData>>2]|0;
   $271 = $269;
   $272 = $270;
   $273 = (($271) - ($272))|0;
   $274 = $273 << 3;
   $275 = (($pStrmData) + 8|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = (($274) + ($276))|0;
   $278 = (($pStrmData) + 16|0);
   HEAP32[$278>>2] = $277;
   $279 = ($$0$i12|0)==(0);
   if (!($279)) {
    $$0 = $$0$i12;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdMbPartPredMode($mbType) {
 $mbType = $mbType|0;
 var $$ = 0, $$0 = 0, $0 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mbType>>>0)<(6);
 if ($0) {
  $$0 = 2;
 } else {
  $not$ = ($mbType|0)!=(6);
  $$ = $not$&1;
  $$0 = $$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdNumMbPart($mbType) {
 $mbType = $mbType|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($mbType|0) == 3) | (($mbType|0) == 2)) {
  $$0 = 2;
 } else if ((($mbType|0) == 0) | (($mbType|0) == 1)) {
  $$0 = 1;
 } else {
  $$0 = 4;
 }
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdNumSubMbPart($subMbType) {
 $subMbType = $subMbType|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($subMbType|0) == 0)) {
  $$0 = 1;
 } else if ((($subMbType|0) == 2) | (($subMbType|0) == 1)) {
  $$0 = 2;
 } else {
  $$0 = 4;
 }
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdPredModeIntra16x16($mbType) {
 $mbType = $mbType|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($mbType) + 1)|0;
 $1 = $0 & 3;
 STACKTOP = sp;return ($1|0);
}
function _h264bsdDecodeMacroblock($pMb,$pMbLayer,$currImage,$dpb,$qpY,$mbNum,$constrainedIntraPredFlag,$data) {
 $pMb = $pMb|0;
 $pMbLayer = $pMbLayer|0;
 $currImage = $currImage|0;
 $dpb = $dpb|0;
 $qpY = $qpY|0;
 $mbNum = $mbNum|0;
 $constrainedIntraPredFlag = $constrainedIntraPredFlag|0;
 $data = $data|0;
 var $$0 = 0, $$0119$i = 0, $$111$i = 0, $$2$i = 0, $$32$i = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blockData$020$i = 0, $blockData$112$i = 0, $blockData$2$i = 0, $blockData$33$i = 0, $chromaDc$05$i = 0, $dcCoeffIdx$022$i = 0, $lev$011 = 0, $pData$09 = 0, $scevgep = 0, $scevgep24 = 0;
 var $switch$i = 0, $tot$110 = 0, $totalCoeff$021$i = 0, $totalCoeff$113$i = 0, $totalCoeff$2$i = 0, $totalCoeff$34$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pMbLayer>>2]|0;
 HEAP32[$pMb>>2] = $0;
 $1 = (($pMb) + 196|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$1>>2] = $3;
 _h264bsdSetCurrImageMbPointers($currImage,$mbNum);
 $4 = ($0|0)==(31);
 if ($4) {
  $5 = (($pMb) + 28|0);
  $6 = (($pMb) + 20|0);
  HEAP32[$6>>2] = 0;
  $7 = HEAP32[$1>>2]|0;
  $8 = ($7>>>0)>(1);
  if ($8) {
   $10 = (($pMb) + 30|0);
   HEAP16[$5>>1] = 16;
   $11 = (($pMb) + 32|0);
   HEAP16[$10>>1] = 16;
   $12 = (($pMb) + 34|0);
   HEAP16[$11>>1] = 16;
   $13 = (($pMb) + 36|0);
   HEAP16[$12>>1] = 16;
   $14 = (($pMb) + 38|0);
   HEAP16[$13>>1] = 16;
   $15 = (($pMb) + 40|0);
   HEAP16[$14>>1] = 16;
   $16 = (($pMb) + 42|0);
   HEAP16[$15>>1] = 16;
   $17 = (($pMb) + 44|0);
   HEAP16[$16>>1] = 16;
   $18 = (($pMb) + 46|0);
   HEAP16[$17>>1] = 16;
   $19 = (($pMb) + 48|0);
   HEAP16[$18>>1] = 16;
   $20 = (($pMb) + 50|0);
   HEAP16[$19>>1] = 16;
   $21 = (($pMb) + 52|0);
   HEAP16[$20>>1] = 16;
   $22 = (($pMb) + 54|0);
   HEAP16[$21>>1] = 16;
   $23 = (($pMb) + 56|0);
   HEAP16[$22>>1] = 16;
   $24 = (($pMb) + 58|0);
   HEAP16[$23>>1] = 16;
   $25 = (($pMb) + 60|0);
   HEAP16[$24>>1] = 16;
   $26 = (($pMb) + 62|0);
   HEAP16[$25>>1] = 16;
   $27 = (($pMb) + 64|0);
   HEAP16[$26>>1] = 16;
   $28 = (($pMb) + 66|0);
   HEAP16[$27>>1] = 16;
   $29 = (($pMb) + 68|0);
   HEAP16[$28>>1] = 16;
   $30 = (($pMb) + 70|0);
   HEAP16[$29>>1] = 16;
   $31 = (($pMb) + 72|0);
   HEAP16[$30>>1] = 16;
   $32 = (($pMb) + 74|0);
   HEAP16[$31>>1] = 16;
   HEAP16[$32>>1] = 16;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $9 = (($pMbLayer) + 328|0);
  $97 = 23;$lev$011 = $9;$pData$09 = $data;$tot$110 = $5;
  while(1) {
   HEAP16[$tot$110>>1] = 16;
   $scevgep = (($pData$09) + 16|0);
   $33 = (($lev$011) + 4|0);
   $34 = HEAP32[$lev$011>>2]|0;
   $35 = $34&255;
   $36 = (($pData$09) + 1|0);
   HEAP8[$pData$09>>0] = $35;
   $37 = (($lev$011) + 8|0);
   $38 = HEAP32[$33>>2]|0;
   $39 = $38&255;
   $40 = (($pData$09) + 2|0);
   HEAP8[$36>>0] = $39;
   $41 = (($lev$011) + 12|0);
   $42 = HEAP32[$37>>2]|0;
   $43 = $42&255;
   $44 = (($pData$09) + 3|0);
   HEAP8[$40>>0] = $43;
   $45 = (($lev$011) + 16|0);
   $46 = HEAP32[$41>>2]|0;
   $47 = $46&255;
   $48 = (($pData$09) + 4|0);
   HEAP8[$44>>0] = $47;
   $49 = (($lev$011) + 20|0);
   $50 = HEAP32[$45>>2]|0;
   $51 = $50&255;
   $52 = (($pData$09) + 5|0);
   HEAP8[$48>>0] = $51;
   $53 = (($lev$011) + 24|0);
   $54 = HEAP32[$49>>2]|0;
   $55 = $54&255;
   $56 = (($pData$09) + 6|0);
   HEAP8[$52>>0] = $55;
   $57 = (($lev$011) + 28|0);
   $58 = HEAP32[$53>>2]|0;
   $59 = $58&255;
   $60 = (($pData$09) + 7|0);
   HEAP8[$56>>0] = $59;
   $61 = (($lev$011) + 32|0);
   $62 = HEAP32[$57>>2]|0;
   $63 = $62&255;
   $64 = (($pData$09) + 8|0);
   HEAP8[$60>>0] = $63;
   $65 = (($lev$011) + 36|0);
   $66 = HEAP32[$61>>2]|0;
   $67 = $66&255;
   $68 = (($pData$09) + 9|0);
   HEAP8[$64>>0] = $67;
   $69 = (($lev$011) + 40|0);
   $70 = HEAP32[$65>>2]|0;
   $71 = $70&255;
   $72 = (($pData$09) + 10|0);
   HEAP8[$68>>0] = $71;
   $73 = (($lev$011) + 44|0);
   $74 = HEAP32[$69>>2]|0;
   $75 = $74&255;
   $76 = (($pData$09) + 11|0);
   HEAP8[$72>>0] = $75;
   $77 = (($lev$011) + 48|0);
   $78 = HEAP32[$73>>2]|0;
   $79 = $78&255;
   $80 = (($pData$09) + 12|0);
   HEAP8[$76>>0] = $79;
   $81 = (($lev$011) + 52|0);
   $82 = HEAP32[$77>>2]|0;
   $83 = $82&255;
   $84 = (($pData$09) + 13|0);
   HEAP8[$80>>0] = $83;
   $85 = (($lev$011) + 56|0);
   $86 = HEAP32[$81>>2]|0;
   $87 = $86&255;
   $88 = (($pData$09) + 14|0);
   HEAP8[$84>>0] = $87;
   $89 = (($lev$011) + 60|0);
   $90 = HEAP32[$85>>2]|0;
   $91 = $90&255;
   $92 = (($pData$09) + 15|0);
   HEAP8[$88>>0] = $91;
   $93 = HEAP32[$89>>2]|0;
   $94 = $93&255;
   HEAP8[$92>>0] = $94;
   $95 = (($tot$110) + 2|0);
   $scevgep24 = (($lev$011) + 64|0);
   $96 = (($97) + -1)|0;
   $98 = ($97|0)==(0);
   if ($98) {
    break;
   } else {
    $97 = $96;$lev$011 = $scevgep24;$pData$09 = $scevgep;$tot$110 = $95;
   }
  }
  _h264bsdWriteMacroblock($currImage,$data);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $99 = ($0|0)==(0);
 $100 = (($pMb) + 28|0);
 if ($99) {
  _H264SwDecMemset($100,0,54);
  $176 = HEAP32[$qpY>>2]|0;
  $177 = (($pMb) + 20|0);
  HEAP32[$177>>2] = $176;
  label = 37;
 } else {
  $101 = (($pMbLayer) + 272|0);
  _H264SwDecMemcpy($100,$101,54);
  $102 = (($pMbLayer) + 8|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)==(0);
  $$pre = HEAP32[$qpY>>2]|0;
  do {
   if ($104) {
    $111 = $$pre;
   } else {
    $105 = (($$pre) + ($103))|0;
    HEAP32[$qpY>>2] = $105;
    $106 = ($105|0)<(0);
    if ($106) {
     $107 = (($105) + 52)|0;
     HEAP32[$qpY>>2] = $107;
     $111 = $107;
     break;
    }
    $108 = ($105|0)>(51);
    if ($108) {
     $109 = (($105) + -52)|0;
     HEAP32[$qpY>>2] = $109;
     $111 = $109;
    } else {
     $111 = $105;
    }
   }
  } while(0);
  $110 = (($pMb) + 20|0);
  HEAP32[$110>>2] = $111;
  $112 = (($pMbLayer) + 328|0);
  $113 = (($pMbLayer) + 1992|0);
  $114 = HEAP32[$pMb>>2]|0;
  $switch$i = ($114>>>0)<(7);
  L21: do {
   if ($switch$i) {
    $$111$i = $113;$146 = 15;$blockData$112$i = $112;$totalCoeff$113$i = $100;
    while(1) {
     $136 = HEAP16[$totalCoeff$113$i>>1]|0;
     $137 = ($136<<16>>16)==(0);
     if ($137) {
      HEAP32[$blockData$112$i>>2] = 16777215;
     } else {
      $138 = HEAP32[$110>>2]|0;
      $139 = HEAP32[$$111$i>>2]|0;
      $140 = (_h264bsdProcessBlock($blockData$112$i,$138,0,$139)|0);
      $141 = ($140|0)==(0);
      if (!($141)) {
       $$0 = 1;
       break;
      }
     }
     $142 = (($blockData$112$i) + 64|0);
     $143 = (($totalCoeff$113$i) + 2|0);
     $144 = (($$111$i) + 4|0);
     $145 = (($146) + -1)|0;
     $147 = ($146|0)==(0);
     if ($147) {
      $$2$i = $144;$blockData$2$i = $142;$totalCoeff$2$i = $143;
      break L21;
     } else {
      $$111$i = $144;$146 = $145;$blockData$112$i = $142;$totalCoeff$113$i = $143;
     }
    }
    STACKTOP = sp;return ($$0|0);
   } else {
    $115 = (($pMb) + 76|0);
    $116 = HEAP16[$115>>1]|0;
    $117 = ($116<<16>>16)==(0);
    if ($117) {
     $$0119$i = $113;$134 = 15;$blockData$020$i = $112;$dcCoeffIdx$022$i = 464;$totalCoeff$021$i = $100;
    } else {
     $118 = (($pMbLayer) + 1864|0);
     _h264bsdProcessLumaDc($118,$111);
     $$0119$i = $113;$134 = 15;$blockData$020$i = $112;$dcCoeffIdx$022$i = 464;$totalCoeff$021$i = $100;
    }
    while(1) {
     $119 = (($dcCoeffIdx$022$i) + 4|0);
     $120 = HEAP32[$dcCoeffIdx$022$i>>2]|0;
     $121 = ((($pMbLayer) + ($120<<2)|0) + 1864|0);
     $122 = HEAP32[$121>>2]|0;
     HEAP32[$blockData$020$i>>2] = $122;
     $123 = ($122|0)==(0);
     if ($123) {
      $124 = HEAP16[$totalCoeff$021$i>>1]|0;
      $125 = ($124<<16>>16)==(0);
      if ($125) {
       HEAP32[$blockData$020$i>>2] = 16777215;
      } else {
       label = 18;
      }
     } else {
      label = 18;
     }
     if ((label|0) == 18) {
      label = 0;
      $126 = HEAP32[$110>>2]|0;
      $127 = HEAP32[$$0119$i>>2]|0;
      $128 = (_h264bsdProcessBlock($blockData$020$i,$126,1,$127)|0);
      $129 = ($128|0)==(0);
      if (!($129)) {
       $$0 = 1;
       break;
      }
     }
     $130 = (($blockData$020$i) + 64|0);
     $131 = (($totalCoeff$021$i) + 2|0);
     $132 = (($$0119$i) + 4|0);
     $133 = (($134) + -1)|0;
     $135 = ($134|0)==(0);
     if ($135) {
      $$2$i = $132;$blockData$2$i = $130;$totalCoeff$2$i = $131;
      break L21;
     } else {
      $$0119$i = $132;$134 = $133;$blockData$020$i = $130;$dcCoeffIdx$022$i = $119;$totalCoeff$021$i = $131;
     }
    }
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $148 = HEAP32[$110>>2]|0;
  $149 = (($pMb) + 24|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($150) + ($148))|0;
  $152 = (_clip(0,51,$151)|0);
  $153 = (192 + ($152<<2)|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (($pMb) + 78|0);
  $156 = HEAP16[$155>>1]|0;
  $157 = ($156<<16>>16)==(0);
  if ($157) {
   $158 = (($pMb) + 80|0);
   $159 = HEAP16[$158>>1]|0;
   $160 = ($159<<16>>16)==(0);
   if ($160) {
    $$pre$i = (($pMbLayer) + 1928|0);
    $$32$i = $$2$i;$174 = 7;$blockData$33$i = $blockData$2$i;$chromaDc$05$i = $$pre$i;$totalCoeff$34$i = $totalCoeff$2$i;
   } else {
    label = 28;
   }
  } else {
   label = 28;
  }
  if ((label|0) == 28) {
   $161 = (($pMbLayer) + 1928|0);
   _h264bsdProcessChromaDc($161,$154);
   $$32$i = $$2$i;$174 = 7;$blockData$33$i = $blockData$2$i;$chromaDc$05$i = $161;$totalCoeff$34$i = $totalCoeff$2$i;
  }
  while(1) {
   $162 = (($chromaDc$05$i) + 4|0);
   $163 = HEAP32[$chromaDc$05$i>>2]|0;
   HEAP32[$blockData$33$i>>2] = $163;
   $164 = ($163|0)==(0);
   if ($164) {
    $165 = HEAP16[$totalCoeff$34$i>>1]|0;
    $166 = ($165<<16>>16)==(0);
    if ($166) {
     HEAP32[$blockData$33$i>>2] = 16777215;
    } else {
     label = 31;
    }
   } else {
    label = 31;
   }
   if ((label|0) == 31) {
    label = 0;
    $167 = HEAP32[$$32$i>>2]|0;
    $168 = (_h264bsdProcessBlock($blockData$33$i,$154,1,$167)|0);
    $169 = ($168|0)==(0);
    if (!($169)) {
     $$0 = 1;
     label = 39;
     break;
    }
   }
   $170 = (($blockData$33$i) + 64|0);
   $171 = (($totalCoeff$34$i) + 2|0);
   $172 = (($$32$i) + 4|0);
   $173 = (($174) + -1)|0;
   $175 = ($174|0)==(0);
   if ($175) {
    break;
   } else {
    $$32$i = $172;$174 = $173;$blockData$33$i = $170;$chromaDc$05$i = $162;$totalCoeff$34$i = $171;
   }
  }
  if ((label|0) == 39) {
   STACKTOP = sp;return ($$0|0);
  }
  $178 = ($0>>>0)<(6);
  if ($178) {
   label = 37;
  } else {
   $179 = (_h264bsdIntraPrediction($pMb,$pMbLayer,$currImage,$mbNum,$constrainedIntraPredFlag,$data)|0);
   $180 = ($179|0)==(0);
   if (!($180)) {
    $$0 = $179;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 if ((label|0) == 37) {
  $181 = (_h264bsdInterPrediction($pMb,$pMbLayer,$dpb,$mbNum,$currImage,$data)|0);
  $182 = ($181|0)==(0);
  if (!($182)) {
   $$0 = $181;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdSubMbPartMode($subMbType) {
 $subMbType = $subMbType|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($subMbType|0);
}
function _DetermineNc($pMb,$blockIndex,$pTotalCoeff) {
 $pMb = $pMb|0;
 $blockIndex = $blockIndex|0;
 $pTotalCoeff = $pTotalCoeff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $n$0 = 0, $n$1 = 0, $tmp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_h264bsdNeighbour4x4BlockA($blockIndex)|0);
 $1 = (_h264bsdNeighbour4x4BlockB($blockIndex)|0);
 $2 = (($0) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = (($1) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ($6|0)==(4);
 $8 = HEAP32[$1>>2]|0;
 $9 = ($8|0)==(4);
 if ($7) {
  $10 = $3&255;
  $11 = (($pTotalCoeff) + ($10<<1)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  if ($9) {
   $14 = $5&255;
   $15 = (($pTotalCoeff) + ($14<<1)|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = $16 << 16 >> 16;
   $18 = (($13) + 1)|0;
   $19 = (($18) + ($17))|0;
   $20 = $19 >> 1;
   $n$1 = $20;
   STACKTOP = sp;return ($n$1|0);
  }
  $21 = (($pMb) + 204|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_h264bsdIsNeighbourAvailable($pMb,$22)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   $n$1 = $13;
   STACKTOP = sp;return ($n$1|0);
  }
  $25 = $5&255;
  $26 = HEAP32[$21>>2]|0;
  $27 = ((($26) + ($25<<1)|0) + 28|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28 << 16 >> 16;
  $30 = (($13) + 1)|0;
  $31 = (($30) + ($29))|0;
  $32 = $31 >> 1;
  $n$1 = $32;
  STACKTOP = sp;return ($n$1|0);
 }
 if ($9) {
  $33 = $5&255;
  $34 = (($pTotalCoeff) + ($33<<1)|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = (($pMb) + 200|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_h264bsdIsNeighbourAvailable($pMb,$38)|0);
  $40 = ($39|0)==(0);
  if ($40) {
   $n$1 = $36;
   STACKTOP = sp;return ($n$1|0);
  }
  $41 = $3&255;
  $42 = HEAP32[$37>>2]|0;
  $43 = ((($42) + ($41<<1)|0) + 28|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 << 16 >> 16;
  $46 = (($36) + 1)|0;
  $47 = (($46) + ($45))|0;
  $48 = $47 >> 1;
  $n$1 = $48;
  STACKTOP = sp;return ($n$1|0);
 }
 $49 = (($pMb) + 200|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (_h264bsdIsNeighbourAvailable($pMb,$50)|0);
 $52 = ($51|0)==(0);
 if ($52) {
  $n$0 = 0;$tmp$0 = 0;
 } else {
  $53 = $3&255;
  $54 = HEAP32[$49>>2]|0;
  $55 = ((($54) + ($53<<1)|0) + 28|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56 << 16 >> 16;
  $n$0 = $57;$tmp$0 = 1;
 }
 $58 = (($pMb) + 204|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (_h264bsdIsNeighbourAvailable($pMb,$59)|0);
 $61 = ($60|0)==(0);
 if ($61) {
  $n$1 = $n$0;
  STACKTOP = sp;return ($n$1|0);
 }
 $62 = ($tmp$0|0)==(0);
 $63 = $5&255;
 $64 = HEAP32[$58>>2]|0;
 $65 = ((($64) + ($63<<1)|0) + 28|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = $66 << 16 >> 16;
 if ($62) {
  $n$1 = $67;
  STACKTOP = sp;return ($n$1|0);
 }
 $68 = (($n$0) + 1)|0;
 $69 = (($68) + ($67))|0;
 $70 = $69 >> 1;
 $n$1 = $70;
 STACKTOP = sp;return ($n$1|0);
}
function _h264bsdGetBits($pStrmData,$numBits) {
 $pStrmData = $pStrmData|0;
 $numBits = $numBits|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_h264bsdShowBits32($pStrmData)|0);
 $1 = (($pStrmData) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($numBits))|0;
 HEAP32[$1>>2] = $3;
 $4 = $3 & 7;
 $5 = (($pStrmData) + 8|0);
 HEAP32[$5>>2] = $4;
 $6 = (($pStrmData) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 << 3;
 $9 = ($3>>>0)>($8>>>0);
 if ($9) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP32[$pStrmData>>2]|0;
 $11 = $3 >>> 3;
 $12 = (($10) + ($11)|0);
 $13 = (($pStrmData) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (32 - ($numBits))|0;
 $15 = $0 >>> $14;
 $$0 = $15;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdShowBits32($pStrmData) {
 $pStrmData = $pStrmData|0;
 var $$0 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits$04 = 0, $out$12 = 0, $pStrm$05 = 0, $shift$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pStrmData) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pStrmData) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 << 3;
 $5 = (($pStrmData) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7|0)>(31);
 if ($8) {
  $9 = (($pStrmData) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP8[$1>>0]|0;
  $12 = $11&255;
  $13 = $12 << 24;
  $14 = (($1) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 << 16;
  $18 = $17 | $13;
  $19 = (($1) + 2|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $21 << 8;
  $23 = $18 | $22;
  $24 = (($1) + 3|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $23 | $26;
  $28 = ($10|0)==(0);
  if ($28) {
   $$0 = $27;
   STACKTOP = sp;return ($$0|0);
  }
  $29 = (($1) + 4|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = (8 - ($10))|0;
  $33 = $27 << $10;
  $34 = $31 >>> $32;
  $35 = $34 | $33;
  $$0 = $35;
  STACKTOP = sp;return ($$0|0);
 }
 $36 = ($7|0)>(0);
 if (!($36)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($pStrmData) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 24)|0;
 $40 = HEAP8[$1>>0]|0;
 $41 = $40&255;
 $42 = $41 << $39;
 $43 = (($7) + -8)|0;
 $44 = (($43) + ($38))|0;
 $45 = ($44|0)>(0);
 if ($45) {
  $$pn = $1;$bits$04 = $44;$out$12 = $42;$shift$03 = $39;
 } else {
  $$0 = $42;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $pStrm$05 = (($$pn) + 1|0);
  $46 = (($shift$03) + -8)|0;
  $47 = HEAP8[$pStrm$05>>0]|0;
  $48 = $47&255;
  $49 = $48 << $46;
  $50 = $49 | $out$12;
  $51 = (($bits$04) + -8)|0;
  $52 = ($51|0)>(0);
  if ($52) {
   $$pn = $pStrm$05;$bits$04 = $51;$out$12 = $50;$shift$03 = $46;
  } else {
   $$0 = $50;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdFlushBits($pStrmData,$numBits) {
 $pStrmData = $pStrmData|0;
 $numBits = $numBits|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStrmData) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($numBits))|0;
 HEAP32[$0>>2] = $2;
 $3 = $2 & 7;
 $4 = (($pStrmData) + 8|0);
 HEAP32[$4>>2] = $3;
 $5 = (($pStrmData) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 << 3;
 $8 = ($2>>>0)>($7>>>0);
 if ($8) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[$pStrmData>>2]|0;
 $10 = $2 >>> 3;
 $11 = (($9) + ($10)|0);
 $12 = (($pStrmData) + 4|0);
 HEAP32[$12>>2] = $11;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdIsByteAligned($pStrmData) {
 $pStrmData = $pStrmData|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStrmData) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $$ = $2&1;
 STACKTOP = sp;return ($$|0);
}
function _h264bsdDecodeExpGolombUnsigned($pStrmData,$codeNum) {
 $pStrmData = $pStrmData|0;
 $codeNum = $codeNum|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_h264bsdShowBits32($pStrmData)|0);
 $1 = ($0|0)<(0);
 do {
  if ($1) {
   (_h264bsdFlushBits($pStrmData,1)|0);
   HEAP32[$codeNum>>2] = 0;
   $$0 = 0;
  } else {
   $2 = ($0>>>0)>(1073741823);
   if ($2) {
    $3 = (_h264bsdFlushBits($pStrmData,3)|0);
    $4 = ($3|0)==(-1);
    if ($4) {
     $$0 = 1;
     break;
    }
    $5 = $0 >>> 29;
    $6 = $5 & 1;
    $7 = (($6) + 1)|0;
    HEAP32[$codeNum>>2] = $7;
    $$0 = 0;
    break;
   }
   $8 = ($0>>>0)>(536870911);
   if ($8) {
    $9 = (_h264bsdFlushBits($pStrmData,5)|0);
    $10 = ($9|0)==(-1);
    if ($10) {
     $$0 = 1;
     break;
    }
    $11 = $0 >>> 27;
    $12 = $11 & 3;
    $13 = (($12) + 3)|0;
    HEAP32[$codeNum>>2] = $13;
    $$0 = 0;
    break;
   }
   $14 = ($0>>>0)>(268435455);
   if ($14) {
    $15 = (_h264bsdFlushBits($pStrmData,7)|0);
    $16 = ($15|0)==(-1);
    if ($16) {
     $$0 = 1;
     break;
    }
    $17 = $0 >>> 25;
    $18 = $17 & 7;
    $19 = (($18) + 7)|0;
    HEAP32[$codeNum>>2] = $19;
    $$0 = 0;
    break;
   }
   $20 = (_h264bsdCountLeadingZeros($0,28)|0);
   $21 = (($20) + 4)|0;
   $22 = ($21|0)==(32);
   if (!($22)) {
    $28 = (($20) + 5)|0;
    (_h264bsdFlushBits($pStrmData,$28)|0);
    $29 = (_h264bsdGetBits($pStrmData,$21)|0);
    $30 = ($29|0)==(-1);
    if ($30) {
     $$0 = 1;
     break;
    }
    $31 = 1 << $21;
    $32 = (($31) + -1)|0;
    $33 = (($32) + ($29))|0;
    HEAP32[$codeNum>>2] = $33;
    $$0 = 0;
    break;
   }
   HEAP32[$codeNum>>2] = 0;
   (_h264bsdFlushBits($pStrmData,32)|0);
   $23 = (_h264bsdGetBits($pStrmData,1)|0);
   $24 = ($23|0)==(1);
   if ($24) {
    $25 = (_h264bsdShowBits32($pStrmData)|0);
    $26 = (_h264bsdFlushBits($pStrmData,32)|0);
    $27 = ($26|0)==(-1);
    if ($27) {
     $$0 = 1;
    } else {
     if ((($25|0) == 1)) {
      HEAP32[$codeNum>>2] = -1;
      $$0 = 1;
      break;
     } else if ((($25|0) == 0)) {
      HEAP32[$codeNum>>2] = -1;
      $$0 = 0;
      break;
     } else {
      $$0 = 1;
      break;
     }
    }
   } else {
    $$0 = 1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDecodeExpGolombSigned($pStrmData,$value) {
 $pStrmData = $pStrmData|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $codeNum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $codeNum = sp;
 HEAP32[$codeNum>>2] = 0;
 $0 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$codeNum)|0);
 $1 = HEAP32[$codeNum>>2]|0;
 $2 = ($1|0)==(-1);
 $3 = ($0|0)==(0);
 if ($2) {
  if ($3) {
   $$0 = 1;
  } else {
   HEAP32[$value>>2] = -2147483648;
   $$0 = 0;
  }
 } else {
  if ($3) {
   $4 = $1 & 1;
   $5 = ($4|0)!=(0);
   $6 = (($1) + 1)|0;
   $7 = $6 >>> 1;
   $8 = (0 - ($7))|0;
   $9 = $5 ? $7 : $8;
   HEAP32[$value>>2] = $9;
   $$0 = 0;
  } else {
   $$0 = 1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDecodeExpGolombMapped($pStrmData,$value,$isIntra) {
 $pStrmData = $pStrmData|0;
 $value = $value|0;
 $isIntra = $isIntra|0;
 var $$0 = 0, $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $codeNum = 0, $codedBlockPatternInter$codedBlockPatternIntra4x4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $codeNum = sp;
 $0 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$codeNum)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$codeNum>>2]|0;
 $3 = ($2>>>0)>(47);
 if ($3) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ($isIntra|0)==(0);
 $codedBlockPatternInter$codedBlockPatternIntra4x4 = $4 ? 576 : 528;
 $$sink$in = (($codedBlockPatternInter$codedBlockPatternIntra4x4) + ($2)|0);
 $$sink = HEAP8[$$sink$in>>0]|0;
 $5 = $$sink&255;
 HEAP32[$value>>2] = $5;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDecodeExpGolombTruncated($pStrmData,$value,$greaterThanOne) {
 $pStrmData = $pStrmData|0;
 $value = $value|0;
 $greaterThanOne = $greaterThanOne|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($greaterThanOne|0)==(0);
 if ($0) {
  $2 = (_h264bsdGetBits($pStrmData,1)|0);
  HEAP32[$value>>2] = $2;
  $3 = ($2|0)==(-1);
  if ($3) {
   $$0 = 1;
  } else {
   $4 = $2 ^ 1;
   HEAP32[$value>>2] = $4;
   $$0 = 0;
  }
 } else {
  $1 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDecodeResidualBlockCavlc($pStrmData,$coeffLevel,$nc,$maxNumCoeff) {
 $pStrmData = $pStrmData|0;
 $coeffLevel = $coeffLevel|0;
 $nc = $nc|0;
 $maxNumCoeff = $maxNumCoeff|0;
 var $$ = 0, $$$i = 0, $$$i8 = 0, $$0 = 0, $$34 = 0, $$629 = 0, $$cmp$i = 0, $$levelPrefix$1 = 0, $$ph = 0, $$ph23 = 0, $$suffixLength$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bufferBits$1 = 0;
 var $bufferBits$10 = 0, $bufferBits$11 = 0, $bufferBits$12 = 0, $bufferBits$2 = 0, $bufferBits$3$lcssa = 0, $bufferBits$355 = 0, $bufferBits$4 = 0, $bufferBits$5 = 0, $bufferBits$6 = 0, $bufferBits$7 = 0, $bufferBits$9$ph = 0, $bufferBits$944 = 0, $bufferValue$1 = 0, $bufferValue$10 = 0, $bufferValue$11 = 0, $bufferValue$2 = 0, $bufferValue$3$lcssa = 0, $bufferValue$354 = 0, $bufferValue$4 = 0, $bufferValue$5 = 0;
 var $bufferValue$6 = 0, $bufferValue$7 = 0, $bufferValue$9$ph = 0, $bufferValue$943 = 0, $i$063 = 0, $i$1 = 0, $i$252 = 0, $i$340 = 0, $level = 0, $levelPrefix$1 = 0, $levelSuffix$036 = 0, $levelSuffix$1 = 0, $numZeros$0$i$ph$ph = 0, $numZeros$0$i$ph13$ph = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $run = 0, $suffixLength$0$ = 0, $suffixLength$0$32 = 0;
 var $suffixLength$053 = 0, $suffixLength$2$ph = 0, $suffixLength$227 = 0, $suffixLength$228 = 0, $suffixLength$3 = 0, $tmp$062 = 0, $tmp$1$ph = 0, $tmp$126 = 0, $tmp$335 = 0, $value$0$i = 0, $value$0$i10 = 0, $value$0$i7 = 0, $value$0$i9 = 0, $value$0$i930 = 0, $zerosLeft$1$ph = 0, $zerosLeft$141 = 0, $zerosLeft$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $level = sp + 64|0;
 $run = sp;
 $0 = (_h264bsdShowBits32($pStrmData)|0);
 $1 = $0 >>> 16;
 $2 = ($nc>>>0)<(2);
 do {
  if ($2) {
   $3 = ($0|0)<(0);
   if ($3) {
    $value$0$i10 = 1;
   } else {
    $4 = ($0>>>0)>(201326591);
    if ($4) {
     $5 = $0 >>> 26;
     $6 = (1264 + ($5<<1)|0);
     $7 = HEAP16[$6>>1]|0;
     $8 = $7&65535;
     $value$0$i = $8;
     label = 25;
     break;
    }
    $9 = ($0>>>0)>(16777215);
    if ($9) {
     $10 = $0 >>> 22;
     $11 = (1328 + ($10<<1)|0);
     $12 = HEAP16[$11>>1]|0;
     $13 = $12&65535;
     $value$0$i = $13;
     label = 25;
     break;
    }
    $14 = ($0>>>0)>(2097151);
    if ($14) {
     $15 = $0 >>> 18;
     $16 = (($15) + -8)|0;
     $17 = (1424 + ($16<<1)|0);
     $18 = HEAP16[$17>>1]|0;
     $19 = $18&65535;
     $value$0$i = $19;
     label = 25;
     break;
    } else {
     $20 = (1536 + ($1<<1)|0);
     $21 = HEAP16[$20>>1]|0;
     $22 = $21&65535;
     $value$0$i = $22;
     label = 25;
     break;
    }
   }
  } else {
   $23 = ($nc>>>0)<(4);
   if ($23) {
    $24 = ($0|0)<(0);
    if ($24) {
     $25 = $1 & 16384;
     $26 = ($25|0)!=(0);
     $27 = $26 ? 2 : 2082;
     $value$0$i10 = $27;
     break;
    }
    $28 = ($0>>>0)>(268435455);
    if ($28) {
     $29 = $0 >>> 26;
     $30 = (1600 + ($29<<1)|0);
     $31 = HEAP16[$30>>1]|0;
     $32 = $31&65535;
     $value$0$i = $32;
     label = 25;
     break;
    }
    $33 = ($0>>>0)>(33554431);
    if ($33) {
     $34 = $0 >>> 23;
     $35 = (1664 + ($34<<1)|0);
     $36 = HEAP16[$35>>1]|0;
     $37 = $36&65535;
     $value$0$i = $37;
     label = 25;
     break;
    } else {
     $38 = $0 >>> 18;
     $39 = (1728 + ($38<<1)|0);
     $40 = HEAP16[$39>>1]|0;
     $41 = $40&65535;
     $value$0$i = $41;
     label = 25;
     break;
    }
   } else {
    $42 = ($nc>>>0)<(8);
    if ($42) {
     $43 = $0 >>> 26;
     $44 = (1984 + ($43<<1)|0);
     $45 = HEAP16[$44>>1]|0;
     $46 = $45&65535;
     $47 = (($43) + -8)|0;
     $48 = ($47>>>0)<(56);
     if ($48) {
      $value$0$i = $46;
      label = 25;
      break;
     }
     $49 = $0 >>> 22;
     $50 = (2112 + ($49<<1)|0);
     $51 = HEAP16[$50>>1]|0;
     $52 = $51&65535;
     $value$0$i = $52;
     label = 25;
     break;
    }
    $53 = ($nc>>>0)<(17);
    if ($53) {
     $54 = $0 >>> 26;
     $55 = (2368 + ($54<<1)|0);
     $56 = HEAP16[$55>>1]|0;
     $57 = $56&65535;
     $value$0$i = $57;
     label = 25;
     break;
    }
    $58 = $0 >>> 29;
    $59 = (2496 + ($58<<1)|0);
    $60 = HEAP16[$59>>1]|0;
    $61 = $60&65535;
    $62 = ($58|0)==(0);
    if (!($62)) {
     $value$0$i = $61;
     label = 25;
     break;
    }
    $63 = $0 >>> 24;
    $64 = (2512 + ($63<<1)|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65&65535;
    $value$0$i = $66;
    label = 25;
    break;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $67 = ($value$0$i|0)==(0);
  if ($67) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $value$0$i10 = $value$0$i;
  }
 }
 $68 = $value$0$i10 & 31;
 $69 = $0 << $68;
 $70 = (32 - ($68))|0;
 $71 = $value$0$i10 >>> 11;
 $72 = $71 & 31;
 $73 = ($72>>>0)>($maxNumCoeff>>>0);
 if ($73) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $74 = $value$0$i10 >>> 5;
 $75 = $74 & 63;
 $76 = ($72|0)==(0);
 do {
  if ($76) {
   $bufferBits$12 = $70;$levelSuffix$1 = 0;
  } else {
   $77 = ($75|0)==(0);
   if ($77) {
    $bufferBits$2 = $70;$bufferValue$2 = $69;$i$1 = 0;
   } else {
    $78 = ($70>>>0)<($75>>>0);
    do {
     if ($78) {
      $79 = (_h264bsdFlushBits($pStrmData,$68)|0);
      $80 = ($79|0)==(-1);
      if ($80) {
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      } else {
       $81 = (_h264bsdShowBits32($pStrmData)|0);
       $bufferBits$1 = 32;$bufferValue$1 = $81;
       break;
      }
     } else {
      $bufferBits$1 = $70;$bufferValue$1 = $69;
     }
    } while(0);
    $82 = (32 - ($75))|0;
    $83 = $bufferValue$1 >>> $82;
    $84 = $bufferValue$1 << $75;
    $85 = (($75) + -1)|0;
    $86 = 1 << $85;
    $i$063 = 0;$tmp$062 = $86;
    while(1) {
     $87 = $tmp$062 & $83;
     $88 = ($87|0)!=(0);
     $89 = $88 ? -1 : 1;
     $90 = (($level) + ($i$063<<2)|0);
     HEAP32[$90>>2] = $89;
     $91 = $tmp$062 >>> 1;
     $92 = (($i$063) + 1)|0;
     $93 = ($91|0)==(0);
     if ($93) {
      break;
     } else {
      $i$063 = $92;$tmp$062 = $91;
     }
    }
    $94 = (($bufferBits$1) - ($75))|0;
    $bufferBits$2 = $94;$bufferValue$2 = $84;$i$1 = $92;
   }
   $95 = ($75>>>0)<(3);
   $96 = ($i$1>>>0)<($72>>>0);
   L55: do {
    if ($96) {
     $97 = ($72>>>0)>(10);
     $or$cond = $97 & $95;
     $$ = $or$cond&1;
     $bufferBits$355 = $bufferBits$2;$bufferValue$354 = $bufferValue$2;$i$252 = $i$1;$suffixLength$053 = $$;
     L57: while(1) {
      $98 = ($bufferBits$355>>>0)<(16);
      if ($98) {
       $99 = (32 - ($bufferBits$355))|0;
       $100 = (_h264bsdFlushBits($pStrmData,$99)|0);
       $101 = ($100|0)==(-1);
       if ($101) {
        $$0 = 1;
        label = 127;
        break;
       }
       $102 = (_h264bsdShowBits32($pStrmData)|0);
       $bufferBits$4 = 32;$bufferValue$4 = $102;
      } else {
       $bufferBits$4 = $bufferBits$355;$bufferValue$4 = $bufferValue$354;
      }
      $103 = ($bufferValue$4|0)<(0);
      do {
       if ($103) {
        $numZeros$0$i$ph$ph = 0;
        label = 59;
       } else {
        $104 = ($bufferValue$4>>>0)>(1073741823);
        if ($104) {
         $numZeros$0$i$ph$ph = 1;
         label = 59;
        } else {
         $105 = ($bufferValue$4>>>0)>(536870911);
         if ($105) {
          $numZeros$0$i$ph$ph = 2;
          label = 59;
         } else {
          $106 = ($bufferValue$4>>>0)>(268435455);
          if ($106) {
           $numZeros$0$i$ph$ph = 3;
           label = 59;
          } else {
           $107 = ($bufferValue$4>>>0)>(134217727);
           if ($107) {
            $numZeros$0$i$ph$ph = 4;
            label = 59;
           } else {
            $108 = ($bufferValue$4>>>0)>(67108863);
            if ($108) {
             $numZeros$0$i$ph$ph = 5;
             label = 59;
            } else {
             $109 = ($bufferValue$4>>>0)>(33554431);
             if ($109) {
              $numZeros$0$i$ph$ph = 6;
              label = 59;
             } else {
              $110 = ($bufferValue$4>>>0)>(16777215);
              if ($110) {
               $numZeros$0$i$ph$ph = 7;
               label = 59;
              } else {
               $111 = ($bufferValue$4>>>0)>(8388607);
               if ($111) {
                $numZeros$0$i$ph$ph = 8;
                label = 59;
               } else {
                $112 = ($bufferValue$4>>>0)>(4194303);
                if ($112) {
                 $numZeros$0$i$ph$ph = 9;
                 label = 59;
                } else {
                 $113 = ($bufferValue$4>>>0)>(2097151);
                 if ($113) {
                  $numZeros$0$i$ph$ph = 10;
                  label = 59;
                  break;
                 }
                 $114 = ($bufferValue$4>>>0)>(1048575);
                 if ($114) {
                  $numZeros$0$i$ph$ph = 11;
                  label = 59;
                  break;
                 }
                 $115 = ($bufferValue$4>>>0)>(524287);
                 if ($115) {
                  $numZeros$0$i$ph$ph = 12;
                  label = 59;
                  break;
                 }
                 $116 = ($bufferValue$4>>>0)>(262143);
                 if ($116) {
                  $numZeros$0$i$ph$ph = 13;
                  label = 59;
                  break;
                 }
                 $117 = ($bufferValue$4>>>0)>(131071);
                 if ($117) {
                  $119 = $bufferValue$4 << 15;
                  $120 = (($bufferBits$4) + -15)|0;
                  $121 = ($suffixLength$053|0)!=(0);
                  $suffixLength$0$32 = $121 ? $suffixLength$053 : 4;
                  $$ph = $120;$$ph23 = $119;$numZeros$0$i$ph13$ph = 14;$suffixLength$2$ph = $suffixLength$053;$tmp$1$ph = $suffixLength$0$32;
                 } else {
                  $118 = ($bufferValue$4>>>0)<(65536);
                  if ($118) {
                   $$0 = 1;
                   label = 127;
                   break L57;
                  }
                  $122 = $bufferValue$4 << 16;
                  $123 = (($bufferBits$4) + -16)|0;
                  $124 = ($suffixLength$053|0)!=(0);
                  $suffixLength$0$ = $124 ? $suffixLength$053 : 1;
                  $$ph = $123;$$ph23 = $122;$numZeros$0$i$ph13$ph = 15;$suffixLength$2$ph = $suffixLength$0$;$tmp$1$ph = 12;
                 }
                 $125 = ($suffixLength$2$ph|0)==(0);
                 $126 = $numZeros$0$i$ph13$ph << $suffixLength$2$ph;
                 $$629 = $126;$132 = $$ph;$326 = $125;$327 = $$ph23;$suffixLength$227 = $suffixLength$2$ph;$tmp$126 = $tmp$1$ph;
                 label = 60;
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      } while(0);
      if ((label|0) == 59) {
       label = 0;
       $127 = (($numZeros$0$i$ph$ph) + 1)|0;
       $128 = $bufferValue$4 << $127;
       $129 = (($bufferBits$4) - ($127))|0;
       $130 = ($suffixLength$053|0)==(0);
       $131 = $numZeros$0$i$ph$ph << $suffixLength$053;
       if ($130) {
        $148 = 1;$bufferBits$6 = $129;$bufferValue$6 = $128;$levelPrefix$1 = $131;$suffixLength$228 = 0;
       } else {
        $$629 = $131;$132 = $129;$326 = 0;$327 = $128;$suffixLength$227 = $suffixLength$053;$tmp$126 = $suffixLength$053;
        label = 60;
       }
      }
      if ((label|0) == 60) {
       label = 0;
       $133 = ($132>>>0)<($tmp$126>>>0);
       if ($133) {
        $134 = (32 - ($132))|0;
        $135 = (_h264bsdFlushBits($pStrmData,$134)|0);
        $136 = ($135|0)==(-1);
        if ($136) {
         $$0 = 1;
         label = 127;
         break;
        }
        $137 = (_h264bsdShowBits32($pStrmData)|0);
        $bufferBits$5 = 32;$bufferValue$5 = $137;
       } else {
        $bufferBits$5 = $132;$bufferValue$5 = $327;
       }
       $138 = (32 - ($tmp$126))|0;
       $139 = $bufferValue$5 >>> $138;
       $140 = $bufferValue$5 << $tmp$126;
       $141 = (($bufferBits$5) - ($tmp$126))|0;
       $142 = (($139) + ($$629))|0;
       $148 = $326;$bufferBits$6 = $141;$bufferValue$6 = $140;$levelPrefix$1 = $142;$suffixLength$228 = $suffixLength$227;
      }
      $143 = ($i$252|0)==($75|0);
      $or$cond3 = $143 & $95;
      $144 = (($levelPrefix$1) + 2)|0;
      $$levelPrefix$1 = $or$cond3 ? $144 : $levelPrefix$1;
      $145 = (($$levelPrefix$1) + 2)|0;
      $146 = $145 >>> 1;
      $147 = (($level) + ($i$252<<2)|0);
      $suffixLength$3 = $148 ? 1 : $suffixLength$228;
      $149 = (($suffixLength$3) + -1)|0;
      $150 = 3 << $149;
      $151 = ($146|0)>($150|0);
      $152 = ($suffixLength$3>>>0)<(6);
      $or$cond5 = $151 & $152;
      $153 = $or$cond5&1;
      $$suffixLength$3 = (($153) + ($suffixLength$3))|0;
      $154 = $$levelPrefix$1 & 1;
      $155 = ($154|0)==(0);
      $156 = (0 - ($146))|0;
      $$34 = $155 ? $146 : $156;
      HEAP32[$147>>2] = $$34;
      $157 = (($i$252) + 1)|0;
      $158 = ($157>>>0)<($72>>>0);
      if ($158) {
       $bufferBits$355 = $bufferBits$6;$bufferValue$354 = $bufferValue$6;$i$252 = $157;$suffixLength$053 = $$suffixLength$3;
      } else {
       $bufferBits$3$lcssa = $bufferBits$6;$bufferValue$3$lcssa = $bufferValue$6;
       break L55;
      }
     }
     if ((label|0) == 127) {
      STACKTOP = sp;return ($$0|0);
     }
    } else {
     $bufferBits$3$lcssa = $bufferBits$2;$bufferValue$3$lcssa = $bufferValue$2;
    }
   } while(0);
   $159 = ($72>>>0)<($maxNumCoeff>>>0);
   if ($159) {
    $160 = ($bufferBits$3$lcssa>>>0)<(9);
    do {
     if ($160) {
      $161 = (32 - ($bufferBits$3$lcssa))|0;
      $162 = (_h264bsdFlushBits($pStrmData,$161)|0);
      $163 = ($162|0)==(-1);
      if ($163) {
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      } else {
       $164 = (_h264bsdShowBits32($pStrmData)|0);
       $bufferBits$7 = 32;$bufferValue$7 = $164;
       break;
      }
     } else {
      $bufferBits$7 = $bufferBits$3$lcssa;$bufferValue$7 = $bufferValue$3$lcssa;
     }
    } while(0);
    $165 = $bufferValue$7 >>> 23;
    $166 = ($maxNumCoeff|0)==(4);
    L105: do {
     if ($166) {
      $229 = ($bufferValue$7|0)<(0);
      if ($229) {
       $value$0$i930 = 1;
      } else {
       $230 = ($72|0)==(3);
       if ($230) {
        $value$0$i930 = 17;
       } else {
        $231 = ($bufferValue$7>>>0)>(1073741823);
        if ($231) {
         $value$0$i930 = 18;
        } else {
         $232 = ($72|0)==(2);
         if ($232) {
          $value$0$i930 = 34;
         } else {
          $233 = ($bufferValue$7>>>0)>(536870911);
          $$$i8 = $233 ? 35 : 51;
          $value$0$i930 = $$$i8;
         }
        }
       }
      }
     } else {
      do {
       switch ($72|0) {
       case 13:  {
        $218 = $bufferValue$7 >>> 29;
        $219 = (1248 + ($218)|0);
        $220 = HEAP8[$219>>0]|0;
        $221 = $220&255;
        $value$0$i9 = $221;
        break;
       }
       case 14:  {
        $222 = $bufferValue$7 >>> 30;
        $223 = (1256 + ($222)|0);
        $224 = HEAP8[$223>>0]|0;
        $225 = $224&255;
        $value$0$i9 = $225;
        break;
       }
       case 1:  {
        $167 = $bufferValue$7 >>> 27;
        $168 = (672 + ($167)|0);
        $169 = HEAP8[$168>>0]|0;
        $170 = $169&255;
        $$cmp$i = ($bufferValue$7>>>0)>(268435455);
        if ($$cmp$i) {
         $value$0$i9 = $170;
        } else {
         $171 = (704 + ($165)|0);
         $172 = HEAP8[$171>>0]|0;
         $173 = $172&255;
         $value$0$i9 = $173;
        }
        break;
       }
       case 2:  {
        $174 = $bufferValue$7 >>> 26;
        $175 = (736 + ($174)|0);
        $176 = HEAP8[$175>>0]|0;
        $177 = $176&255;
        $value$0$i9 = $177;
        break;
       }
       case 3:  {
        $178 = $bufferValue$7 >>> 26;
        $179 = (800 + ($178)|0);
        $180 = HEAP8[$179>>0]|0;
        $181 = $180&255;
        $value$0$i9 = $181;
        break;
       }
       case 4:  {
        $182 = $bufferValue$7 >>> 27;
        $183 = (864 + ($182)|0);
        $184 = HEAP8[$183>>0]|0;
        $185 = $184&255;
        $value$0$i9 = $185;
        break;
       }
       case 11:  {
        $210 = $bufferValue$7 >>> 28;
        $211 = (1216 + ($210)|0);
        $212 = HEAP8[$211>>0]|0;
        $213 = $212&255;
        $value$0$i9 = $213;
        break;
       }
       case 12:  {
        $214 = $bufferValue$7 >>> 28;
        $215 = (1232 + ($214)|0);
        $216 = HEAP8[$215>>0]|0;
        $217 = $216&255;
        $value$0$i9 = $217;
        break;
       }
       case 9:  {
        $202 = $bufferValue$7 >>> 26;
        $203 = (1120 + ($202)|0);
        $204 = HEAP8[$203>>0]|0;
        $205 = $204&255;
        $value$0$i9 = $205;
        break;
       }
       case 10:  {
        $206 = $bufferValue$7 >>> 27;
        $207 = (1184 + ($206)|0);
        $208 = HEAP8[$207>>0]|0;
        $209 = $208&255;
        $value$0$i9 = $209;
        break;
       }
       case 7:  {
        $194 = $bufferValue$7 >>> 26;
        $195 = (992 + ($194)|0);
        $196 = HEAP8[$195>>0]|0;
        $197 = $196&255;
        $value$0$i9 = $197;
        break;
       }
       case 8:  {
        $198 = $bufferValue$7 >>> 26;
        $199 = (1056 + ($198)|0);
        $200 = HEAP8[$199>>0]|0;
        $201 = $200&255;
        $value$0$i9 = $201;
        break;
       }
       case 5:  {
        $186 = $bufferValue$7 >>> 27;
        $187 = (896 + ($186)|0);
        $188 = HEAP8[$187>>0]|0;
        $189 = $188&255;
        $value$0$i9 = $189;
        break;
       }
       case 6:  {
        $190 = $bufferValue$7 >>> 26;
        $191 = (928 + ($190)|0);
        $192 = HEAP8[$191>>0]|0;
        $193 = $192&255;
        $value$0$i9 = $193;
        break;
       }
       default: {
        $226 = $bufferValue$7 >> 31;
        $227 = $226 & 16;
        $228 = $227 | 1;
        $value$0$i930 = $228;
        break L105;
       }
       }
      } while(0);
      $234 = ($value$0$i9|0)==(0);
      if ($234) {
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      } else {
       $value$0$i930 = $value$0$i9;
      }
     }
    } while(0);
    $235 = $value$0$i930 & 15;
    $236 = $bufferValue$7 << $235;
    $237 = (($bufferBits$7) - ($235))|0;
    $238 = $value$0$i930 >>> 4;
    $239 = $238 & 15;
    $bufferBits$9$ph = $237;$bufferValue$9$ph = $236;$zerosLeft$1$ph = $239;
   } else {
    $bufferBits$9$ph = $bufferBits$3$lcssa;$bufferValue$9$ph = $bufferValue$3$lcssa;$zerosLeft$1$ph = 0;
   }
   $240 = (($72) + -1)|0;
   $241 = ($240|0)==(0);
   if ($241) {
    $242 = (($level) + ($240<<2)|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = (($coeffLevel) + ($zerosLeft$1$ph<<2)|0);
    HEAP32[$244>>2] = $243;
    $245 = 1 << $zerosLeft$1$ph;
    $bufferBits$12 = $bufferBits$9$ph;$levelSuffix$1 = $245;
    break;
   } else {
    $bufferBits$944 = $bufferBits$9$ph;$bufferValue$943 = $bufferValue$9$ph;$i$340 = 0;$zerosLeft$141 = $zerosLeft$1$ph;
   }
   L135: while(1) {
    $246 = ($zerosLeft$141|0)==(0);
    if ($246) {
     $301 = (($run) + ($i$340<<2)|0);
     HEAP32[$301>>2] = 1;
     $bufferBits$11 = $bufferBits$944;$bufferValue$11 = $bufferValue$943;$zerosLeft$2 = 0;
    } else {
     $247 = ($bufferBits$944>>>0)<(11);
     if ($247) {
      $248 = (32 - ($bufferBits$944))|0;
      $249 = (_h264bsdFlushBits($pStrmData,$248)|0);
      $250 = ($249|0)==(-1);
      if ($250) {
       $$0 = 1;
       label = 127;
       break;
      }
      $251 = (_h264bsdShowBits32($pStrmData)|0);
      $bufferBits$10 = 32;$bufferValue$10 = $251;
     } else {
      $bufferBits$10 = $bufferBits$944;$bufferValue$10 = $bufferValue$943;
     }
     switch ($zerosLeft$141|0) {
     case 4:  {
      $264 = $bufferValue$10 >>> 29;
      $265 = (648 + ($264)|0);
      $266 = HEAP8[$265>>0]|0;
      $267 = $266&255;
      $291 = $267;
      break;
     }
     case 5:  {
      $268 = $bufferValue$10 >>> 29;
      $269 = (656 + ($268)|0);
      $270 = HEAP8[$269>>0]|0;
      $271 = $270&255;
      $291 = $271;
      break;
     }
     case 1:  {
      $252 = $bufferValue$10 >>> 31;
      $253 = (624 + ($252)|0);
      $254 = HEAP8[$253>>0]|0;
      $255 = $254&255;
      $291 = $255;
      break;
     }
     case 2:  {
      $256 = $bufferValue$10 >>> 30;
      $257 = (632 + ($256)|0);
      $258 = HEAP8[$257>>0]|0;
      $259 = $258&255;
      $291 = $259;
      break;
     }
     case 3:  {
      $260 = $bufferValue$10 >>> 30;
      $261 = (640 + ($260)|0);
      $262 = HEAP8[$261>>0]|0;
      $263 = $262&255;
      $291 = $263;
      break;
     }
     case 6:  {
      $272 = $bufferValue$10 >>> 29;
      $273 = (664 + ($272)|0);
      $274 = HEAP8[$273>>0]|0;
      $275 = $274&255;
      $291 = $275;
      break;
     }
     default: {
      $276 = ($bufferValue$10>>>0)>(536870911);
      do {
       if ($276) {
        $277 = $bufferValue$10 >>> 29;
        $278 = $277 << 4;
        $279 = $278 ^ 115;
        $value$0$i7 = $279;
       } else {
        $280 = ($bufferValue$10>>>0)>(268435455);
        if ($280) {
         $value$0$i7 = 116;
        } else {
         $281 = ($bufferValue$10>>>0)>(134217727);
         if ($281) {
          $value$0$i7 = 133;
         } else {
          $282 = ($bufferValue$10>>>0)>(67108863);
          if ($282) {
           $value$0$i7 = 150;
          } else {
           $283 = ($bufferValue$10>>>0)>(33554431);
           if ($283) {
            $value$0$i7 = 167;
           } else {
            $284 = ($bufferValue$10>>>0)>(16777215);
            if ($284) {
             $value$0$i7 = 184;
            } else {
             $285 = ($bufferValue$10>>>0)>(8388607);
             if ($285) {
              $value$0$i7 = 201;
              break;
             }
             $286 = ($bufferValue$10>>>0)>(4194303);
             if ($286) {
              $value$0$i7 = 218;
              break;
             }
             $287 = ($bufferValue$10>>>0)<(2097152);
             $$$i = $287 ? 0 : 235;
             $value$0$i7 = $$$i;
            }
           }
          }
         }
        }
       }
      } while(0);
      $288 = $value$0$i7 >>> 4;
      $289 = $288 & 15;
      $290 = ($289>>>0)>($zerosLeft$141>>>0);
      if ($290) {
       $$0 = 1;
       label = 127;
       break L135;
      } else {
       $291 = $value$0$i7;
      }
     }
     }
     $292 = ($291|0)==(0);
     if ($292) {
      $$0 = 1;
      label = 127;
      break;
     }
     $293 = $291 & 15;
     $294 = $bufferValue$10 << $293;
     $295 = (($bufferBits$10) - ($293))|0;
     $296 = $291 >>> 4;
     $297 = $296 & 15;
     $298 = (($run) + ($i$340<<2)|0);
     $299 = (($297) + 1)|0;
     HEAP32[$298>>2] = $299;
     $300 = (($zerosLeft$141) - ($297))|0;
     $bufferBits$11 = $295;$bufferValue$11 = $294;$zerosLeft$2 = $300;
    }
    $302 = (($i$340) + 1)|0;
    $303 = ($302>>>0)<($240>>>0);
    if ($303) {
     $bufferBits$944 = $bufferBits$11;$bufferValue$943 = $bufferValue$11;$i$340 = $302;$zerosLeft$141 = $zerosLeft$2;
    } else {
     label = 122;
     break;
    }
   }
   if ((label|0) == 122) {
    $304 = (($level) + ($240<<2)|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = (($coeffLevel) + ($zerosLeft$2<<2)|0);
    HEAP32[$306>>2] = $305;
    $307 = 1 << $zerosLeft$2;
    if ($241) {
     $bufferBits$12 = $bufferBits$11;$levelSuffix$1 = $307;
     break;
    }
    $308 = (($72) + -2)|0;
    $310 = $308;$levelSuffix$036 = $307;$tmp$335 = $zerosLeft$2;
    while(1) {
     $309 = (($run) + ($310<<2)|0);
     $311 = HEAP32[$309>>2]|0;
     $312 = (($311) + ($tmp$335))|0;
     $313 = 1 << $312;
     $314 = $313 | $levelSuffix$036;
     $315 = (($level) + ($310<<2)|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = (($coeffLevel) + ($312<<2)|0);
     HEAP32[$317>>2] = $316;
     $318 = (($310) + -1)|0;
     $319 = ($310|0)==(0);
     if ($319) {
      $bufferBits$12 = $bufferBits$11;$levelSuffix$1 = $314;
      break;
     } else {
      $310 = $318;$levelSuffix$036 = $314;$tmp$335 = $312;
     }
    }
   }
   else if ((label|0) == 127) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $320 = (32 - ($bufferBits$12))|0;
 $321 = (_h264bsdFlushBits($pStrmData,$320)|0);
 $322 = ($321|0)==(0);
 if (!($322)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $323 = $72 << 4;
 $324 = $levelSuffix$1 << 16;
 $325 = $324 | $323;
 $$0 = $325;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDecodeNalUnit($pStrmData,$pNalUnit) {
 $pStrmData = $pStrmData|0;
 $pNalUnit = $pNalUnit|0;
 var $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_h264bsdGetBits($pStrmData,1)|0);
 $1 = ($0|0)==(-1);
 L1: do {
  if ($1) {
   $$0 = 1;
  } else {
   $2 = (_h264bsdGetBits($pStrmData,2)|0);
   $3 = (($pNalUnit) + 4|0);
   HEAP32[$3>>2] = $2;
   $4 = (_h264bsdGetBits($pStrmData,5)|0);
   HEAP32[$pNalUnit>>2] = $4;
   $$off = (($4) + -2)|0;
   $switch = ($$off>>>0)<(3);
   if ($switch) {
    $$0 = 1;
   } else {
    switch ($4|0) {
    case 6: case 9: case 10: case 11: case 12:  {
     $7 = HEAP32[$3>>2]|0;
     $8 = ($7|0)==(0);
     if (!($8)) {
      $$0 = 1;
      break L1;
     }
     break;
    }
    case 5: case 7: case 8:  {
     $5 = HEAP32[$3>>2]|0;
     $6 = ($5|0)==(0);
     if ($6) {
      $$0 = 1;
      break L1;
     }
     switch ($4|0) {
     case 6: case 9: case 10: case 11: case 12:  {
      $$0 = 1;
      break L1;
      break;
     }
     default: {
     }
     }
     break;
    }
    default: {
    }
    }
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdInitMbNeighbours($pMbStorage,$picWidth,$picSizeInMbs) {
 $pMbStorage = $pMbStorage|0;
 $picWidth = $picWidth|0;
 $picSizeInMbs = $picSizeInMbs|0;
 var $$ = 0, $$row$0 = 0, $$sum = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col$010 = 0, $exitcond = 0, $i$08 = 0, $or$cond = 0, $row$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($picSizeInMbs|0)==(0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($picWidth) + -1)|0;
 $2 = (1 - ($picWidth))|0;
 $3 = $picWidth ^ -1;
 $col$010 = 0;$i$08 = 0;$row$09 = 0;
 while(1) {
  $4 = ($col$010|0)!=(0);
  if ($4) {
   $$sum4 = (($i$08) + -1)|0;
   $5 = (($pMbStorage) + (($$sum4*216)|0)|0);
   $6 = ((($pMbStorage) + (($i$08*216)|0)|0) + 200|0);
   HEAP32[$6>>2] = $5;
  } else {
   $7 = ((($pMbStorage) + (($i$08*216)|0)|0) + 200|0);
   HEAP32[$7>>2] = 0;
  }
  $8 = ($row$09|0)!=(0);
  if ($8) {
   $$sum3 = (($i$08) - ($picWidth))|0;
   $10 = (($pMbStorage) + (($$sum3*216)|0)|0);
   $11 = ((($pMbStorage) + (($i$08*216)|0)|0) + 204|0);
   HEAP32[$11>>2] = $10;
   $12 = ($col$010>>>0)<($1>>>0);
   if ($12) {
    $$sum2 = (($2) + ($i$08))|0;
    $13 = (($pMbStorage) + (($$sum2*216)|0)|0);
    $14 = ((($pMbStorage) + (($i$08*216)|0)|0) + 208|0);
    HEAP32[$14>>2] = $13;
   } else {
    label = 10;
   }
  } else {
   $9 = ((($pMbStorage) + (($i$08*216)|0)|0) + 204|0);
   HEAP32[$9>>2] = 0;
   label = 10;
  }
  if ((label|0) == 10) {
   label = 0;
   $15 = ((($pMbStorage) + (($i$08*216)|0)|0) + 208|0);
   HEAP32[$15>>2] = 0;
  }
  $or$cond = $8 & $4;
  if ($or$cond) {
   $$sum = (($i$08) + ($3))|0;
   $16 = (($pMbStorage) + (($$sum*216)|0)|0);
   $17 = ((($pMbStorage) + (($i$08*216)|0)|0) + 212|0);
   HEAP32[$17>>2] = $16;
  } else {
   $18 = ((($pMbStorage) + (($i$08*216)|0)|0) + 212|0);
   HEAP32[$18>>2] = 0;
  }
  $19 = (($col$010) + 1)|0;
  $20 = ($19|0)==($picWidth|0);
  $21 = $20&1;
  $$row$0 = (($21) + ($row$09))|0;
  $$ = $20 ? 0 : $19;
  $22 = (($i$08) + 1)|0;
  $exitcond = ($22|0)==($picSizeInMbs|0);
  if ($exitcond) {
   break;
  } else {
   $col$010 = $$;$i$08 = $22;$row$09 = $$row$0;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdGetNeighbourMb($pMb,$neighbour) {
 $pMb = $pMb|0;
 $neighbour = $neighbour|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($neighbour|0) {
 case 1:  {
  $2 = (($pMb) + 204|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
  break;
 }
 case 4:  {
  $$0 = $pMb;
  break;
 }
 case 3:  {
  $6 = (($pMb) + 212|0);
  $7 = HEAP32[$6>>2]|0;
  $$0 = $7;
  break;
 }
 case 0:  {
  $0 = (($pMb) + 200|0);
  $1 = HEAP32[$0>>2]|0;
  $$0 = $1;
  break;
 }
 case 2:  {
  $4 = (($pMb) + 208|0);
  $5 = HEAP32[$4>>2]|0;
  $$0 = $5;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdNeighbour4x4BlockA($blockIndex) {
 $blockIndex = $blockIndex|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (3152 + ($blockIndex<<3)|0);
 STACKTOP = sp;return ($0|0);
}
function _h264bsdNeighbour4x4BlockB($blockIndex) {
 $blockIndex = $blockIndex|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (2960 + ($blockIndex<<3)|0);
 STACKTOP = sp;return ($0|0);
}
function _h264bsdNeighbour4x4BlockC($blockIndex) {
 $blockIndex = $blockIndex|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (2768 + ($blockIndex<<3)|0);
 STACKTOP = sp;return ($0|0);
}
function _h264bsdNeighbour4x4BlockD($blockIndex) {
 $blockIndex = $blockIndex|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (2576 + ($blockIndex<<3)|0);
 STACKTOP = sp;return ($0|0);
}
function _h264bsdIsNeighbourAvailable($pMb,$pNeighbour) {
 $pMb = $pMb|0;
 $pNeighbour = $pNeighbour|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pNeighbour|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return 0;
 } else {
  $1 = (($pMb) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($pNeighbour) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)==($4|0);
  $$ = $5&1;
  STACKTOP = sp;return ($$|0);
 }
 return (0)|0;
}
function _h264bsdInitStorage($pStorage) {
 $pStorage = $pStorage|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _H264SwDecMemset($pStorage,0,3388);
 $0 = (($pStorage) + 8|0);
 HEAP32[$0>>2] = 32;
 $1 = (($pStorage) + 4|0);
 HEAP32[$1>>2] = 256;
 $2 = (($pStorage) + 1332|0);
 HEAP32[$2>>2] = 1;
 STACKTOP = sp;return;
}
function _h264bsdStoreSeqParamSet($pStorage,$pSeqParamSet) {
 $pStorage = $pStorage|0;
 $pSeqParamSet = $pSeqParamSet|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($pSeqParamSet) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($pStorage) + ($1<<2)|0) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $5 = (_H264SwDecMalloc(92)|0);
   HEAP32[$2>>2] = $5;
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$0 = 65535;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $7 = (($pStorage) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($1|0)==($8|0);
   if (!($9)) {
    $30 = (($3) + 40|0);
    $31 = HEAP32[$30>>2]|0;
    _H264SwDecFree($31);
    $32 = HEAP32[$2>>2]|0;
    $33 = (($32) + 40|0);
    HEAP32[$33>>2] = 0;
    $34 = HEAP32[$2>>2]|0;
    $35 = (($34) + 84|0);
    $36 = HEAP32[$35>>2]|0;
    _H264SwDecFree($36);
    $37 = HEAP32[$2>>2]|0;
    $38 = (($37) + 84|0);
    HEAP32[$38>>2] = 0;
    break;
   }
   $10 = (($pStorage) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_h264bsdCompareSeqParamSets($pSeqParamSet,$11)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    $14 = HEAP32[$2>>2]|0;
    $15 = (($14) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    _H264SwDecFree($16);
    $17 = HEAP32[$2>>2]|0;
    $18 = (($17) + 40|0);
    HEAP32[$18>>2] = 0;
    $19 = HEAP32[$2>>2]|0;
    $20 = (($19) + 84|0);
    $21 = HEAP32[$20>>2]|0;
    _H264SwDecFree($21);
    $22 = HEAP32[$2>>2]|0;
    $23 = (($22) + 84|0);
    HEAP32[$23>>2] = 0;
    HEAP32[$7>>2] = 33;
    $24 = (($pStorage) + 4|0);
    HEAP32[$24>>2] = 257;
    HEAP32[$10>>2] = 0;
    $25 = (($pStorage) + 12|0);
    HEAP32[$25>>2] = 0;
    break;
   }
   $26 = (($pSeqParamSet) + 40|0);
   $27 = HEAP32[$26>>2]|0;
   _H264SwDecFree($27);
   HEAP32[$26>>2] = 0;
   $28 = (($pSeqParamSet) + 84|0);
   $29 = HEAP32[$28>>2]|0;
   _H264SwDecFree($29);
   HEAP32[$28>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $39 = HEAP32[$2>>2]|0;
 dest=$39+0|0; src=$pSeqParamSet+0|0; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdStorePicParamSet($pStorage,$pPicParamSet) {
 $pStorage = $pStorage|0;
 $pPicParamSet = $pPicParamSet|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pPicParamSet>>2]|0;
 $1 = ((($pStorage) + ($0<<2)|0) + 148|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $4 = (_H264SwDecMalloc(72)|0);
   HEAP32[$1>>2] = $4;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $$0 = 65535;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $6 = (($pStorage) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($0|0)==($7|0);
   if (!($8)) {
    $34 = (($2) + 20|0);
    $35 = HEAP32[$34>>2]|0;
    _H264SwDecFree($35);
    $36 = HEAP32[$1>>2]|0;
    $37 = (($36) + 20|0);
    HEAP32[$37>>2] = 0;
    $38 = HEAP32[$1>>2]|0;
    $39 = (($38) + 24|0);
    $40 = HEAP32[$39>>2]|0;
    _H264SwDecFree($40);
    $41 = HEAP32[$1>>2]|0;
    $42 = (($41) + 24|0);
    HEAP32[$42>>2] = 0;
    $43 = HEAP32[$1>>2]|0;
    $44 = (($43) + 28|0);
    $45 = HEAP32[$44>>2]|0;
    _H264SwDecFree($45);
    $46 = HEAP32[$1>>2]|0;
    $47 = (($46) + 28|0);
    HEAP32[$47>>2] = 0;
    $48 = HEAP32[$1>>2]|0;
    $49 = (($48) + 44|0);
    $50 = HEAP32[$49>>2]|0;
    _H264SwDecFree($50);
    $51 = HEAP32[$1>>2]|0;
    $52 = (($51) + 44|0);
    HEAP32[$52>>2] = 0;
    break;
   }
   $9 = (($pPicParamSet) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($pStorage) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($10|0)==($12|0);
   if ($13) {
    $15 = $2;
   } else {
    HEAP32[$6>>2] = 257;
    $$pre = HEAP32[$1>>2]|0;
    $15 = $$pre;
   }
   $14 = (($15) + 20|0);
   $16 = HEAP32[$14>>2]|0;
   _H264SwDecFree($16);
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 20|0);
   HEAP32[$18>>2] = 0;
   $19 = HEAP32[$1>>2]|0;
   $20 = (($19) + 24|0);
   $21 = HEAP32[$20>>2]|0;
   _H264SwDecFree($21);
   $22 = HEAP32[$1>>2]|0;
   $23 = (($22) + 24|0);
   HEAP32[$23>>2] = 0;
   $24 = HEAP32[$1>>2]|0;
   $25 = (($24) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   _H264SwDecFree($26);
   $27 = HEAP32[$1>>2]|0;
   $28 = (($27) + 28|0);
   HEAP32[$28>>2] = 0;
   $29 = HEAP32[$1>>2]|0;
   $30 = (($29) + 44|0);
   $31 = HEAP32[$30>>2]|0;
   _H264SwDecFree($31);
   $32 = HEAP32[$1>>2]|0;
   $33 = (($32) + 44|0);
   HEAP32[$33>>2] = 0;
  }
 } while(0);
 $53 = HEAP32[$1>>2]|0;
 dest=$53+0|0; src=$pPicParamSet+0|0; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdActivateParamSets($pStorage,$ppsId,$isIdr) {
 $pStorage = $pStorage|0;
 $ppsId = $ppsId|0;
 $isIdr = $isIdr|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $flag$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStorage) + ($ppsId<<2)|0) + 148|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($1) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($pStorage) + ($4<<2)|0) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (_CheckPps($1,$6)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($pStorage) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(256);
 do {
  if ($12) {
   HEAP32[$10>>2] = $ppsId;
   $13 = HEAP32[$0>>2]|0;
   $14 = (($pStorage) + 12|0);
   HEAP32[$14>>2] = $13;
   $15 = (($13) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($pStorage) + 8|0);
   HEAP32[$17>>2] = $16;
   $18 = ((($pStorage) + ($16<<2)|0) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($pStorage) + 16|0);
   HEAP32[$20>>2] = $19;
   $21 = (($19) + 52|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($19) + 56|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = Math_imul($24, $22)|0;
   $26 = (($pStorage) + 1176|0);
   HEAP32[$26>>2] = $25;
   $27 = (($pStorage) + 1340|0);
   HEAP32[$27>>2] = $22;
   $28 = (($pStorage) + 1344|0);
   HEAP32[$28>>2] = $24;
   $29 = (($pStorage) + 3380|0);
   HEAP32[$29>>2] = 1;
  } else {
   $30 = (($pStorage) + 3380|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $87 = ($11|0)==($ppsId|0);
    if ($87) {
     break;
    }
    $88 = (($pStorage) + 8|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($4|0)==($89|0);
    if ($90) {
     HEAP32[$10>>2] = $ppsId;
     $107 = HEAP32[$0>>2]|0;
     $108 = (($pStorage) + 12|0);
     HEAP32[$108>>2] = $107;
     break;
    }
    $91 = ($isIdr|0)==(0);
    if ($91) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     HEAP32[$10>>2] = $ppsId;
     $92 = HEAP32[$0>>2]|0;
     $93 = (($pStorage) + 12|0);
     HEAP32[$93>>2] = $92;
     $94 = (($92) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     HEAP32[$88>>2] = $95;
     $96 = ((($pStorage) + ($95<<2)|0) + 20|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (($pStorage) + 16|0);
     HEAP32[$98>>2] = $97;
     $99 = (($97) + 52|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = (($97) + 56|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = Math_imul($102, $100)|0;
     $104 = (($pStorage) + 1176|0);
     HEAP32[$104>>2] = $103;
     $105 = (($pStorage) + 1340|0);
     HEAP32[$105>>2] = $100;
     $106 = (($pStorage) + 1344|0);
     HEAP32[$106>>2] = $102;
     HEAP32[$30>>2] = 1;
     break;
    }
   }
   HEAP32[$30>>2] = 0;
   $33 = (($pStorage) + 1212|0);
   $34 = HEAP32[$33>>2]|0;
   _H264SwDecFree($34);
   HEAP32[$33>>2] = 0;
   $35 = (($pStorage) + 1172|0);
   $36 = HEAP32[$35>>2]|0;
   _H264SwDecFree($36);
   HEAP32[$35>>2] = 0;
   $37 = (($pStorage) + 1176|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38*216)|0;
   $40 = (_H264SwDecMalloc($39)|0);
   HEAP32[$33>>2] = $40;
   $41 = HEAP32[$37>>2]|0;
   $42 = $41 << 2;
   $43 = (_H264SwDecMalloc($42)|0);
   HEAP32[$35>>2] = $43;
   $44 = HEAP32[$33>>2]|0;
   $45 = ($44|0)==(0|0);
   $46 = ($43|0)==(0|0);
   $or$cond = $45 | $46;
   if ($or$cond) {
    $$0 = 65535;
    STACKTOP = sp;return ($$0|0);
   }
   $47 = HEAP32[$37>>2]|0;
   $48 = ($47*216)|0;
   _H264SwDecMemset($44,0,$48);
   $49 = HEAP32[$33>>2]|0;
   $50 = (($pStorage) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + 52|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = HEAP32[$37>>2]|0;
   _h264bsdInitMbNeighbours($49,$53,$54);
   $55 = (($pStorage) + 1216|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)==(0);
   $58 = HEAP32[$50>>2]|0;
   do {
    if ($57) {
     $59 = (($58) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(2);
     if ($61) {
      $flag$0 = 1;
     } else {
      $62 = (($58) + 80|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0);
      if (!($64)) {
       $65 = (($58) + 84|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($66) + 920|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ($68|0)==(0);
       if (!($69)) {
        $70 = (($66) + 944|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = ($71|0)==(0);
        if ($72) {
         $flag$0 = 1;
         break;
        }
       }
      }
      $flag$0 = 0;
     }
    } else {
     $flag$0 = 1;
    }
   } while(0);
   $73 = (($pStorage) + 1220|0);
   $74 = (($58) + 52|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($58) + 56|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = Math_imul($77, $75)|0;
   $79 = (($58) + 88|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($58) + 44|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($58) + 12|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (_h264bsdResetDpb($73,$78,$80,$82,$84,$flag$0)|0);
   $86 = ($85|0)==(0);
   if (!($86)) {
    $$0 = $85;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdResetStorage($pStorage) {
 $pStorage = $pStorage|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStorage) + 1196|0);
 HEAP32[$0>>2] = 0;
 $1 = (($pStorage) + 1192|0);
 HEAP32[$1>>2] = 0;
 $2 = (($pStorage) + 1176|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (($pStorage) + 1212|0);
 $6 = HEAP32[$5>>2]|0;
 $i$01 = 0;
 while(1) {
  $7 = ((($6) + (($i$01*216)|0)|0) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($6) + (($i$01*216)|0)|0) + 196|0);
  HEAP32[$8>>2] = 0;
  $9 = (($i$01) + 1)|0;
  $10 = ($9>>>0)<($3>>>0);
  if ($10) {
   $i$01 = $9;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdIsStartOfPicture($pStorage) {
 $pStorage = $pStorage|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStorage) + 1188|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $$ = $2&1;
 STACKTOP = sp;return ($$|0);
}
function _h264bsdIsEndOfPicture($pStorage) {
 $pStorage = $pStorage|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$01 = 0, $tmp$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStorage) + 1404|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $8 = (($pStorage) + 1196|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($pStorage) + 1176|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)==($11|0);
  if ($12) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $3 = (($pStorage) + 1176|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $6 = (($pStorage) + 1212|0);
  $7 = HEAP32[$6>>2]|0;
  $i$01 = 0;$tmp$02 = 0;
  while(1) {
   $13 = ((($7) + (($i$01*216)|0)|0) + 196|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)!=(0);
   $16 = $15&1;
   $17 = (($16) + ($tmp$02))|0;
   $18 = (($i$01) + 1)|0;
   $19 = ($18>>>0)<($4>>>0);
   if ($19) {
    $i$01 = $18;$tmp$02 = $17;
   } else {
    break;
   }
  }
  $20 = ($17|0)==($4|0);
  if ($20) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdComputeSliceGroupMap($pStorage,$sliceGroupChangeCycle) {
 $pStorage = $pStorage|0;
 $sliceGroupChangeCycle = $sliceGroupChangeCycle|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStorage) + 1172|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pStorage) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pStorage) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 _h264bsdDecodeSliceGroupMap($1,$3,$sliceGroupChangeCycle,$7,$9);
 STACKTOP = sp;return;
}
function _h264bsdCheckAccessUnitBoundary($strm,$nuNext,$storage,$accessUnitBoundaryFlag) {
 $strm = $strm|0;
 $nuNext = $nuNext|0;
 $storage = $storage|0;
 $accessUnitBoundaryFlag = $accessUnitBoundaryFlag|0;
 var $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $deltaPicOrderCnt = 0, $deltaPicOrderCntBottom = 0, $frameNum = 0, $idrPicId = 0, $or$cond2 = 0, $or$cond3 = 0, $picOrderCntLsb = 0, $ppsId = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ppsId = sp + 24|0;
 $frameNum = sp + 20|0;
 $idrPicId = sp + 16|0;
 $picOrderCntLsb = sp + 12|0;
 $deltaPicOrderCntBottom = sp + 8|0;
 $deltaPicOrderCnt = sp;
 HEAP32[$accessUnitBoundaryFlag>>2] = 0;
 $0 = HEAP32[$nuNext>>2]|0;
 switch ($0|0) {
 case 6: case 7: case 8: case 9: case 10: case 11: case 13: case 14: case 15: case 16: case 17: case 18:  {
  HEAP32[$accessUnitBoundaryFlag>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 5: case 1:  {
  $1 = (($storage) + 1300|0);
  $2 = (($storage) + 1332|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP32[$accessUnitBoundaryFlag>>2] = 1;
   HEAP32[$2>>2] = 0;
  }
  $5 = (_h264bsdCheckPpsId($strm,$ppsId)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $$0 = $5;
   STACKTOP = sp;return ($$0|0);
  }
  $7 = HEAP32[$ppsId>>2]|0;
  $8 = ((($storage) + ($7<<2)|0) + 148|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $$0 = 65520;
   STACKTOP = sp;return ($$0|0);
  }
  $11 = (($9) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($storage) + ($12<<2)|0) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = 65520;
   STACKTOP = sp;return ($$0|0);
  }
  $16 = (($storage) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(32);
  $19 = ($12|0)==($17|0);
  $or$cond2 = $18 | $19;
  if (!($or$cond2)) {
   $20 = HEAP32[$nuNext>>2]|0;
   $21 = ($20|0)==(5);
   if (!($21)) {
    $$0 = 65520;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $22 = (($storage) + 1304|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($nuNext) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($23|0)==($25|0);
  if (!($26)) {
   $27 = ($23|0)==(0);
   $28 = ($25|0)==(0);
   $or$cond3 = $27 | $28;
   if ($or$cond3) {
    HEAP32[$accessUnitBoundaryFlag>>2] = 1;
   }
  }
  $29 = HEAP32[$1>>2]|0;
  $30 = ($29|0)==(5);
  $31 = HEAP32[$nuNext>>2]|0;
  $32 = ($31|0)==(5);
  if ($30) {
   if (!($32)) {
    label = 16;
   }
  } else {
   if ($32) {
    label = 16;
   }
  }
  if ((label|0) == 16) {
   HEAP32[$accessUnitBoundaryFlag>>2] = 1;
  }
  $33 = (($14) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (_h264bsdCheckFrameNum($strm,$34,$frameNum)|0);
  $36 = ($35|0)==(0);
  if (!($36)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $37 = (($storage) + 1308|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$frameNum>>2]|0;
  $40 = ($38|0)==($39|0);
  if (!($40)) {
   HEAP32[$37>>2] = $39;
   HEAP32[$accessUnitBoundaryFlag>>2] = 1;
  }
  $41 = HEAP32[$nuNext>>2]|0;
  $42 = ($41|0)==(5);
  if ($42) {
   $43 = HEAP32[$33>>2]|0;
   $44 = (_h264bsdCheckIdrPicId($strm,$43,5,$idrPicId)|0);
   $45 = ($44|0)==(0);
   if (!($45)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $46 = HEAP32[$1>>2]|0;
   $47 = ($46|0)==(5);
   if ($47) {
    $48 = (($storage) + 1312|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = HEAP32[$idrPicId>>2]|0;
    $51 = ($49|0)==($50|0);
    if ($51) {
     $$pre$phiZ2D = $48;$52 = $49;
    } else {
     HEAP32[$accessUnitBoundaryFlag>>2] = 1;
     $$pre$phiZ2D = $48;$52 = $50;
    }
   } else {
    $$pre = HEAP32[$idrPicId>>2]|0;
    $$pre8 = (($storage) + 1312|0);
    $$pre$phiZ2D = $$pre8;$52 = $$pre;
   }
   HEAP32[$$pre$phiZ2D>>2] = $52;
  }
  $53 = (($14) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  if ((($54|0) == 0)) {
   $55 = HEAP32[$nuNext>>2]|0;
   $56 = (_h264bsdCheckPicOrderCntLsb($strm,$14,$55,$picOrderCntLsb)|0);
   $57 = ($56|0)==(0);
   if (!($57)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $58 = (($storage) + 1316|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$picOrderCntLsb>>2]|0;
   $61 = ($59|0)==($60|0);
   if (!($61)) {
    HEAP32[$58>>2] = $60;
    HEAP32[$accessUnitBoundaryFlag>>2] = 1;
   }
   $62 = (($9) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)==(0);
   if (!($64)) {
    $65 = HEAP32[$nuNext>>2]|0;
    $66 = (_h264bsdCheckDeltaPicOrderCntBottom($strm,$14,$65,$deltaPicOrderCntBottom)|0);
    $67 = ($66|0)==(0);
    if (!($67)) {
     $$0 = $66;
     STACKTOP = sp;return ($$0|0);
    }
    $68 = (($storage) + 1320|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = HEAP32[$deltaPicOrderCntBottom>>2]|0;
    $71 = ($69|0)==($70|0);
    if (!($71)) {
     HEAP32[$68>>2] = $70;
     HEAP32[$accessUnitBoundaryFlag>>2] = 1;
    }
   }
  } else if ((($54|0) == 1)) {
   $72 = (($14) + 24|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)==(0);
   if ($74) {
    $75 = HEAP32[$nuNext>>2]|0;
    $76 = (($9) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (_h264bsdCheckDeltaPicOrderCnt($strm,$14,$75,$77,$deltaPicOrderCnt)|0);
    $79 = ($78|0)==(0);
    if (!($79)) {
     $$0 = $78;
     STACKTOP = sp;return ($$0|0);
    }
    $80 = (($storage) + 1324|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = HEAP32[$deltaPicOrderCnt>>2]|0;
    $83 = ($81|0)==($82|0);
    if (!($83)) {
     HEAP32[$80>>2] = $82;
     HEAP32[$accessUnitBoundaryFlag>>2] = 1;
    }
    $84 = HEAP32[$76>>2]|0;
    $85 = ($84|0)==(0);
    if (!($85)) {
     $86 = (($storage) + 1328|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (($deltaPicOrderCnt) + 4|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ($87|0)==($89|0);
     if (!($90)) {
      HEAP32[$86>>2] = $89;
      HEAP32[$accessUnitBoundaryFlag>>2] = 1;
     }
    }
   }
  }
  $91 = $nuNext;
  $92 = $91;
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) + 4)|0;
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $97 = $1;
  $98 = $97;
  HEAP32[$98>>2] = $93;
  $99 = (($97) + 4)|0;
  $100 = $99;
  HEAP32[$100>>2] = $96;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _h264bsdValidParamSets($pStorage) {
 $pStorage = $pStorage|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 0;
 while(1) {
  $0 = ((($pStorage) + ($i$01<<2)|0) + 148|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = (($1) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($pStorage) + ($4<<2)|0) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if (!($7)) {
    $8 = (_CheckPps($1,$6)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $$0 = 0;
     label = 6;
     break;
    }
   }
  }
  $10 = (($i$01) + 1)|0;
  $11 = ($10>>>0)<(256);
  if ($11) {
   $i$01 = $10;
  } else {
   $$0 = 1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _CheckPps($pps,$sps) {
 $pps = $pps|0;
 $sps = $sps|0;
 var $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$17 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($sps) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($sps) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $1)|0;
 $5 = (($pps) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)>(1);
 L1: do {
  if ($7) {
   $8 = (($pps) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   if ((($9|0) == 0)) {
    $14 = (($pps) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $i$03 = 0;
    while(1) {
     $18 = (($15) + ($i$03<<2)|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($19>>>0)>($4>>>0);
     $16 = (($i$03) + 1)|0;
     if ($20) {
      $$0 = 1;
      break;
     }
     $17 = ($16>>>0)<($6>>>0);
     if ($17) {
      $i$03 = $16;
     } else {
      break L1;
     }
    }
    STACKTOP = sp;return ($$0|0);
   } else if ((($9|0) == 2)) {
    $10 = (($pps) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($pps) + 28|0);
    $13 = HEAP32[$12>>2]|0;
    $i$17 = 0;
    while(1) {
     $24 = (($11) + ($i$17<<2)|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (($13) + ($i$17<<2)|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($25>>>0)<=($27>>>0);
     $29 = ($27>>>0)<($4>>>0);
     $or$cond = $28 & $29;
     if (!($or$cond)) {
      $$0 = 1;
      label = 15;
      break;
     }
     $30 = (($25>>>0) % ($1>>>0))&-1;
     $31 = (($27>>>0) % ($1>>>0))&-1;
     $32 = ($30>>>0)>($31>>>0);
     $22 = (($i$17) + 1)|0;
     if ($32) {
      $$0 = 1;
      label = 15;
      break;
     }
     $21 = (($6) + -1)|0;
     $23 = ($22>>>0)<($21>>>0);
     if ($23) {
      $i$17 = $22;
     } else {
      break L1;
     }
    }
    if ((label|0) == 15) {
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$off = (($9) + -3)|0;
    $33 = ($$off>>>0)<(3);
    if ($33) {
     $34 = (($pps) + 36|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ($35>>>0)>($4>>>0);
     if ($36) {
      $$0 = 1;
     } else {
      break;
     }
     STACKTOP = sp;return ($$0|0);
    }
    $37 = ($9|0)==(6);
    if (!($37)) {
     break;
    }
    $38 = (($pps) + 40|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39>>>0)<($4>>>0);
    if ($40) {
     $$0 = 1;
    } else {
     break;
    }
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDecodeSliceGroupMap($map,$pps,$sliceGroupChangeCycle,$picWidth,$picHeight) {
 $map = $map|0;
 $pps = $pps|0;
 $sliceGroupChangeCycle = $sliceGroupChangeCycle|0;
 $picWidth = $picWidth|0;
 $picHeight = $picHeight|0;
 var $$ = 0, $$$i = 0, $$2$i = 0, $$21 = 0, $$22 = 0, $$4$i = 0, $$6$i = 0, $$off23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bottomBound$015$i = 0, $bottomBound$1$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i12 = 0, $exitcond$i18 = 0, $exitcond$i6 = 0, $exitcond$i8 = 0, $exitcond6$i = 0;
 var $group$0$i = 0, $group$0$ph$i = 0, $i$01$i = 0, $i$01$i17 = 0, $i$01$i4 = 0, $i$016$i = 0, $i$024 = 0, $i$06$i = 0, $i$1$ph$i = 0, $j$01$i = 0, $j$03$i = 0, $k$04$i = 0, $k$07$i = 0, $k$1$lcssa$i = 0, $k$12$i = 0, $leftBound$012$i = 0, $leftBound$1$i = 0, $or$cond$i = 0, $or$cond$i10 = 0, $or$cond1$i = 0;
 var $or$cond3$i = 0, $or$cond5$i = 0, $rightBound$014$i = 0, $rightBound$1$i = 0, $sizeOfUpperLeftGroup$0 = 0, $switch = 0, $topBound$013$i = 0, $topBound$1$i = 0, $unitsInSliceGroup0$0 = 0, $x$01$i = 0, $x$08$i = 0, $x$1$i = 0, $xDir$010$i = 0, $xDir$1$i = 0, $y$02$i = 0, $y$09$i = 0, $y$1$i = 0, $yDir$011$i = 0, $yDir$1$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($picHeight, $picWidth)|0;
 $1 = (($pps) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = $0 << 2;
  _H264SwDecMemset($map,0,$4);
  STACKTOP = sp;return;
 }
 $5 = (($pps) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $$off23 = (($6) + -3)|0;
 $7 = ($$off23>>>0)<(3);
 if ($7) {
  $8 = (($pps) + 36|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = Math_imul($9, $sliceGroupChangeCycle)|0;
  $11 = ($10>>>0)<($0>>>0);
  $$ = $11 ? $10 : $0;
  $12 = $6 & -2;
  $switch = ($12|0)==(4);
  if ($switch) {
   $13 = (($pps) + 32|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0);
   $16 = (($0) - ($$))|0;
   $17 = $15 ? $$ : $16;
   $sizeOfUpperLeftGroup$0 = $17;$unitsInSliceGroup0$0 = $$;
  } else {
   $sizeOfUpperLeftGroup$0 = 0;$unitsInSliceGroup0$0 = $$;
  }
 } else {
  $sizeOfUpperLeftGroup$0 = 0;$unitsInSliceGroup0$0 = 0;
 }
 switch ($6|0) {
 case 4:  {
  $118 = (($pps) + 32|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($0|0)==(0);
  if ($120) {
   STACKTOP = sp;return;
  }
  $121 = (1 - ($119))|0;
  $i$01$i4 = 0;
  while(1) {
   $122 = ($i$01$i4>>>0)<($sizeOfUpperLeftGroup$0>>>0);
   $123 = (($map) + ($i$01$i4<<2)|0);
   $$21 = $122 ? $119 : $121;
   HEAP32[$123>>2] = $$21;
   $124 = (($i$01$i4) + 1)|0;
   $exitcond$i6 = ($124|0)==($0|0);
   if ($exitcond$i6) {
    break;
   } else {
    $i$01$i4 = $124;
   }
  }
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $76 = (($pps) + 32|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($0|0)==(0);
  if (!($78)) {
   $i$016$i = 0;
   while(1) {
    $79 = (($map) + ($i$016$i<<2)|0);
    HEAP32[$79>>2] = 1;
    $80 = (($i$016$i) + 1)|0;
    $exitcond$i8 = ($80|0)==($0|0);
    if ($exitcond$i8) {
     break;
    } else {
     $i$016$i = $80;
    }
   }
  }
  $81 = (($picWidth) - ($77))|0;
  $82 = $81 >>> 1;
  $83 = (($picHeight) - ($77))|0;
  $84 = $83 >>> 1;
  $85 = ($unitsInSliceGroup0$0|0)==(0);
  if ($85) {
   STACKTOP = sp;return;
  }
  $86 = (($77) + -1)|0;
  $87 = $77 << 1;
  $88 = (($87) + -1)|0;
  $89 = (($picWidth) + -1)|0;
  $90 = (1 - ($87))|0;
  $91 = (($picHeight) + -1)|0;
  $bottomBound$015$i = $84;$k$07$i = 0;$leftBound$012$i = $82;$rightBound$014$i = $82;$topBound$013$i = $84;$x$08$i = $82;$xDir$010$i = $86;$y$09$i = $84;$yDir$011$i = $77;
  while(1) {
   $92 = Math_imul($y$09$i, $picWidth)|0;
   $93 = (($92) + ($x$08$i))|0;
   $94 = (($map) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($95|0)==(1);
   $97 = $96&1;
   if ($96) {
    HEAP32[$94>>2] = 0;
   }
   $98 = ($xDir$010$i|0)==(-1);
   $99 = ($x$08$i|0)==($leftBound$012$i|0);
   $or$cond$i10 = $98 & $99;
   do {
    if ($or$cond$i10) {
     $100 = (($leftBound$012$i) + -1)|0;
     $101 = ($100|0)>(0);
     $$$i = $101 ? $100 : 0;
     $bottomBound$1$i = $bottomBound$015$i;$leftBound$1$i = $$$i;$rightBound$1$i = $rightBound$014$i;$topBound$1$i = $topBound$013$i;$x$1$i = $$$i;$xDir$1$i = 0;$y$1$i = $y$09$i;$yDir$1$i = $88;
    } else {
     $102 = ($xDir$010$i|0)==(1);
     $103 = ($x$08$i|0)==($rightBound$014$i|0);
     $or$cond1$i = $102 & $103;
     if ($or$cond1$i) {
      $104 = (($rightBound$014$i) + 1)|0;
      $105 = ($104|0)<($89|0);
      $$2$i = $105 ? $104 : $89;
      $bottomBound$1$i = $bottomBound$015$i;$leftBound$1$i = $leftBound$012$i;$rightBound$1$i = $$2$i;$topBound$1$i = $topBound$013$i;$x$1$i = $$2$i;$xDir$1$i = 0;$y$1$i = $y$09$i;$yDir$1$i = $90;
      break;
     }
     $106 = ($yDir$011$i|0)==(-1);
     $107 = ($y$09$i|0)==($topBound$013$i|0);
     $or$cond3$i = $106 & $107;
     if ($or$cond3$i) {
      $108 = (($topBound$013$i) + -1)|0;
      $109 = ($108|0)>(0);
      $$4$i = $109 ? $108 : 0;
      $bottomBound$1$i = $bottomBound$015$i;$leftBound$1$i = $leftBound$012$i;$rightBound$1$i = $rightBound$014$i;$topBound$1$i = $$4$i;$x$1$i = $x$08$i;$xDir$1$i = $90;$y$1$i = $$4$i;$yDir$1$i = 0;
      break;
     }
     $110 = ($yDir$011$i|0)==(1);
     $111 = ($y$09$i|0)==($bottomBound$015$i|0);
     $or$cond5$i = $110 & $111;
     if ($or$cond5$i) {
      $112 = (($bottomBound$015$i) + 1)|0;
      $113 = ($112|0)<($91|0);
      $$6$i = $113 ? $112 : $91;
      $bottomBound$1$i = $$6$i;$leftBound$1$i = $leftBound$012$i;$rightBound$1$i = $rightBound$014$i;$topBound$1$i = $topBound$013$i;$x$1$i = $x$08$i;$xDir$1$i = $88;$y$1$i = $$6$i;$yDir$1$i = 0;
      break;
     } else {
      $114 = (($x$08$i) + ($xDir$010$i))|0;
      $115 = (($y$09$i) + ($yDir$011$i))|0;
      $bottomBound$1$i = $bottomBound$015$i;$leftBound$1$i = $leftBound$012$i;$rightBound$1$i = $rightBound$014$i;$topBound$1$i = $topBound$013$i;$x$1$i = $114;$xDir$1$i = $xDir$010$i;$y$1$i = $115;$yDir$1$i = $yDir$011$i;
      break;
     }
    }
   } while(0);
   $116 = (($97) + ($k$07$i))|0;
   $117 = ($116>>>0)<($unitsInSliceGroup0$0>>>0);
   if ($117) {
    $bottomBound$015$i = $bottomBound$1$i;$k$07$i = $116;$leftBound$012$i = $leftBound$1$i;$rightBound$014$i = $rightBound$1$i;$topBound$013$i = $topBound$1$i;$x$08$i = $x$1$i;$xDir$010$i = $xDir$1$i;$y$09$i = $y$1$i;$yDir$011$i = $yDir$1$i;
   } else {
    break;
   }
  }
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $37 = ($0|0)==(0);
  if ($37) {
   STACKTOP = sp;return;
  } else {
   $i$01$i17 = 0;
  }
  while(1) {
   $38 = (($i$01$i17>>>0) % ($picWidth>>>0))&-1;
   $39 = (($i$01$i17>>>0) / ($picWidth>>>0))&-1;
   $40 = Math_imul($39, $2)|0;
   $41 = $40 >>> 1;
   $42 = (($41) + ($38))|0;
   $43 = (($42>>>0) % ($2>>>0))&-1;
   $44 = (($map) + ($i$01$i17<<2)|0);
   HEAP32[$44>>2] = $43;
   $45 = (($i$01$i17) + 1)|0;
   $exitcond$i18 = ($45|0)==($0|0);
   if ($exitcond$i18) {
    break;
   } else {
    $i$01$i17 = $45;
   }
  }
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $21 = (($pps) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $group$0$ph$i = 0;$i$1$ph$i = 0;
  L58: while(1) {
   $23 = ($i$1$ph$i>>>0)<($0>>>0);
   $group$0$i = $group$0$ph$i;
   while(1) {
    $24 = ($group$0$i>>>0)<($2>>>0);
    $or$cond$i = $24 & $23;
    if ($or$cond$i) {
     break;
    }
    if ($23) {
     $group$0$i = 0;
    } else {
     break L58;
    }
   }
   $25 = (($22) + ($group$0$i<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0);
   L64: do {
    if ($27) {
     $36 = 0;
    } else {
     $142 = $26;$j$01$i = 0;
     while(1) {
      $28 = (($j$01$i) + ($i$1$ph$i))|0;
      $29 = ($28>>>0)<($0>>>0);
      if (!($29)) {
       $36 = $142;
       break L64;
      }
      $30 = (($map) + ($28<<2)|0);
      HEAP32[$30>>2] = $group$0$i;
      $31 = (($j$01$i) + 1)|0;
      $32 = HEAP32[$25>>2]|0;
      $33 = ($31>>>0)<($32>>>0);
      if ($33) {
       $142 = $32;$j$01$i = $31;
      } else {
       $36 = $32;
       break;
      }
     }
    }
   } while(0);
   $34 = (($group$0$i) + 1)|0;
   $35 = (($36) + ($i$1$ph$i))|0;
   $group$0$ph$i = $34;$i$1$ph$i = $35;
  }
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $46 = (($pps) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($pps) + 28|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($0|0)==(0);
  $51 = (($2) + -1)|0;
  if (!($50)) {
   $i$06$i = 0;
   while(1) {
    $54 = (($map) + ($i$06$i<<2)|0);
    HEAP32[$54>>2] = $51;
    $55 = (($i$06$i) + 1)|0;
    $exitcond$i12 = ($55|0)==($0|0);
    if ($exitcond$i12) {
     break;
    } else {
     $i$06$i = $55;
    }
   }
  }
  $52 = ($51|0)==(0);
  if ($52) {
   STACKTOP = sp;return;
  }
  $53 = (($2) + -2)|0;
  $57 = $53;
  while(1) {
   $59 = (($47) + ($57<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60>>>0) / ($picWidth>>>0))&-1;
   $62 = (($60>>>0) % ($picWidth>>>0))&-1;
   $63 = (($49) + ($57<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64>>>0) / ($picWidth>>>0))&-1;
   $66 = (($64>>>0) % ($picWidth>>>0))&-1;
   $67 = ($61>>>0)>($65>>>0);
   if (!($67)) {
    $68 = ($62>>>0)>($66>>>0);
    $y$02$i = $61;
    while(1) {
     if (!($68)) {
      $69 = Math_imul($y$02$i, $picWidth)|0;
      $x$01$i = $62;
      while(1) {
       $70 = (($x$01$i) + ($69))|0;
       $71 = (($map) + ($70<<2)|0);
       HEAP32[$71>>2] = $57;
       $72 = (($x$01$i) + 1)|0;
       $73 = ($72>>>0)>($66>>>0);
       if ($73) {
        break;
       } else {
        $x$01$i = $72;
       }
      }
     }
     $74 = (($y$02$i) + 1)|0;
     $75 = ($74>>>0)>($65>>>0);
     if ($75) {
      break;
     } else {
      $y$02$i = $74;
     }
    }
   }
   $56 = (($57) + -1)|0;
   $58 = ($57|0)==(0);
   if ($58) {
    break;
   } else {
    $57 = $56;
   }
  }
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $125 = (($pps) + 32|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($picWidth|0)==(0);
  if ($127) {
   STACKTOP = sp;return;
  }
  $128 = ($picHeight|0)==(0);
  $129 = (1 - ($126))|0;
  $j$03$i = 0;$k$04$i = 0;
  while(1) {
   if ($128) {
    $k$1$lcssa$i = $k$04$i;
   } else {
    $i$01$i = 0;$k$12$i = $k$04$i;
    while(1) {
     $130 = (($k$12$i) + 1)|0;
     $131 = ($k$12$i>>>0)<($sizeOfUpperLeftGroup$0>>>0);
     $132 = Math_imul($i$01$i, $picWidth)|0;
     $133 = (($132) + ($j$03$i))|0;
     $134 = (($map) + ($133<<2)|0);
     $$22 = $131 ? $126 : $129;
     HEAP32[$134>>2] = $$22;
     $135 = (($i$01$i) + 1)|0;
     $exitcond$i = ($135|0)==($picHeight|0);
     if ($exitcond$i) {
      break;
     } else {
      $i$01$i = $135;$k$12$i = $130;
     }
    }
    $136 = (($k$04$i) + ($picHeight))|0;
    $k$1$lcssa$i = $136;
   }
   $137 = (($j$03$i) + 1)|0;
   $exitcond6$i = ($137|0)==($picWidth|0);
   if ($exitcond6$i) {
    break;
   } else {
    $j$03$i = $137;$k$04$i = $k$1$lcssa$i;
   }
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  $18 = ($0|0)==(0);
  if ($18) {
   STACKTOP = sp;return;
  }
  $19 = (($pps) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $i$024 = 0;
  while(1) {
   $138 = (($20) + ($i$024<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (($map) + ($i$024<<2)|0);
   HEAP32[$140>>2] = $139;
   $141 = (($i$024) + 1)|0;
   $exitcond = ($141|0)==($0|0);
   if ($exitcond) {
    break;
   } else {
    $i$024 = $141;
   }
  }
  STACKTOP = sp;return;
 }
 }
}
function _get_h264bsdClip() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (3472|0);
}
function _h264bsdIntraPrediction($pMb,$mbLayer,$image,$mbNum,$constrainedIntraPred,$data) {
 $pMb = $pMb|0;
 $mbLayer = $mbLayer|0;
 $image = $image|0;
 $mbNum = $mbNum|0;
 $constrainedIntraPred = $constrainedIntraPred|0;
 $data = $data|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $pelAbove = 0, $pelLeft = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $pelAbove = sp + 32|0;
 $pelLeft = sp;
 _h264bsdGetNeighbourPels($image,$pelAbove,$pelLeft,$mbNum);
 $0 = HEAP32[$pMb>>2]|0;
 $1 = (_h264bsdMbPartPredMode($0)|0);
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = (($mbLayer) + 328|0);
  $4 = (_h264bsdIntra16x16Prediction($pMb,$data,$3,$pelAbove,$pelLeft,$constrainedIntraPred)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $6 = (_h264bsdIntra4x4Prediction($pMb,$data,$mbLayer,$pelAbove,$pelLeft,$constrainedIntraPred)|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($data) + 256|0);
 $9 = (($mbLayer) + 1352|0);
 $10 = (($pelAbove) + 21|0);
 $11 = (($pelLeft) + 16|0);
 $12 = (($mbLayer) + 140|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_h264bsdIntraChromaPrediction($pMb,$8,$9,$10,$11,$13,$constrainedIntraPred)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (($pMb) + 196|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17>>>0)>(1);
 if ($18) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _h264bsdWriteMacroblock($image,$data);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdGetNeighbourPels($image,$above,$left,$mbNum) {
 $image = $image|0;
 $above = $above|0;
 $left = $left|0;
 $mbNum = $mbNum|0;
 var $$1 = 0, $$12 = 0, $$sum = 0, $$sum10 = 0, $$sum100 = 0, $$sum101 = 0, $$sum102 = 0, $$sum103 = 0, $$sum104 = 0, $$sum105 = 0, $$sum106 = 0, $$sum107 = 0, $$sum108 = 0, $$sum32 = 0, $$sum42 = 0, $$sum43 = 0, $$sum44 = 0, $$sum45 = 0, $$sum46 = 0, $$sum47 = 0;
 var $$sum48 = 0, $$sum49 = 0, $$sum5 = 0, $$sum50 = 0, $$sum51 = 0, $$sum52 = 0, $$sum53 = 0, $$sum54 = 0, $$sum55 = 0, $$sum56 = 0, $$sum57 = 0, $$sum58 = 0, $$sum59 = 0, $$sum6 = 0, $$sum60 = 0, $$sum61 = 0, $$sum62 = 0, $$sum63 = 0, $$sum64 = 0, $$sum65 = 0;
 var $$sum66 = 0, $$sum67 = 0, $$sum68 = 0, $$sum69 = 0, $$sum7 = 0, $$sum70 = 0, $$sum71 = 0, $$sum72 = 0, $$sum73 = 0, $$sum74 = 0, $$sum75 = 0, $$sum76 = 0, $$sum77 = 0, $$sum78 = 0, $$sum79 = 0, $$sum8 = 0, $$sum80 = 0, $$sum81 = 0, $$sum82 = 0, $$sum83 = 0;
 var $$sum84 = 0, $$sum85 = 0, $$sum86 = 0, $$sum87 = 0, $$sum88 = 0, $$sum89 = 0, $$sum9 = 0, $$sum90 = 0, $$sum91 = 0, $$sum92 = 0, $$sum93 = 0, $$sum94 = 0, $$sum95 = 0, $$sum96 = 0, $$sum97 = 0, $$sum98 = 0, $$sum99 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep = 0, $scevgep37 = 0, $scevgep38 = 0, $scevgep40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mbNum|0)==(0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($image) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($image) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = Math_imul($4, $2)|0;
 $6 = (($mbNum>>>0) / ($2>>>0))&-1;
 $7 = Math_imul($6, $2)|0;
 $8 = (($mbNum) - ($7))|0;
 $9 = $2 << 4;
 $10 = HEAP32[$image>>2]|0;
 $11 = $2 << 8;
 $12 = Math_imul($11, $6)|0;
 $13 = $8 << 4;
 $$sum = (($13) + ($12))|0;
 $14 = ($6|0)!=(0);
 if ($14) {
  $15 = $9 | 1;
  $$sum10 = (($$sum) - ($15))|0;
  $16 = (($10) + ($$sum10)|0);
  $$sum89 = (($$sum10) + 1)|0;
  $17 = (($10) + ($$sum89)|0);
  $18 = HEAP8[$16>>0]|0;
  $19 = (($above) + 1|0);
  HEAP8[$above>>0] = $18;
  $$sum90 = (($$sum10) + 2)|0;
  $20 = (($10) + ($$sum90)|0);
  $21 = HEAP8[$17>>0]|0;
  $22 = (($above) + 2|0);
  HEAP8[$19>>0] = $21;
  $$sum91 = (($$sum10) + 3)|0;
  $23 = (($10) + ($$sum91)|0);
  $24 = HEAP8[$20>>0]|0;
  $25 = (($above) + 3|0);
  HEAP8[$22>>0] = $24;
  $$sum92 = (($$sum10) + 4)|0;
  $26 = (($10) + ($$sum92)|0);
  $27 = HEAP8[$23>>0]|0;
  $28 = (($above) + 4|0);
  HEAP8[$25>>0] = $27;
  $$sum93 = (($$sum10) + 5)|0;
  $29 = (($10) + ($$sum93)|0);
  $30 = HEAP8[$26>>0]|0;
  $31 = (($above) + 5|0);
  HEAP8[$28>>0] = $30;
  $$sum94 = (($$sum10) + 6)|0;
  $32 = (($10) + ($$sum94)|0);
  $33 = HEAP8[$29>>0]|0;
  $34 = (($above) + 6|0);
  HEAP8[$31>>0] = $33;
  $$sum95 = (($$sum10) + 7)|0;
  $35 = (($10) + ($$sum95)|0);
  $36 = HEAP8[$32>>0]|0;
  $37 = (($above) + 7|0);
  HEAP8[$34>>0] = $36;
  $$sum96 = (($$sum10) + 8)|0;
  $38 = (($10) + ($$sum96)|0);
  $39 = HEAP8[$35>>0]|0;
  $40 = (($above) + 8|0);
  HEAP8[$37>>0] = $39;
  $$sum97 = (($$sum10) + 9)|0;
  $41 = (($10) + ($$sum97)|0);
  $42 = HEAP8[$38>>0]|0;
  $43 = (($above) + 9|0);
  HEAP8[$40>>0] = $42;
  $$sum98 = (($$sum10) + 10)|0;
  $44 = (($10) + ($$sum98)|0);
  $45 = HEAP8[$41>>0]|0;
  $46 = (($above) + 10|0);
  HEAP8[$43>>0] = $45;
  $$sum99 = (($$sum10) + 11)|0;
  $47 = (($10) + ($$sum99)|0);
  $48 = HEAP8[$44>>0]|0;
  $49 = (($above) + 11|0);
  HEAP8[$46>>0] = $48;
  $$sum100 = (($$sum10) + 12)|0;
  $50 = (($10) + ($$sum100)|0);
  $51 = HEAP8[$47>>0]|0;
  $52 = (($above) + 12|0);
  HEAP8[$49>>0] = $51;
  $$sum101 = (($$sum10) + 13)|0;
  $53 = (($10) + ($$sum101)|0);
  $54 = HEAP8[$50>>0]|0;
  $55 = (($above) + 13|0);
  HEAP8[$52>>0] = $54;
  $$sum102 = (($$sum10) + 14)|0;
  $56 = (($10) + ($$sum102)|0);
  $57 = HEAP8[$53>>0]|0;
  $58 = (($above) + 14|0);
  HEAP8[$55>>0] = $57;
  $$sum103 = (($$sum10) + 15)|0;
  $59 = (($10) + ($$sum103)|0);
  $60 = HEAP8[$56>>0]|0;
  $61 = (($above) + 15|0);
  HEAP8[$58>>0] = $60;
  $$sum104 = (($$sum10) + 16)|0;
  $62 = (($10) + ($$sum104)|0);
  $63 = HEAP8[$59>>0]|0;
  $64 = (($above) + 16|0);
  HEAP8[$61>>0] = $63;
  $$sum105 = (($$sum10) + 17)|0;
  $65 = (($10) + ($$sum105)|0);
  $66 = HEAP8[$62>>0]|0;
  $67 = (($above) + 17|0);
  HEAP8[$64>>0] = $66;
  $$sum106 = (($$sum10) + 18)|0;
  $68 = (($10) + ($$sum106)|0);
  $69 = HEAP8[$65>>0]|0;
  $70 = (($above) + 18|0);
  HEAP8[$67>>0] = $69;
  $$sum107 = (($$sum10) + 19)|0;
  $71 = (($10) + ($$sum107)|0);
  $72 = HEAP8[$68>>0]|0;
  $73 = (($above) + 19|0);
  HEAP8[$70>>0] = $72;
  $$sum108 = (($$sum10) + 20)|0;
  $74 = (($10) + ($$sum108)|0);
  $75 = HEAP8[$71>>0]|0;
  $76 = (($above) + 20|0);
  HEAP8[$73>>0] = $75;
  $77 = HEAP8[$74>>0]|0;
  HEAP8[$76>>0] = $77;
  $scevgep40 = (($above) + 21|0);
  $$1 = $scevgep40;
 } else {
  $$1 = $above;
 }
 $78 = ($7|0)!=($mbNum|0);
 if ($78) {
  $$sum9 = (($$sum) + -1)|0;
  $79 = (($10) + ($$sum9)|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = (($left) + 1|0);
  HEAP8[$left>>0] = $80;
  $$sum74 = (($$sum9) + ($9))|0;
  $82 = (($10) + ($$sum74)|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = (($left) + 2|0);
  HEAP8[$81>>0] = $83;
  $$sum75 = (($$sum74) + ($9))|0;
  $85 = (($10) + ($$sum75)|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = (($left) + 3|0);
  HEAP8[$84>>0] = $86;
  $$sum76 = (($$sum75) + ($9))|0;
  $88 = (($10) + ($$sum76)|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = (($left) + 4|0);
  HEAP8[$87>>0] = $89;
  $$sum77 = (($$sum76) + ($9))|0;
  $91 = (($10) + ($$sum77)|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = (($left) + 5|0);
  HEAP8[$90>>0] = $92;
  $$sum78 = (($$sum77) + ($9))|0;
  $94 = (($10) + ($$sum78)|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = (($left) + 6|0);
  HEAP8[$93>>0] = $95;
  $$sum79 = (($$sum78) + ($9))|0;
  $97 = (($10) + ($$sum79)|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = (($left) + 7|0);
  HEAP8[$96>>0] = $98;
  $$sum80 = (($$sum79) + ($9))|0;
  $100 = (($10) + ($$sum80)|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = (($left) + 8|0);
  HEAP8[$99>>0] = $101;
  $$sum81 = (($$sum80) + ($9))|0;
  $103 = (($10) + ($$sum81)|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = (($left) + 9|0);
  HEAP8[$102>>0] = $104;
  $$sum82 = (($$sum81) + ($9))|0;
  $106 = (($10) + ($$sum82)|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = (($left) + 10|0);
  HEAP8[$105>>0] = $107;
  $$sum83 = (($$sum82) + ($9))|0;
  $109 = (($10) + ($$sum83)|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = (($left) + 11|0);
  HEAP8[$108>>0] = $110;
  $$sum84 = (($$sum83) + ($9))|0;
  $112 = (($10) + ($$sum84)|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = (($left) + 12|0);
  HEAP8[$111>>0] = $113;
  $$sum85 = (($$sum84) + ($9))|0;
  $115 = (($10) + ($$sum85)|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = (($left) + 13|0);
  HEAP8[$114>>0] = $116;
  $$sum86 = (($$sum85) + ($9))|0;
  $118 = (($10) + ($$sum86)|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = (($left) + 14|0);
  HEAP8[$117>>0] = $119;
  $$sum87 = (($$sum86) + ($9))|0;
  $121 = (($10) + ($$sum87)|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = (($left) + 15|0);
  HEAP8[$120>>0] = $122;
  $$sum88 = (($$sum87) + ($9))|0;
  $124 = (($10) + ($$sum88)|0);
  $125 = HEAP8[$124>>0]|0;
  HEAP8[$123>>0] = $125;
  $scevgep38 = (($left) + 16|0);
  $$12 = $scevgep38;
 } else {
  $$12 = $left;
 }
 $126 = $2 << 3;
 $127 = $126 & 2147483640;
 $128 = HEAP32[$image>>2]|0;
 $129 = $5 << 8;
 $130 = $6 << 3;
 $131 = Math_imul($130, $127)|0;
 $$sum5 = (($131) + ($129))|0;
 $132 = $8 << 3;
 $$sum6 = (($$sum5) + ($132))|0;
 if ($14) {
  $133 = $127 | 1;
  $$sum8 = (($$sum6) - ($133))|0;
  $134 = (($128) + ($$sum8)|0);
  $$sum57 = (($$sum8) + 1)|0;
  $135 = (($128) + ($$sum57)|0);
  $136 = HEAP8[$134>>0]|0;
  $137 = (($$1) + 1|0);
  HEAP8[$$1>>0] = $136;
  $$sum58 = (($$sum8) + 2)|0;
  $138 = (($128) + ($$sum58)|0);
  $139 = HEAP8[$135>>0]|0;
  $140 = (($$1) + 2|0);
  HEAP8[$137>>0] = $139;
  $$sum59 = (($$sum8) + 3)|0;
  $141 = (($128) + ($$sum59)|0);
  $142 = HEAP8[$138>>0]|0;
  $143 = (($$1) + 3|0);
  HEAP8[$140>>0] = $142;
  $$sum60 = (($$sum8) + 4)|0;
  $144 = (($128) + ($$sum60)|0);
  $145 = HEAP8[$141>>0]|0;
  $146 = (($$1) + 4|0);
  HEAP8[$143>>0] = $145;
  $$sum61 = (($$sum8) + 5)|0;
  $147 = (($128) + ($$sum61)|0);
  $148 = HEAP8[$144>>0]|0;
  $149 = (($$1) + 5|0);
  HEAP8[$146>>0] = $148;
  $$sum62 = (($$sum8) + 6)|0;
  $150 = (($128) + ($$sum62)|0);
  $151 = HEAP8[$147>>0]|0;
  $152 = (($$1) + 6|0);
  HEAP8[$149>>0] = $151;
  $$sum63 = (($$sum8) + 7)|0;
  $153 = (($128) + ($$sum63)|0);
  $154 = HEAP8[$150>>0]|0;
  $155 = (($$1) + 7|0);
  HEAP8[$152>>0] = $154;
  $$sum64 = (($$sum8) + 8)|0;
  $156 = (($128) + ($$sum64)|0);
  $157 = HEAP8[$153>>0]|0;
  $158 = (($$1) + 8|0);
  HEAP8[$155>>0] = $157;
  $159 = HEAP8[$156>>0]|0;
  HEAP8[$158>>0] = $159;
  $scevgep37 = (($$1) + 9|0);
  $160 = $5 << 6;
  $$sum65 = (($$sum8) + ($160))|0;
  $161 = (($128) + ($$sum65)|0);
  $$sum66 = (($$sum65) + 1)|0;
  $162 = (($128) + ($$sum66)|0);
  $163 = HEAP8[$161>>0]|0;
  $164 = (($$1) + 10|0);
  HEAP8[$scevgep37>>0] = $163;
  $$sum67 = (($$sum65) + 2)|0;
  $165 = (($128) + ($$sum67)|0);
  $166 = HEAP8[$162>>0]|0;
  $167 = (($$1) + 11|0);
  HEAP8[$164>>0] = $166;
  $$sum68 = (($$sum65) + 3)|0;
  $168 = (($128) + ($$sum68)|0);
  $169 = HEAP8[$165>>0]|0;
  $170 = (($$1) + 12|0);
  HEAP8[$167>>0] = $169;
  $$sum69 = (($$sum65) + 4)|0;
  $171 = (($128) + ($$sum69)|0);
  $172 = HEAP8[$168>>0]|0;
  $173 = (($$1) + 13|0);
  HEAP8[$170>>0] = $172;
  $$sum70 = (($$sum65) + 5)|0;
  $174 = (($128) + ($$sum70)|0);
  $175 = HEAP8[$171>>0]|0;
  $176 = (($$1) + 14|0);
  HEAP8[$173>>0] = $175;
  $$sum71 = (($$sum65) + 6)|0;
  $177 = (($128) + ($$sum71)|0);
  $178 = HEAP8[$174>>0]|0;
  $179 = (($$1) + 15|0);
  HEAP8[$176>>0] = $178;
  $$sum72 = (($$sum65) + 7)|0;
  $180 = (($128) + ($$sum72)|0);
  $181 = HEAP8[$177>>0]|0;
  $182 = (($$1) + 16|0);
  HEAP8[$179>>0] = $181;
  $$sum73 = (($$sum65) + 8)|0;
  $183 = (($128) + ($$sum73)|0);
  $184 = HEAP8[$180>>0]|0;
  $185 = (($$1) + 17|0);
  HEAP8[$182>>0] = $184;
  $186 = HEAP8[$183>>0]|0;
  HEAP8[$185>>0] = $186;
 }
 if (!($78)) {
  STACKTOP = sp;return;
 }
 $$sum7 = (($$sum6) + -1)|0;
 $187 = (($128) + ($$sum7)|0);
 $188 = HEAP8[$187>>0]|0;
 $189 = (($$12) + 1|0);
 HEAP8[$$12>>0] = $188;
 $$sum42 = (($$sum7) + ($127))|0;
 $190 = (($128) + ($$sum42)|0);
 $191 = HEAP8[$190>>0]|0;
 $192 = (($$12) + 2|0);
 HEAP8[$189>>0] = $191;
 $$sum43 = (($$sum42) + ($127))|0;
 $193 = (($128) + ($$sum43)|0);
 $194 = HEAP8[$193>>0]|0;
 $195 = (($$12) + 3|0);
 HEAP8[$192>>0] = $194;
 $$sum44 = (($$sum43) + ($127))|0;
 $196 = (($128) + ($$sum44)|0);
 $197 = HEAP8[$196>>0]|0;
 $198 = (($$12) + 4|0);
 HEAP8[$195>>0] = $197;
 $$sum45 = (($$sum44) + ($127))|0;
 $199 = (($128) + ($$sum45)|0);
 $200 = HEAP8[$199>>0]|0;
 $201 = (($$12) + 5|0);
 HEAP8[$198>>0] = $200;
 $$sum46 = (($$sum45) + ($127))|0;
 $202 = (($128) + ($$sum46)|0);
 $203 = HEAP8[$202>>0]|0;
 $204 = (($$12) + 6|0);
 HEAP8[$201>>0] = $203;
 $$sum47 = (($$sum46) + ($127))|0;
 $205 = (($128) + ($$sum47)|0);
 $206 = HEAP8[$205>>0]|0;
 $207 = (($$12) + 7|0);
 HEAP8[$204>>0] = $206;
 $$sum48 = (($$sum47) + ($127))|0;
 $208 = (($128) + ($$sum48)|0);
 $209 = HEAP8[$208>>0]|0;
 HEAP8[$207>>0] = $209;
 $scevgep = (($$12) + 8|0);
 $210 = $5 << 6;
 $211 = $2 << 6;
 $212 = (($210) - ($211))|0;
 $$sum32 = (($127) + ($212))|0;
 $$sum49 = (($$sum48) + ($$sum32))|0;
 $213 = (($128) + ($$sum49)|0);
 $214 = HEAP8[$213>>0]|0;
 $215 = (($$12) + 9|0);
 HEAP8[$scevgep>>0] = $214;
 $$sum50 = (($$sum49) + ($127))|0;
 $216 = (($128) + ($$sum50)|0);
 $217 = HEAP8[$216>>0]|0;
 $218 = (($$12) + 10|0);
 HEAP8[$215>>0] = $217;
 $$sum51 = (($$sum50) + ($127))|0;
 $219 = (($128) + ($$sum51)|0);
 $220 = HEAP8[$219>>0]|0;
 $221 = (($$12) + 11|0);
 HEAP8[$218>>0] = $220;
 $$sum52 = (($$sum51) + ($127))|0;
 $222 = (($128) + ($$sum52)|0);
 $223 = HEAP8[$222>>0]|0;
 $224 = (($$12) + 12|0);
 HEAP8[$221>>0] = $223;
 $$sum53 = (($$sum52) + ($127))|0;
 $225 = (($128) + ($$sum53)|0);
 $226 = HEAP8[$225>>0]|0;
 $227 = (($$12) + 13|0);
 HEAP8[$224>>0] = $226;
 $$sum54 = (($$sum53) + ($127))|0;
 $228 = (($128) + ($$sum54)|0);
 $229 = HEAP8[$228>>0]|0;
 $230 = (($$12) + 14|0);
 HEAP8[$227>>0] = $229;
 $$sum55 = (($$sum54) + ($127))|0;
 $231 = (($128) + ($$sum55)|0);
 $232 = HEAP8[$231>>0]|0;
 $233 = (($$12) + 15|0);
 HEAP8[$230>>0] = $232;
 $$sum56 = (($$sum55) + ($127))|0;
 $234 = (($128) + ($$sum56)|0);
 $235 = HEAP8[$234>>0]|0;
 HEAP8[$233>>0] = $235;
 STACKTOP = sp;return;
}
function _h264bsdIntra16x16Prediction($pMb,$data,$residual,$above,$left,$constrainedIntraPred) {
 $pMb = $pMb|0;
 $data = $data|0;
 $residual = $residual|0;
 $above = $above|0;
 $left = $left|0;
 $constrainedIntraPred = $constrainedIntraPred|0;
 var $$ = 0, $$0 = 0, $$03$i = 0, $$03$i13 = 0, $$10 = 0, $$11 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $availableA$0 = 0, $availableB$0 = 0, $availableD$0 = 0;
 var $exitcond$i = 0, $exitcond$i15 = 0, $exitcond$i18 = 0, $exitcond$i19 = 0, $exitcond8$i = 0, $i$03$i = 0, $i$04$i = 0, $i$04$i12 = 0, $i$22$i = 0, $j$01$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $phitmp$i = 0, $scevgep$i = 0, $scevgep$i14 = 0, $tmp$04$i = 0;
 var $tmp$3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pMb) + 200|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_h264bsdIsNeighbourAvailable($pMb,$1)|0);
 $3 = ($2|0)!=(0);
 $4 = ($constrainedIntraPred|0)!=(0);
 $or$cond = $3 & $4;
 if ($or$cond) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = (_h264bsdMbPartPredMode($6)|0);
  $8 = ($7|0)==(2);
  $$ = $8 ? 0 : $2;
  $availableA$0 = $$;
 } else {
  $availableA$0 = $2;
 }
 $9 = (($pMb) + 204|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_h264bsdIsNeighbourAvailable($pMb,$10)|0);
 $12 = ($11|0)!=(0);
 $or$cond3 = $12 & $4;
 if ($or$cond3) {
  $13 = HEAP32[$9>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = (_h264bsdMbPartPredMode($14)|0);
  $16 = ($15|0)==(2);
  $$10 = $16 ? 0 : $11;
  $availableB$0 = $$10;
 } else {
  $availableB$0 = $11;
 }
 $17 = (($pMb) + 212|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_h264bsdIsNeighbourAvailable($pMb,$18)|0);
 $20 = ($19|0)!=(0);
 $or$cond5 = $20 & $4;
 if ($or$cond5) {
  $21 = HEAP32[$17>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = (_h264bsdMbPartPredMode($22)|0);
  $24 = ($23|0)==(2);
  $$11 = $24 ? 0 : $19;
  $availableD$0 = $$11;
 } else {
  $availableD$0 = $19;
 }
 $25 = HEAP32[$pMb>>2]|0;
 $26 = (_h264bsdPredModeIntra16x16($25)|0);
 if ((($26|0) == 2)) {
  $110 = (($above) + 1|0);
  $111 = ($availableA$0|0)!=(0);
  $112 = ($availableB$0|0)!=(0);
  $or$cond$i = $111 & $112;
  do {
   if ($or$cond$i) {
    $i$03$i = 0;$tmp$04$i = 0;
    while(1) {
     $$sum = (($i$03$i) + 1)|0;
     $113 = (($above) + ($$sum)|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = $114&255;
     $116 = (($left) + ($i$03$i)|0);
     $117 = HEAP8[$116>>0]|0;
     $118 = $117&255;
     $119 = (($115) + ($tmp$04$i))|0;
     $120 = (($119) + ($118))|0;
     $exitcond$i19 = ($$sum|0)==(16);
     if ($exitcond$i19) {
      break;
     } else {
      $i$03$i = $$sum;$tmp$04$i = $120;
     }
    }
    $121 = (($120) + 16)|0;
    $122 = $121 >>> 5;
    $tmp$3$i = $122;
   } else {
    if ($111) {
     $123 = HEAP8[$left>>0]|0;
     $124 = $123&255;
     $125 = (($left) + 1|0);
     $126 = HEAP8[$125>>0]|0;
     $127 = $126&255;
     $128 = (($left) + 2|0);
     $129 = HEAP8[$128>>0]|0;
     $130 = $129&255;
     $131 = (($left) + 3|0);
     $132 = HEAP8[$131>>0]|0;
     $133 = $132&255;
     $134 = (($left) + 4|0);
     $135 = HEAP8[$134>>0]|0;
     $136 = $135&255;
     $137 = (($left) + 5|0);
     $138 = HEAP8[$137>>0]|0;
     $139 = $138&255;
     $140 = (($left) + 6|0);
     $141 = HEAP8[$140>>0]|0;
     $142 = $141&255;
     $143 = (($left) + 7|0);
     $144 = HEAP8[$143>>0]|0;
     $145 = $144&255;
     $146 = (($left) + 8|0);
     $147 = HEAP8[$146>>0]|0;
     $148 = $147&255;
     $149 = (($left) + 9|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150&255;
     $152 = (($left) + 10|0);
     $153 = HEAP8[$152>>0]|0;
     $154 = $153&255;
     $155 = (($left) + 11|0);
     $156 = HEAP8[$155>>0]|0;
     $157 = $156&255;
     $158 = (($left) + 12|0);
     $159 = HEAP8[$158>>0]|0;
     $160 = $159&255;
     $161 = (($left) + 13|0);
     $162 = HEAP8[$161>>0]|0;
     $163 = $162&255;
     $164 = (($left) + 14|0);
     $165 = HEAP8[$164>>0]|0;
     $166 = $165&255;
     $167 = (($left) + 15|0);
     $168 = HEAP8[$167>>0]|0;
     $169 = $168&255;
     $170 = (($124) + 8)|0;
     $171 = (($170) + ($127))|0;
     $172 = (($171) + ($130))|0;
     $173 = (($172) + ($133))|0;
     $174 = (($173) + ($136))|0;
     $175 = (($174) + ($139))|0;
     $176 = (($175) + ($142))|0;
     $177 = (($176) + ($145))|0;
     $178 = (($177) + ($148))|0;
     $179 = (($178) + ($151))|0;
     $180 = (($179) + ($154))|0;
     $181 = (($180) + ($157))|0;
     $182 = (($181) + ($160))|0;
     $183 = (($182) + ($163))|0;
     $184 = (($183) + ($166))|0;
     $185 = (($184) + ($169))|0;
     $186 = $185 >>> 4;
     $tmp$3$i = $186;
     break;
    }
    if ($112) {
     $187 = HEAP8[$110>>0]|0;
     $188 = $187&255;
     $189 = (($above) + 2|0);
     $190 = HEAP8[$189>>0]|0;
     $191 = $190&255;
     $192 = (($above) + 3|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = (($above) + 4|0);
     $196 = HEAP8[$195>>0]|0;
     $197 = $196&255;
     $198 = (($above) + 5|0);
     $199 = HEAP8[$198>>0]|0;
     $200 = $199&255;
     $201 = (($above) + 6|0);
     $202 = HEAP8[$201>>0]|0;
     $203 = $202&255;
     $204 = (($above) + 7|0);
     $205 = HEAP8[$204>>0]|0;
     $206 = $205&255;
     $207 = (($above) + 8|0);
     $208 = HEAP8[$207>>0]|0;
     $209 = $208&255;
     $210 = (($above) + 9|0);
     $211 = HEAP8[$210>>0]|0;
     $212 = $211&255;
     $213 = (($above) + 10|0);
     $214 = HEAP8[$213>>0]|0;
     $215 = $214&255;
     $216 = (($above) + 11|0);
     $217 = HEAP8[$216>>0]|0;
     $218 = $217&255;
     $219 = (($above) + 12|0);
     $220 = HEAP8[$219>>0]|0;
     $221 = $220&255;
     $222 = (($above) + 13|0);
     $223 = HEAP8[$222>>0]|0;
     $224 = $223&255;
     $225 = (($above) + 14|0);
     $226 = HEAP8[$225>>0]|0;
     $227 = $226&255;
     $228 = (($above) + 15|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = (($above) + 16|0);
     $232 = HEAP8[$231>>0]|0;
     $233 = $232&255;
     $234 = (($188) + 8)|0;
     $235 = (($234) + ($191))|0;
     $236 = (($235) + ($194))|0;
     $237 = (($236) + ($197))|0;
     $238 = (($237) + ($200))|0;
     $239 = (($238) + ($203))|0;
     $240 = (($239) + ($206))|0;
     $241 = (($240) + ($209))|0;
     $242 = (($241) + ($212))|0;
     $243 = (($242) + ($215))|0;
     $244 = (($243) + ($218))|0;
     $245 = (($244) + ($221))|0;
     $246 = (($245) + ($224))|0;
     $247 = (($246) + ($227))|0;
     $248 = (($247) + ($230))|0;
     $249 = (($248) + ($233))|0;
     $250 = $249 >>> 4;
     $tmp$3$i = $250;
    } else {
     $tmp$3$i = 128;
    }
   }
  } while(0);
  $251 = $tmp$3$i&255;
  _memset(($data|0),($251|0),256)|0;
 } else if ((($26|0) == 1)) {
  $76 = ($availableA$0|0)==(0);
  if ($76) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$03$i13 = $data;$i$04$i12 = 0;
   while(1) {
    $77 = (($left) + ($i$04$i12)|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = (($$03$i13) + 1|0);
    HEAP8[$$03$i13>>0] = $78;
    $80 = HEAP8[$77>>0]|0;
    $81 = (($$03$i13) + 2|0);
    HEAP8[$79>>0] = $80;
    $82 = HEAP8[$77>>0]|0;
    $83 = (($$03$i13) + 3|0);
    HEAP8[$81>>0] = $82;
    $84 = HEAP8[$77>>0]|0;
    $85 = (($$03$i13) + 4|0);
    HEAP8[$83>>0] = $84;
    $86 = HEAP8[$77>>0]|0;
    $87 = (($$03$i13) + 5|0);
    HEAP8[$85>>0] = $86;
    $88 = HEAP8[$77>>0]|0;
    $89 = (($$03$i13) + 6|0);
    HEAP8[$87>>0] = $88;
    $90 = HEAP8[$77>>0]|0;
    $91 = (($$03$i13) + 7|0);
    HEAP8[$89>>0] = $90;
    $92 = HEAP8[$77>>0]|0;
    $93 = (($$03$i13) + 8|0);
    HEAP8[$91>>0] = $92;
    $94 = HEAP8[$77>>0]|0;
    $95 = (($$03$i13) + 9|0);
    HEAP8[$93>>0] = $94;
    $96 = HEAP8[$77>>0]|0;
    $97 = (($$03$i13) + 10|0);
    HEAP8[$95>>0] = $96;
    $98 = HEAP8[$77>>0]|0;
    $99 = (($$03$i13) + 11|0);
    HEAP8[$97>>0] = $98;
    $100 = HEAP8[$77>>0]|0;
    $101 = (($$03$i13) + 12|0);
    HEAP8[$99>>0] = $100;
    $102 = HEAP8[$77>>0]|0;
    $103 = (($$03$i13) + 13|0);
    HEAP8[$101>>0] = $102;
    $104 = HEAP8[$77>>0]|0;
    $105 = (($$03$i13) + 14|0);
    HEAP8[$103>>0] = $104;
    $106 = HEAP8[$77>>0]|0;
    $107 = (($$03$i13) + 15|0);
    HEAP8[$105>>0] = $106;
    $108 = HEAP8[$77>>0]|0;
    HEAP8[$107>>0] = $108;
    $scevgep$i14 = (($$03$i13) + 16|0);
    $109 = (($i$04$i12) + 1)|0;
    $exitcond$i15 = ($109|0)==(16);
    if ($exitcond$i15) {
     break;
    } else {
     $$03$i13 = $scevgep$i14;$i$04$i12 = $109;
    }
   }
  }
 } else if ((($26|0) == 0)) {
  $27 = ($availableB$0|0)==(0);
  if ($27) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $28 = (($above) + 1|0);
  $29 = (($above) + 2|0);
  $30 = (($above) + 3|0);
  $31 = (($above) + 4|0);
  $32 = (($above) + 5|0);
  $33 = (($above) + 6|0);
  $34 = (($above) + 7|0);
  $35 = (($above) + 8|0);
  $36 = (($above) + 9|0);
  $37 = (($above) + 10|0);
  $38 = (($above) + 11|0);
  $39 = (($above) + 12|0);
  $40 = (($above) + 13|0);
  $41 = (($above) + 14|0);
  $42 = (($above) + 15|0);
  $43 = (($above) + 16|0);
  $$03$i = $data;$i$04$i = 0;
  while(1) {
   $44 = HEAP8[$28>>0]|0;
   $45 = (($$03$i) + 1|0);
   HEAP8[$$03$i>>0] = $44;
   $46 = HEAP8[$29>>0]|0;
   $47 = (($$03$i) + 2|0);
   HEAP8[$45>>0] = $46;
   $48 = HEAP8[$30>>0]|0;
   $49 = (($$03$i) + 3|0);
   HEAP8[$47>>0] = $48;
   $50 = HEAP8[$31>>0]|0;
   $51 = (($$03$i) + 4|0);
   HEAP8[$49>>0] = $50;
   $52 = HEAP8[$32>>0]|0;
   $53 = (($$03$i) + 5|0);
   HEAP8[$51>>0] = $52;
   $54 = HEAP8[$33>>0]|0;
   $55 = (($$03$i) + 6|0);
   HEAP8[$53>>0] = $54;
   $56 = HEAP8[$34>>0]|0;
   $57 = (($$03$i) + 7|0);
   HEAP8[$55>>0] = $56;
   $58 = HEAP8[$35>>0]|0;
   $59 = (($$03$i) + 8|0);
   HEAP8[$57>>0] = $58;
   $60 = HEAP8[$36>>0]|0;
   $61 = (($$03$i) + 9|0);
   HEAP8[$59>>0] = $60;
   $62 = HEAP8[$37>>0]|0;
   $63 = (($$03$i) + 10|0);
   HEAP8[$61>>0] = $62;
   $64 = HEAP8[$38>>0]|0;
   $65 = (($$03$i) + 11|0);
   HEAP8[$63>>0] = $64;
   $66 = HEAP8[$39>>0]|0;
   $67 = (($$03$i) + 12|0);
   HEAP8[$65>>0] = $66;
   $68 = HEAP8[$40>>0]|0;
   $69 = (($$03$i) + 13|0);
   HEAP8[$67>>0] = $68;
   $70 = HEAP8[$41>>0]|0;
   $71 = (($$03$i) + 14|0);
   HEAP8[$69>>0] = $70;
   $72 = HEAP8[$42>>0]|0;
   $73 = (($$03$i) + 15|0);
   HEAP8[$71>>0] = $72;
   $74 = HEAP8[$43>>0]|0;
   HEAP8[$73>>0] = $74;
   $scevgep$i = (($$03$i) + 16|0);
   $75 = (($i$04$i) + 1)|0;
   $exitcond$i = ($75|0)==(16);
   if ($exitcond$i) {
    break;
   } else {
    $$03$i = $scevgep$i;$i$04$i = $75;
   }
  }
 } else {
  $252 = ($availableA$0|0)!=(0);
  $253 = ($availableB$0|0)!=(0);
  $or$cond7 = $252 & $253;
  $254 = ($availableD$0|0)!=(0);
  $or$cond9 = $or$cond7 & $254;
  if (!($or$cond9)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $255 = (($above) + 1|0);
  $256 = (($above) + 16|0);
  $257 = HEAP8[$256>>0]|0;
  $258 = $257&255;
  $259 = (($left) + 15|0);
  $260 = HEAP8[$259>>0]|0;
  $261 = $260&255;
  $262 = (($261) + ($258))|0;
  $263 = (($above) + 9|0);
  $264 = HEAP8[$263>>0]|0;
  $265 = $264&255;
  $266 = (($above) + 7|0);
  $267 = HEAP8[$266>>0]|0;
  $268 = $267&255;
  $269 = (($265) - ($268))|0;
  $270 = (($above) + 10|0);
  $271 = HEAP8[$270>>0]|0;
  $272 = $271&255;
  $273 = (($above) + 6|0);
  $274 = HEAP8[$273>>0]|0;
  $275 = $274&255;
  $276 = (($272) - ($275))|0;
  $277 = $276 << 1;
  $278 = (($269) + ($277))|0;
  $279 = (($above) + 11|0);
  $280 = HEAP8[$279>>0]|0;
  $281 = $280&255;
  $282 = (($above) + 5|0);
  $283 = HEAP8[$282>>0]|0;
  $284 = $283&255;
  $285 = (($281) - ($284))|0;
  $286 = ($285*3)|0;
  $287 = (($278) + ($286))|0;
  $288 = (($above) + 12|0);
  $289 = HEAP8[$288>>0]|0;
  $290 = $289&255;
  $291 = (($above) + 4|0);
  $292 = HEAP8[$291>>0]|0;
  $293 = $292&255;
  $294 = (($290) - ($293))|0;
  $295 = $294 << 2;
  $296 = (($287) + ($295))|0;
  $297 = (($above) + 13|0);
  $298 = HEAP8[$297>>0]|0;
  $299 = $298&255;
  $300 = (($above) + 3|0);
  $301 = HEAP8[$300>>0]|0;
  $302 = $301&255;
  $303 = (($299) - ($302))|0;
  $304 = ($303*5)|0;
  $305 = (($296) + ($304))|0;
  $306 = (($above) + 14|0);
  $307 = HEAP8[$306>>0]|0;
  $308 = $307&255;
  $309 = (($above) + 2|0);
  $310 = HEAP8[$309>>0]|0;
  $311 = $310&255;
  $312 = (($308) - ($311))|0;
  $313 = ($312*6)|0;
  $314 = (($305) + ($313))|0;
  $315 = (($above) + 15|0);
  $316 = HEAP8[$315>>0]|0;
  $317 = $316&255;
  $318 = HEAP8[$255>>0]|0;
  $319 = $318&255;
  $320 = (($317) - ($319))|0;
  $321 = ($320*7)|0;
  $322 = (($314) + ($321))|0;
  $323 = HEAP8[$above>>0]|0;
  $324 = $323&255;
  $325 = (($258) - ($324))|0;
  $326 = $325 << 3;
  $327 = (($322) + ($326))|0;
  $328 = $262 << 4;
  $329 = ($327*5)|0;
  $330 = (($329) + 32)|0;
  $331 = (($left) + 8|0);
  $332 = HEAP8[$331>>0]|0;
  $333 = $332&255;
  $334 = (($left) + 6|0);
  $335 = HEAP8[$334>>0]|0;
  $336 = $335&255;
  $337 = (($333) - ($336))|0;
  $338 = (($left) + 9|0);
  $339 = HEAP8[$338>>0]|0;
  $340 = $339&255;
  $341 = (($left) + 5|0);
  $342 = HEAP8[$341>>0]|0;
  $343 = $342&255;
  $344 = (($340) - ($343))|0;
  $345 = $344 << 1;
  $346 = (($left) + 10|0);
  $347 = HEAP8[$346>>0]|0;
  $348 = $347&255;
  $349 = (($left) + 4|0);
  $350 = HEAP8[$349>>0]|0;
  $351 = $350&255;
  $352 = (($348) - ($351))|0;
  $353 = ($352*3)|0;
  $354 = (($left) + 11|0);
  $355 = HEAP8[$354>>0]|0;
  $356 = $355&255;
  $357 = (($left) + 3|0);
  $358 = HEAP8[$357>>0]|0;
  $359 = $358&255;
  $360 = (($356) - ($359))|0;
  $361 = $360 << 2;
  $362 = (($left) + 12|0);
  $363 = HEAP8[$362>>0]|0;
  $364 = $363&255;
  $365 = (($left) + 2|0);
  $366 = HEAP8[$365>>0]|0;
  $367 = $366&255;
  $368 = (($364) - ($367))|0;
  $369 = ($368*5)|0;
  $370 = (($left) + 13|0);
  $371 = HEAP8[$370>>0]|0;
  $372 = $371&255;
  $373 = (($left) + 1|0);
  $374 = HEAP8[$373>>0]|0;
  $375 = $374&255;
  $376 = (($372) - ($375))|0;
  $377 = ($376*6)|0;
  $378 = (($left) + 14|0);
  $379 = HEAP8[$378>>0]|0;
  $380 = $379&255;
  $381 = HEAP8[$left>>0]|0;
  $382 = $381&255;
  $383 = (($380) - ($382))|0;
  $384 = ($383*7)|0;
  $385 = $330 >> 6;
  $386 = (($261) - ($324))|0;
  $387 = $386 << 3;
  $388 = (($337) + ($387))|0;
  $389 = (($388) + ($345))|0;
  $390 = (($389) + ($353))|0;
  $391 = (($390) + ($361))|0;
  $392 = (($391) + ($369))|0;
  $393 = (($392) + ($377))|0;
  $394 = (($393) + ($384))|0;
  $395 = ($394*5)|0;
  $396 = (($395) + 32)|0;
  $397 = $396 >> 6;
  $398 = (($328) + 16)|0;
  $i$22$i = 0;
  while(1) {
   $399 = (($i$22$i) + -7)|0;
   $400 = Math_imul($399, $397)|0;
   $401 = (($398) + ($400))|0;
   $402 = $i$22$i << 4;
   $j$01$i = 0;
   while(1) {
    $403 = (($j$01$i) + -7)|0;
    $404 = Math_imul($403, $385)|0;
    $405 = (($401) + ($404))|0;
    $406 = $405 >> 5;
    $407 = ($406|0)<(0);
    if ($407) {
     $412 = 0;
    } else {
     $408 = ($406|0)>(255);
     $409 = $406&255;
     $phitmp$i = $408 ? -1 : $409;
     $412 = $phitmp$i;
    }
    $410 = (($j$01$i) + ($402))|0;
    $411 = (($data) + ($410)|0);
    HEAP8[$411>>0] = $412;
    $413 = (($j$01$i) + 1)|0;
    $exitcond$i18 = ($413|0)==(16);
    if ($exitcond$i18) {
     break;
    } else {
     $j$01$i = $413;
    }
   }
   $414 = (($i$22$i) + 1)|0;
   $exitcond8$i = ($414|0)==(16);
   if ($exitcond8$i) {
    break;
   } else {
    $i$22$i = $414;
   }
  }
 }
 _h264bsdAddResidual($data,$residual,0);
 $415 = (($residual) + 64|0);
 _h264bsdAddResidual($data,$415,1);
 $416 = (($residual) + 128|0);
 _h264bsdAddResidual($data,$416,2);
 $417 = (($residual) + 192|0);
 _h264bsdAddResidual($data,$417,3);
 $418 = (($residual) + 256|0);
 _h264bsdAddResidual($data,$418,4);
 $419 = (($residual) + 320|0);
 _h264bsdAddResidual($data,$419,5);
 $420 = (($residual) + 384|0);
 _h264bsdAddResidual($data,$420,6);
 $421 = (($residual) + 448|0);
 _h264bsdAddResidual($data,$421,7);
 $422 = (($residual) + 512|0);
 _h264bsdAddResidual($data,$422,8);
 $423 = (($residual) + 576|0);
 _h264bsdAddResidual($data,$423,9);
 $424 = (($residual) + 640|0);
 _h264bsdAddResidual($data,$424,10);
 $425 = (($residual) + 704|0);
 _h264bsdAddResidual($data,$425,11);
 $426 = (($residual) + 768|0);
 _h264bsdAddResidual($data,$426,12);
 $427 = (($residual) + 832|0);
 _h264bsdAddResidual($data,$427,13);
 $428 = (($residual) + 896|0);
 _h264bsdAddResidual($data,$428,14);
 $429 = (($residual) + 960|0);
 _h264bsdAddResidual($data,$429,15);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdIntra4x4Prediction($pMb,$data,$mbLayer,$above,$left,$constrainedIntraPred) {
 $pMb = $pMb|0;
 $data = $data|0;
 $mbLayer = $mbLayer|0;
 $above = $above|0;
 $left = $left|0;
 $constrainedIntraPred = $constrainedIntraPred|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$21 = 0, $$22 = 0, $$23 = 0, $$24 = 0, $$25 = 0, $$26 = 0, $$27 = 0, $$28 = 0, $$29 = 0, $$30 = 0, $$31 = 0, $$in = 0, $$in32 = 0, $$in33 = 0, $$in34 = 0, $$in35 = 0, $$masked = 0;
 var $$masked38 = 0, $$masked40 = 0, $$masked43 = 0, $$sum$i = 0, $$sum1$i = 0, $$sum2$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $availableA$0 = 0, $availableB$0 = 0, $availableC$0 = 0, $availableD$0 = 0, $block$048 = 0, $mode1$0$i = 0, $mode1$1$i = 0, $mode2$0$i = 0, $not$$i = 0, $or$cond = 0, $or$cond11 = 0, $or$cond15 = 0, $or$cond19 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $tmp$0$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($constrainedIntraPred|0)!=(0);
 $block$048 = 0;
 L1: while(1) {
  $1 = (_h264bsdNeighbour4x4BlockA($block$048)|0);
  $2 = $1;
  $3 = $2;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($2) + 4)|0;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (_h264bsdGetNeighbourMb($pMb,$4)|0);
  $9 = (_h264bsdIsNeighbourAvailable($pMb,$8)|0);
  $10 = ($9|0)!=(0);
  $or$cond = $10 & $0;
  if ($or$cond) {
   $11 = HEAP32[$8>>2]|0;
   $12 = (_h264bsdMbPartPredMode($11)|0);
   $13 = ($12|0)==(2);
   $$ = $13 ? 0 : $9;
   $availableA$0 = $$;
  } else {
   $availableA$0 = $9;
  }
  $14 = (_h264bsdNeighbour4x4BlockB($block$048)|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (_h264bsdGetNeighbourMb($pMb,$17)|0);
  $22 = (_h264bsdIsNeighbourAvailable($pMb,$21)|0);
  $23 = ($22|0)!=(0);
  $or$cond3 = $23 & $0;
  if ($or$cond3) {
   $24 = HEAP32[$21>>2]|0;
   $25 = (_h264bsdMbPartPredMode($24)|0);
   $26 = ($25|0)==(2);
   $$21 = $26 ? 0 : $22;
   $availableB$0 = $$21;
  } else {
   $availableB$0 = $22;
  }
  $27 = ($availableA$0|0)!=(0);
  $28 = ($availableB$0|0)!=(0);
  $$22 = $27 & $28;
  if ($$22) {
   $29 = HEAP32[$8>>2]|0;
   $30 = (_h264bsdMbPartPredMode($29)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    $32 = $7 & 255;
    $33 = ((($8) + ($32)|0) + 82|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34&255;
    $mode1$0$i = $35;
   } else {
    $mode1$0$i = 2;
   }
   $36 = HEAP32[$21>>2]|0;
   $37 = (_h264bsdMbPartPredMode($36)|0);
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = $20 & 255;
    $40 = ((($21) + ($39)|0) + 82|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $mode2$0$i = $42;
   } else {
    $mode2$0$i = 2;
   }
   $43 = ($mode1$0$i>>>0)<($mode2$0$i>>>0);
   $44 = $43 ? $mode1$0$i : $mode2$0$i;
   $mode1$1$i = $44;
  } else {
   $mode1$1$i = 2;
  }
  $45 = ((($mbLayer) + ($block$048<<2)|0) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(0);
  if ($47) {
   $48 = ((($mbLayer) + ($block$048<<2)|0) + 76|0);
   $49 = HEAP32[$48>>2]|0;
   $not$$i = ($49>>>0)>=($mode1$1$i>>>0);
   $50 = $not$$i&1;
   $$$i = (($50) + ($49))|0;
   $52 = $$$i;
  } else {
   $52 = $mode1$1$i;
  }
  $51 = $52&255;
  $53 = ((($pMb) + ($block$048)|0) + 82|0);
  HEAP8[$53>>0] = $51;
  $54 = (_h264bsdNeighbour4x4BlockC($block$048)|0);
  $55 = $54;
  $56 = $55;
  $57 = HEAP32[$56>>2]|0;
  $58 = (($55) + 4)|0;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = (_h264bsdGetNeighbourMb($pMb,$57)|0);
  $62 = (_h264bsdIsNeighbourAvailable($pMb,$61)|0);
  $63 = ($62|0)!=(0);
  $or$cond5 = $63 & $0;
  if ($or$cond5) {
   $64 = HEAP32[$61>>2]|0;
   $65 = (_h264bsdMbPartPredMode($64)|0);
   $66 = ($65|0)==(2);
   $$23 = $66 ? 0 : $62;
   $availableC$0 = $$23;
  } else {
   $availableC$0 = $62;
  }
  $67 = (_h264bsdNeighbour4x4BlockD($block$048)|0);
  $68 = $67;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($68) + 4)|0;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = (_h264bsdGetNeighbourMb($pMb,$70)|0);
  $75 = (_h264bsdIsNeighbourAvailable($pMb,$74)|0);
  $76 = ($75|0)!=(0);
  $or$cond7 = $76 & $0;
  if ($or$cond7) {
   $77 = HEAP32[$74>>2]|0;
   $78 = (_h264bsdMbPartPredMode($77)|0);
   $79 = ($78|0)==(2);
   $$24 = $79 ? 0 : $75;
   $availableD$0 = $$24;
  } else {
   $availableD$0 = $75;
  }
  $80 = (3344 + ($block$048<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (3408 + ($block$048<<2)|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = 1285 >>> $block$048;
  $85 = $84 & 1;
  $86 = ($85|0)!=(0);
  if ($86) {
   $87 = (($left) + ($83)|0);
   $88 = (($83) + 1)|0;
   $89 = (($left) + ($88)|0);
   $90 = (($83) + 2)|0;
   $91 = (($left) + ($90)|0);
   $92 = (($83) + 3)|0;
   $93 = (($left) + ($92)|0);
   $$in = $93;$$in32 = $91;$$in33 = $89;$$in34 = $87;
  } else {
   $94 = $83 << 4;
   $95 = (($94) + ($81))|0;
   $96 = (($95) + -1)|0;
   $97 = (($data) + ($96)|0);
   $98 = (($95) + 15)|0;
   $99 = (($data) + ($98)|0);
   $100 = (($95) + 31)|0;
   $101 = (($data) + ($100)|0);
   $102 = (($95) + 47)|0;
   $103 = (($data) + ($102)|0);
   $$in = $103;$$in32 = $101;$$in33 = $99;$$in34 = $97;
  }
  $104 = HEAP8[$$in34>>0]|0;
  $105 = HEAP8[$$in33>>0]|0;
  $106 = HEAP8[$$in32>>0]|0;
  $107 = HEAP8[$$in>>0]|0;
  $108 = 51 >>> $block$048;
  $109 = $108 & 1;
  $110 = ($109|0)==(0);
  do {
   if ($110) {
    $136 = (($83) + -1)|0;
    $137 = $136 << 4;
    $138 = (($137) + ($81))|0;
    $139 = (($data) + ($138)|0);
    $140 = HEAP8[$139>>0]|0;
    $141 = (($138) + 1)|0;
    $142 = (($data) + ($141)|0);
    $143 = HEAP8[$142>>0]|0;
    $144 = (($138) + 2)|0;
    $145 = (($data) + ($144)|0);
    $146 = HEAP8[$145>>0]|0;
    $147 = (($138) + 3)|0;
    $148 = (($data) + ($147)|0);
    $149 = HEAP8[$148>>0]|0;
    $150 = (($138) + 4)|0;
    $151 = (($data) + ($150)|0);
    $152 = HEAP8[$151>>0]|0;
    $153 = (($138) + 5)|0;
    $154 = (($data) + ($153)|0);
    $155 = HEAP8[$154>>0]|0;
    $156 = (($138) + 6)|0;
    $157 = (($data) + ($156)|0);
    $158 = HEAP8[$157>>0]|0;
    $159 = (($138) + 7)|0;
    $160 = (($data) + ($159)|0);
    $161 = HEAP8[$160>>0]|0;
    if ($86) {
     $162 = (($left) + ($136)|0);
     $$in35 = $162;$168 = $140;$170 = $143;$173 = $146;$176 = $149;$256 = $161;$257 = $158;$258 = $155;$259 = $152;
     break;
    } else {
     $163 = (($138) + -1)|0;
     $164 = (($data) + ($163)|0);
     $$in35 = $164;$168 = $140;$170 = $143;$173 = $146;$176 = $149;$256 = $161;$257 = $158;$258 = $155;$259 = $152;
     break;
    }
   } else {
    $111 = (($above) + ($81)|0);
    $112 = (($81) + 1)|0;
    $113 = (($above) + ($112)|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = (($81) + 2)|0;
    $116 = (($above) + ($115)|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = (($81) + 3)|0;
    $119 = (($above) + ($118)|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = (($81) + 4)|0;
    $122 = (($above) + ($121)|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = (($81) + 5)|0;
    $125 = (($above) + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = (($81) + 6)|0;
    $128 = (($above) + ($127)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = (($81) + 7)|0;
    $131 = (($above) + ($130)|0);
    $132 = HEAP8[$131>>0]|0;
    $133 = (($81) + 8)|0;
    $134 = (($above) + ($133)|0);
    $135 = HEAP8[$134>>0]|0;
    $$in35 = $111;$168 = $114;$170 = $117;$173 = $120;$176 = $123;$256 = $135;$257 = $132;$258 = $129;$259 = $126;
   }
  } while(0);
  $165 = HEAP8[$$in35>>0]|0;
  switch ($52|0) {
  case 1:  {
   if (!($27)) {
    $$0 = 1;
    label = 51;
    break L1;
   }
   $181 = $104&255;
   $182 = Math_imul($181, 16843009)|0;
   $183 = $182&255;
   $184 = $182 >>> 8;
   $185 = $184&255;
   $186 = $182 >>> 16;
   $187 = $186&255;
   $188 = $182 >>> 24;
   $189 = $188&255;
   $190 = $105&255;
   $191 = Math_imul($190, 16843009)|0;
   $192 = $191&255;
   $193 = $191 >>> 8;
   $194 = $193&255;
   $195 = $191 >>> 16;
   $196 = $195&255;
   $197 = $191 >>> 24;
   $198 = $197&255;
   $199 = $106&255;
   $200 = Math_imul($199, 16843009)|0;
   $201 = $200&255;
   $202 = $200 >>> 8;
   $203 = $202&255;
   $204 = $200 >>> 16;
   $205 = $204&255;
   $206 = $200 >>> 24;
   $207 = $206&255;
   $208 = $107&255;
   $209 = Math_imul($208, 16843009)|0;
   $609 = $189;$612 = $187;$616 = $185;$620 = $183;$623 = $198;$626 = $196;$630 = $194;$634 = $192;$638 = $207;$641 = $205;$645 = $203;$649 = $201;$653 = $209;
   break;
  }
  case 5:  {
   $372 = ($availableD$0|0)!=(0);
   $or$cond15 = $$22 & $372;
   if (!($or$cond15)) {
    $$0 = 1;
    label = 51;
    break L1;
   }
   $373 = $165&255;
   $374 = $168&255;
   $375 = (($374) + 1)|0;
   $376 = (($375) + ($373))|0;
   $377 = $376 >>> 1;
   $378 = $377&255;
   $379 = $374 << 1;
   $380 = $170&255;
   $381 = (($380) + 2)|0;
   $382 = (($381) + ($379))|0;
   $383 = (($382) + ($373))|0;
   $384 = $383 >>> 2;
   $385 = $384&255;
   $386 = $384 << 16;
   $387 = $373 << 1;
   $388 = $104&255;
   $389 = (($374) + 2)|0;
   $390 = (($389) + ($388))|0;
   $391 = (($390) + ($387))|0;
   $392 = $391 >>> 2;
   $393 = $392&255;
   $394 = $392 << 8;
   $395 = $394 & 65280;
   $396 = (($380) + 1)|0;
   $397 = (($396) + ($374))|0;
   $398 = $397 >>> 1;
   $399 = $398&255;
   $400 = $380 << 1;
   $401 = $173&255;
   $402 = (($400) + ($401))|0;
   $403 = (($402) + ($389))|0;
   $404 = $403 >>> 2;
   $405 = $404&255;
   $406 = $404 << 24;
   $$masked40 = $386 & 16711680;
   $407 = (($401) + 1)|0;
   $408 = (($407) + ($380))|0;
   $409 = $408 >>> 1;
   $410 = $409&255;
   $411 = $401 << 1;
   $412 = $176&255;
   $413 = (($412) + 2)|0;
   $414 = (($413) + ($380))|0;
   $415 = (($414) + ($411))|0;
   $416 = $415 >>> 2;
   $417 = $416&255;
   $418 = (($412) + 1)|0;
   $419 = (($418) + ($401))|0;
   $420 = $419 >>> 1;
   $421 = $420&255;
   $422 = $105&255;
   $423 = $388 << 1;
   $424 = (($422) + 2)|0;
   $425 = (($424) + ($423))|0;
   $426 = (($425) + ($373))|0;
   $427 = $426 >>> 2;
   $428 = $427&255;
   $429 = $106&255;
   $430 = $422 << 1;
   $431 = (($388) + 2)|0;
   $432 = (($431) + ($429))|0;
   $433 = (($432) + ($430))|0;
   $434 = $433 >>> 2;
   $435 = $434 & 255;
   $436 = $406 | $435;
   $437 = $436 | $$masked40;
   $438 = $437 | $395;
   $609 = $421;$612 = $410;$616 = $399;$620 = $378;$623 = $417;$626 = $405;$630 = $385;$634 = $393;$638 = $410;$641 = $399;$645 = $378;$649 = $428;$653 = $438;
   break;
  }
  case 3:  {
   $254 = ($availableB$0|0)==(0);
   if ($254) {
    $$0 = 1;
    label = 51;
    break L1;
   }
   $255 = ($availableC$0|0)==(0);
   $$25 = $255 ? $176 : $256;
   $$26 = $255 ? $176 : $257;
   $$27 = $255 ? $176 : $258;
   $$28 = $255 ? $176 : $259;
   $260 = $168&255;
   $261 = $170&255;
   $262 = $261 << 1;
   $263 = $173&255;
   $264 = (($263) + 2)|0;
   $265 = (($264) + ($260))|0;
   $266 = (($265) + ($262))|0;
   $267 = $266 >>> 2;
   $268 = $267&255;
   $269 = $263 << 1;
   $270 = $176&255;
   $271 = (($270) + 2)|0;
   $272 = (($271) + ($261))|0;
   $273 = (($272) + ($269))|0;
   $274 = $273 >>> 2;
   $275 = $274&255;
   $276 = $270 << 1;
   $277 = $$28&255;
   $278 = (($264) + ($276))|0;
   $279 = (($278) + ($277))|0;
   $280 = $279 >>> 2;
   $281 = $280&255;
   $282 = $277 << 1;
   $283 = $$27&255;
   $284 = (($271) + ($283))|0;
   $285 = (($284) + ($282))|0;
   $286 = $285 >>> 2;
   $287 = $286&255;
   $288 = $286 & 255;
   $289 = $283 << 1;
   $290 = $$26&255;
   $291 = (($277) + 2)|0;
   $292 = (($291) + ($290))|0;
   $293 = (($292) + ($289))|0;
   $294 = $293 >>> 2;
   $295 = $294&255;
   $296 = $294 << 8;
   $297 = $296 & 65280;
   $298 = $290 << 1;
   $299 = $$25&255;
   $300 = (($283) + 2)|0;
   $301 = (($300) + ($299))|0;
   $302 = (($301) + ($298))|0;
   $303 = $302 >>> 2;
   $304 = $303&255;
   $305 = $303 << 16;
   $306 = ($299*3)|0;
   $307 = (($290) + 2)|0;
   $308 = (($307) + ($306))|0;
   $309 = $308 >>> 2;
   $310 = $309 << 24;
   $$masked43 = $305 & 16711680;
   $311 = $310 | $288;
   $312 = $311 | $297;
   $313 = $312 | $$masked43;
   $609 = $287;$612 = $281;$616 = $275;$620 = $268;$623 = $295;$626 = $287;$630 = $281;$634 = $275;$638 = $304;$641 = $295;$645 = $287;$649 = $281;$653 = $313;
   break;
  }
  case 6:  {
   $439 = ($availableD$0|0)!=(0);
   $or$cond19 = $$22 & $439;
   if (!($or$cond19)) {
    $$0 = 1;
    label = 51;
    break L1;
   }
   $440 = $165&255;
   $441 = $104&255;
   $442 = (($441) + 1)|0;
   $443 = (($442) + ($440))|0;
   $444 = $443 >>> 1;
   $445 = $444&255;
   $446 = $441 << 1;
   $447 = $105&255;
   $448 = (($446) + 2)|0;
   $449 = (($448) + ($447))|0;
   $450 = (($449) + ($440))|0;
   $451 = $450 >>> 2;
   $452 = $451&255;
   $453 = (($442) + ($447))|0;
   $454 = $453 >>> 1;
   $455 = $454&255;
   $456 = $447 << 1;
   $457 = $106&255;
   $458 = (($441) + 2)|0;
   $459 = (($458) + ($456))|0;
   $460 = (($459) + ($457))|0;
   $461 = $460 >>> 2;
   $462 = $461&255;
   $463 = $461 << 24;
   $464 = (($447) + 1)|0;
   $465 = (($464) + ($457))|0;
   $466 = $465 >>> 1;
   $467 = $466&255;
   $468 = $466 << 16;
   $469 = $468 & 16711680;
   $470 = $457 << 1;
   $471 = $107&255;
   $472 = (($447) + 2)|0;
   $473 = (($472) + ($470))|0;
   $474 = (($473) + ($471))|0;
   $475 = $474 << 6;
   $476 = $463 | $469;
   $477 = (($457) + 1)|0;
   $478 = (($477) + ($471))|0;
   $479 = $478 >>> 1;
   $480 = $479 & 255;
   $$masked38 = $475 & 65280;
   $481 = $476 | $480;
   $482 = $481 | $$masked38;
   $483 = $168&255;
   $484 = $440 << 1;
   $485 = (($458) + ($483))|0;
   $486 = (($485) + ($484))|0;
   $487 = $486 >>> 2;
   $488 = $487&255;
   $489 = $170&255;
   $490 = $483 << 1;
   $491 = (($489) + 2)|0;
   $492 = (($491) + ($490))|0;
   $493 = (($492) + ($440))|0;
   $494 = $493 >>> 2;
   $495 = $494&255;
   $496 = $173&255;
   $497 = $489 << 1;
   $498 = (($496) + 2)|0;
   $499 = (($498) + ($497))|0;
   $500 = (($499) + ($483))|0;
   $501 = $500 >>> 2;
   $502 = $501&255;
   $609 = $502;$612 = $495;$616 = $488;$620 = $445;$623 = $488;$626 = $445;$630 = $452;$634 = $455;$638 = $452;$641 = $455;$645 = $462;$649 = $467;$653 = $482;
   break;
  }
  case 7:  {
   $503 = ($availableB$0|0)==(0);
   if ($503) {
    $$0 = 1;
    label = 51;
    break L1;
   }
   $504 = ($availableC$0|0)==(0);
   $$29 = $504 ? $176 : $257;
   $$30 = $504 ? $176 : $258;
   $$31 = $504 ? $176 : $259;
   $505 = $168&255;
   $506 = $170&255;
   $507 = (($506) + 1)|0;
   $508 = (($507) + ($505))|0;
   $509 = $508 >>> 1;
   $510 = $509&255;
   $511 = $173&255;
   $512 = (($511) + 1)|0;
   $513 = (($512) + ($506))|0;
   $514 = $513 >>> 1;
   $515 = $514&255;
   $516 = $176&255;
   $517 = (($516) + 1)|0;
   $518 = (($517) + ($511))|0;
   $519 = $518 >>> 1;
   $520 = $519&255;
   $521 = $$31&255;
   $522 = (($517) + ($521))|0;
   $523 = $522 >>> 1;
   $524 = $523&255;
   $525 = $506 << 1;
   $526 = (($511) + 2)|0;
   $527 = (($526) + ($505))|0;
   $528 = (($527) + ($525))|0;
   $529 = $528 >>> 2;
   $530 = $529&255;
   $531 = $511 << 1;
   $532 = (($516) + 2)|0;
   $533 = (($532) + ($506))|0;
   $534 = (($533) + ($531))|0;
   $535 = $534 >>> 2;
   $536 = $535&255;
   $537 = $516 << 1;
   $538 = (($526) + ($537))|0;
   $539 = (($538) + ($521))|0;
   $540 = $539 >>> 2;
   $541 = $540&255;
   $542 = $521 << 1;
   $543 = $$30&255;
   $544 = (($532) + ($543))|0;
   $545 = (($544) + ($542))|0;
   $546 = $545 >>> 2;
   $547 = $546&255;
   $548 = (($521) + 1)|0;
   $549 = (($548) + ($543))|0;
   $550 = $549 >>> 1;
   $551 = $550&255;
   $552 = $535 & 255;
   $553 = $540 << 8;
   $554 = $553 & 65280;
   $555 = $546 << 16;
   $556 = $543 << 1;
   $557 = $$29&255;
   $558 = (($521) + 2)|0;
   $559 = (($558) + ($557))|0;
   $560 = (($559) + ($556))|0;
   $561 = $560 >>> 2;
   $562 = $561 << 24;
   $$masked = $555 & 16711680;
   $563 = $$masked | $552;
   $564 = $563 | $562;
   $565 = $564 | $554;
   $609 = $524;$612 = $520;$616 = $515;$620 = $510;$623 = $547;$626 = $541;$630 = $536;$634 = $530;$638 = $551;$641 = $524;$645 = $520;$649 = $515;$653 = $565;
   break;
  }
  case 4:  {
   $314 = ($availableD$0|0)!=(0);
   $or$cond11 = $$22 & $314;
   if (!($or$cond11)) {
    $$0 = 1;
    label = 51;
    break L1;
   }
   $315 = $168&255;
   $316 = $165&255;
   $317 = $316 << 1;
   $318 = $104&255;
   $319 = (($315) + 2)|0;
   $320 = (($319) + ($318))|0;
   $321 = (($320) + ($317))|0;
   $322 = $321 >>> 2;
   $323 = $322&255;
   $324 = $322 << 24;
   $325 = $315 << 1;
   $326 = $170&255;
   $327 = (($316) + 2)|0;
   $328 = (($325) + ($326))|0;
   $329 = (($328) + ($327))|0;
   $330 = $329 >>> 2;
   $331 = $330&255;
   $332 = $326 << 1;
   $333 = $173&255;
   $334 = (($332) + ($333))|0;
   $335 = (($334) + ($319))|0;
   $336 = $335 >>> 2;
   $337 = $336&255;
   $338 = $333 << 1;
   $339 = $176&255;
   $340 = (($339) + 2)|0;
   $341 = (($340) + ($326))|0;
   $342 = (($341) + ($338))|0;
   $343 = $342 >>> 2;
   $344 = $343&255;
   $345 = $318 << 1;
   $346 = $105&255;
   $347 = (($346) + ($345))|0;
   $348 = (($347) + ($327))|0;
   $349 = $348 >>> 2;
   $350 = $349&255;
   $351 = $349 << 16;
   $352 = $351 & 16711680;
   $353 = $346 << 1;
   $354 = $106&255;
   $355 = (($318) + 2)|0;
   $356 = (($355) + ($353))|0;
   $357 = (($356) + ($354))|0;
   $358 = $357 >>> 2;
   $359 = $358&255;
   $360 = $358 << 8;
   $361 = $360 & 65280;
   $362 = $354 << 1;
   $363 = $107&255;
   $364 = (($346) + 2)|0;
   $365 = (($364) + ($362))|0;
   $366 = (($365) + ($363))|0;
   $367 = $366 >>> 2;
   $368 = $367 & 255;
   $369 = $368 | $361;
   $370 = $369 | $324;
   $371 = $370 | $352;
   $609 = $344;$612 = $337;$616 = $331;$620 = $323;$623 = $337;$626 = $331;$630 = $323;$634 = $350;$638 = $331;$641 = $323;$645 = $350;$649 = $359;$653 = $371;
   break;
  }
  case 0:  {
   $166 = ($availableB$0|0)==(0);
   if ($166) {
    $$0 = 1;
    label = 51;
    break L1;
   }
   $167 = $168&255;
   $169 = $170&255;
   $171 = $169 << 8;
   $172 = $173&255;
   $174 = $172 << 16;
   $175 = $176&255;
   $177 = $175 << 24;
   $178 = $174 | $177;
   $179 = $178 | $171;
   $180 = $179 | $167;
   $609 = $176;$612 = $173;$616 = $170;$620 = $168;$623 = $176;$626 = $173;$630 = $170;$634 = $168;$638 = $176;$641 = $173;$645 = $170;$649 = $168;$653 = $180;
   break;
  }
  case 2:  {
   do {
    if ($$22) {
     $210 = $168&255;
     $211 = $170&255;
     $212 = $173&255;
     $213 = $176&255;
     $214 = $104&255;
     $215 = $105&255;
     $216 = $106&255;
     $217 = $107&255;
     $218 = (($214) + 4)|0;
     $219 = (($218) + ($215))|0;
     $220 = (($219) + ($216))|0;
     $221 = (($220) + ($217))|0;
     $222 = (($221) + ($213))|0;
     $223 = (($222) + ($212))|0;
     $224 = (($223) + ($211))|0;
     $225 = (($224) + ($210))|0;
     $226 = $225 >>> 3;
     $tmp$0$i = $226;
    } else {
     if ($27) {
      $227 = $104&255;
      $228 = $105&255;
      $229 = $106&255;
      $230 = $107&255;
      $231 = (($227) + 2)|0;
      $232 = (($231) + ($228))|0;
      $233 = (($232) + ($229))|0;
      $234 = (($233) + ($230))|0;
      $235 = $234 >>> 2;
      $tmp$0$i = $235;
      break;
     }
     if ($28) {
      $236 = $168&255;
      $237 = $170&255;
      $238 = $173&255;
      $239 = $176&255;
      $240 = (($239) + 2)|0;
      $241 = (($240) + ($238))|0;
      $242 = (($241) + ($237))|0;
      $243 = (($242) + ($236))|0;
      $244 = $243 >>> 2;
      $tmp$0$i = $244;
     } else {
      $tmp$0$i = 128;
     }
    }
   } while(0);
   $245 = $tmp$0$i & 255;
   $246 = Math_imul($245, 16843009)|0;
   $247 = $246&255;
   $248 = $246 >>> 8;
   $249 = $248&255;
   $250 = $246 >>> 16;
   $251 = $250&255;
   $252 = $246 >>> 24;
   $253 = $252&255;
   $609 = $253;$612 = $251;$616 = $249;$620 = $247;$623 = $253;$626 = $251;$630 = $249;$634 = $247;$638 = $253;$641 = $251;$645 = $249;$649 = $247;$653 = $246;
   break;
  }
  default: {
   if (!($27)) {
    $$0 = 1;
    label = 51;
    break L1;
   }
   $566 = $104&255;
   $567 = $105&255;
   $568 = (($566) + 1)|0;
   $569 = (($568) + ($567))|0;
   $570 = $569 >>> 1;
   $571 = $570&255;
   $572 = $567 << 1;
   $573 = $106&255;
   $574 = (($566) + 2)|0;
   $575 = (($574) + ($572))|0;
   $576 = (($575) + ($573))|0;
   $577 = $576 >>> 2;
   $578 = $577&255;
   $579 = (($567) + 1)|0;
   $580 = (($579) + ($573))|0;
   $581 = $580 >>> 1;
   $582 = $581&255;
   $583 = $573 << 1;
   $584 = $107&255;
   $585 = (($567) + 2)|0;
   $586 = (($585) + ($583))|0;
   $587 = (($586) + ($584))|0;
   $588 = $587 >>> 2;
   $589 = $588&255;
   $590 = (($573) + 1)|0;
   $591 = (($590) + ($584))|0;
   $592 = $591 >>> 1;
   $593 = $592&255;
   $594 = ($584*3)|0;
   $595 = (($573) + 2)|0;
   $596 = (($595) + ($594))|0;
   $597 = $596 >>> 2;
   $598 = $597&255;
   $599 = $584 << 8;
   $600 = $584 << 16;
   $601 = $599 | $584;
   $602 = $601 | $600;
   $603 = $584 << 24;
   $604 = $602 | $603;
   $609 = $589;$612 = $582;$616 = $578;$620 = $571;$623 = $598;$626 = $593;$630 = $589;$634 = $582;$638 = $107;$641 = $107;$645 = $598;$649 = $593;$653 = $604;
  }
  }
  $605 = $83 << 4;
  $606 = (($605) + ($81))|0;
  $607 = (($data) + ($606)|0);
  $608 = $609&255;
  $610 = $608 << 24;
  $611 = $612&255;
  $613 = $611 << 16;
  $614 = $613 | $610;
  $615 = $616&255;
  $617 = $615 << 8;
  $618 = $614 | $617;
  $619 = $620&255;
  $621 = $618 | $619;
  HEAP32[$607>>2] = $621;
  $622 = $623&255;
  $624 = $622 << 24;
  $625 = $626&255;
  $627 = $625 << 16;
  $628 = $627 | $624;
  $629 = $630&255;
  $631 = $629 << 8;
  $632 = $628 | $631;
  $633 = $634&255;
  $635 = $632 | $633;
  $$sum$i = (($606) + 16)|0;
  $636 = (($data) + ($$sum$i)|0);
  HEAP32[$636>>2] = $635;
  $637 = $638&255;
  $639 = $637 << 24;
  $640 = $641&255;
  $642 = $640 << 16;
  $643 = $642 | $639;
  $644 = $645&255;
  $646 = $644 << 8;
  $647 = $643 | $646;
  $648 = $649&255;
  $650 = $647 | $648;
  $$sum1$i = (($606) + 32)|0;
  $651 = (($data) + ($$sum1$i)|0);
  HEAP32[$651>>2] = $650;
  $$sum2$i = (($606) + 48)|0;
  $652 = (($data) + ($$sum2$i)|0);
  HEAP32[$652>>2] = $653;
  $654 = ((($mbLayer) + ($block$048<<6)|0) + 328|0);
  _h264bsdAddResidual($data,$654,$block$048);
  $655 = (($block$048) + 1)|0;
  $656 = ($655>>>0)<(16);
  if ($656) {
   $block$048 = $655;
  } else {
   $$0 = 0;
   label = 51;
   break;
  }
 }
 if ((label|0) == 51) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _h264bsdIntraChromaPrediction($pMb,$data,$residual,$above,$left,$predMode,$constrainedIntraPred) {
 $pMb = $pMb|0;
 $data = $data|0;
 $residual = $residual|0;
 $above = $above|0;
 $left = $left|0;
 $predMode = $predMode|0;
 $constrainedIntraPred = $constrainedIntraPred|0;
 var $$ = 0, $$0 = 0, $$01030 = 0, $$011$i = 0, $$01128 = 0, $$012$i = 0, $$012$i18 = 0, $$012$pn = 0, $$01226 = 0, $$01325 = 0, $$03$i = 0, $$03$i17 = 0, $$14 = 0, $$15 = 0, $$sum$i = 0, $$sum1$i = 0, $$sum2$i = 0, $$sum3$i = 0, $$sum4$i = 0, $$sum5$i = 0;
 var $$sum6$i = 0, $$sum7$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$09$i = 0, $availableA$0 = 0, $availableB$0 = 0, $availableD$0 = 0, $block$033 = 0, $comp$032 = 0, $i$010$i = 0, $i$04$i = 0, $i$04$i16 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $or$cond9 = 0, $scevgep$i = 0, $tmp1$0$i = 0, $tmp1$1$i = 0, $tmp2$0$i = 0, $tmp2$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pMb) + 200|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_h264bsdIsNeighbourAvailable($pMb,$1)|0);
 $3 = ($2|0)!=(0);
 $4 = ($constrainedIntraPred|0)!=(0);
 $or$cond = $3 & $4;
 if ($or$cond) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = (_h264bsdMbPartPredMode($6)|0);
  $8 = ($7|0)==(2);
  $$ = $8 ? 0 : $2;
  $availableA$0 = $$;
 } else {
  $availableA$0 = $2;
 }
 $9 = (($pMb) + 204|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_h264bsdIsNeighbourAvailable($pMb,$10)|0);
 $12 = ($11|0)!=(0);
 $or$cond3 = $12 & $4;
 if ($or$cond3) {
  $13 = HEAP32[$9>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = (_h264bsdMbPartPredMode($14)|0);
  $16 = ($15|0)==(2);
  $$14 = $16 ? 0 : $11;
  $availableB$0 = $$14;
 } else {
  $availableB$0 = $11;
 }
 $17 = (($pMb) + 212|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_h264bsdIsNeighbourAvailable($pMb,$18)|0);
 $20 = ($19|0)!=(0);
 $or$cond5 = $20 & $4;
 if ($or$cond5) {
  $21 = HEAP32[$17>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = (_h264bsdMbPartPredMode($22)|0);
  $24 = ($23|0)==(2);
  $$15 = $24 ? 0 : $19;
  $availableD$0 = $$15;
 } else {
  $availableD$0 = $19;
 }
 $25 = ($availableA$0|0)!=(0);
 $26 = ($availableB$0|0)!=(0);
 $or$cond7 = $25 & $26;
 $27 = ($availableD$0|0)!=(0);
 $or$cond9 = $or$cond7 & $27;
 $28 = ($availableA$0|0)==(0);
 $29 = ($availableB$0|0)==(0);
 $$01030 = $data;$$01128 = $left;$$01226 = $above;$$01325 = $residual;$block$033 = 16;$comp$032 = 0;
 while(1) {
  if ((($predMode|0) == 1)) {
   if ($28) {
    $$0 = 1;
    label = 29;
    break;
   } else {
    $$012$i = $$01030;$$03$i = $$01128;$i$04$i = 8;
   }
   while(1) {
    $217 = (($i$04$i) + -1)|0;
    $218 = HEAP8[$$03$i>>0]|0;
    $219 = (($$012$i) + 1|0);
    HEAP8[$$012$i>>0] = $218;
    $220 = HEAP8[$$03$i>>0]|0;
    $221 = (($$012$i) + 2|0);
    HEAP8[$219>>0] = $220;
    $222 = HEAP8[$$03$i>>0]|0;
    $223 = (($$012$i) + 3|0);
    HEAP8[$221>>0] = $222;
    $224 = HEAP8[$$03$i>>0]|0;
    $225 = (($$012$i) + 4|0);
    HEAP8[$223>>0] = $224;
    $226 = HEAP8[$$03$i>>0]|0;
    $227 = (($$012$i) + 5|0);
    HEAP8[$225>>0] = $226;
    $228 = HEAP8[$$03$i>>0]|0;
    $229 = (($$012$i) + 6|0);
    HEAP8[$227>>0] = $228;
    $230 = HEAP8[$$03$i>>0]|0;
    $231 = (($$012$i) + 7|0);
    HEAP8[$229>>0] = $230;
    $232 = (($$03$i) + 1|0);
    $233 = HEAP8[$$03$i>>0]|0;
    $234 = (($$012$i) + 8|0);
    HEAP8[$231>>0] = $233;
    $235 = ($217|0)==(0);
    if ($235) {
     break;
    } else {
     $$012$i = $234;$$03$i = $232;$i$04$i = $217;
    }
   }
  } else if ((($predMode|0) == 0)) {
   $30 = (($$01226) + 1|0);
   do {
    if ($or$cond7) {
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = (($$01226) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = (($$01226) + 3|0);
     $37 = HEAP8[$36>>0]|0;
     $38 = $37&255;
     $39 = (($$01226) + 4|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = $40&255;
     $42 = HEAP8[$$01128>>0]|0;
     $43 = $42&255;
     $44 = (($$01128) + 1|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = $45&255;
     $47 = (($$01128) + 2|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = $48&255;
     $50 = (($$01128) + 3|0);
     $51 = HEAP8[$50>>0]|0;
     $52 = $51&255;
     $53 = (($32) + 4)|0;
     $54 = (($53) + ($35))|0;
     $55 = (($54) + ($38))|0;
     $56 = (($55) + ($41))|0;
     $57 = (($56) + ($43))|0;
     $58 = (($57) + ($46))|0;
     $59 = (($58) + ($49))|0;
     $60 = (($59) + ($52))|0;
     $61 = $60 >>> 3;
     $62 = (($$01226) + 5|0);
     $63 = HEAP8[$62>>0]|0;
     $64 = $63&255;
     $65 = (($$01226) + 6|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = $66&255;
     $68 = (($$01226) + 7|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = $69&255;
     $71 = (($$01226) + 8|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72&255;
     $74 = (($64) + 2)|0;
     $75 = (($74) + ($67))|0;
     $76 = (($75) + ($70))|0;
     $77 = (($76) + ($73))|0;
     $78 = $77 >>> 2;
     $tmp1$0$i = $61;$tmp2$0$i = $78;
    } else {
     if ($26) {
      $79 = HEAP8[$30>>0]|0;
      $80 = $79&255;
      $81 = (($$01226) + 2|0);
      $82 = HEAP8[$81>>0]|0;
      $83 = $82&255;
      $84 = (($$01226) + 3|0);
      $85 = HEAP8[$84>>0]|0;
      $86 = $85&255;
      $87 = (($$01226) + 4|0);
      $88 = HEAP8[$87>>0]|0;
      $89 = $88&255;
      $90 = (($80) + 2)|0;
      $91 = (($90) + ($83))|0;
      $92 = (($91) + ($86))|0;
      $93 = (($92) + ($89))|0;
      $94 = $93 >>> 2;
      $95 = (($$01226) + 5|0);
      $96 = HEAP8[$95>>0]|0;
      $97 = $96&255;
      $98 = (($$01226) + 6|0);
      $99 = HEAP8[$98>>0]|0;
      $100 = $99&255;
      $101 = (($$01226) + 7|0);
      $102 = HEAP8[$101>>0]|0;
      $103 = $102&255;
      $104 = (($$01226) + 8|0);
      $105 = HEAP8[$104>>0]|0;
      $106 = $105&255;
      $107 = (($97) + 2)|0;
      $108 = (($107) + ($100))|0;
      $109 = (($108) + ($103))|0;
      $110 = (($109) + ($106))|0;
      $111 = $110 >>> 2;
      $tmp1$0$i = $94;$tmp2$0$i = $111;
      break;
     }
     if ($25) {
      $112 = HEAP8[$$01128>>0]|0;
      $113 = $112&255;
      $114 = (($$01128) + 1|0);
      $115 = HEAP8[$114>>0]|0;
      $116 = $115&255;
      $117 = (($$01128) + 2|0);
      $118 = HEAP8[$117>>0]|0;
      $119 = $118&255;
      $120 = (($$01128) + 3|0);
      $121 = HEAP8[$120>>0]|0;
      $122 = $121&255;
      $123 = (($113) + 2)|0;
      $124 = (($123) + ($116))|0;
      $125 = (($124) + ($119))|0;
      $126 = (($125) + ($122))|0;
      $127 = $126 >>> 2;
      $tmp1$0$i = $127;$tmp2$0$i = $127;
     } else {
      $tmp1$0$i = 128;$tmp2$0$i = 128;
     }
    }
   } while(0);
   $128 = $tmp1$0$i&255;
   $129 = $tmp2$0$i&255;
   $130 = (($$01030) + 4|0);
   _memset(($$01030|0),($128|0),4)|0;
   $131 = (($$01030) + 8|0);
   _memset(($130|0),($129|0),4)|0;
   $132 = (($$01030) + 12|0);
   $133 = (($$01030) + 16|0);
   _memset(($131|0),($128|0),4)|0;
   _memset(($132|0),($129|0),4)|0;
   $134 = (($$01030) + 20|0);
   $135 = (($$01030) + 24|0);
   _memset(($133|0),($128|0),4)|0;
   _memset(($134|0),($129|0),4)|0;
   $136 = (($$01030) + 28|0);
   $scevgep$i = (($$01030) + 32|0);
   _memset(($135|0),($128|0),4)|0;
   _memset(($136|0),($129|0),4)|0;
   if ($25) {
    $137 = (($$01128) + 4|0);
    $138 = HEAP8[$137>>0]|0;
    $139 = $138&255;
    $140 = (($$01128) + 5|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = (($$01128) + 6|0);
    $144 = HEAP8[$143>>0]|0;
    $145 = $144&255;
    $146 = (($$01128) + 7|0);
    $147 = HEAP8[$146>>0]|0;
    $148 = $147&255;
    $149 = (($139) + 2)|0;
    $150 = (($149) + ($142))|0;
    $151 = (($150) + ($145))|0;
    $152 = (($151) + ($148))|0;
    $153 = $152 >>> 2;
    if ($26) {
     $154 = (($$01226) + 5|0);
     $155 = HEAP8[$154>>0]|0;
     $156 = $155&255;
     $157 = (($$01226) + 6|0);
     $158 = HEAP8[$157>>0]|0;
     $159 = $158&255;
     $160 = (($$01226) + 7|0);
     $161 = HEAP8[$160>>0]|0;
     $162 = $161&255;
     $163 = (($$01226) + 8|0);
     $164 = HEAP8[$163>>0]|0;
     $165 = $164&255;
     $166 = (($139) + 4)|0;
     $167 = (($166) + ($142))|0;
     $168 = (($167) + ($145))|0;
     $169 = (($168) + ($148))|0;
     $170 = (($169) + ($156))|0;
     $171 = (($170) + ($159))|0;
     $172 = (($171) + ($162))|0;
     $173 = (($172) + ($165))|0;
     $174 = $173 >>> 3;
     $tmp1$1$i = $153;$tmp2$1$i = $174;
    } else {
     $tmp1$1$i = $153;$tmp2$1$i = $153;
    }
   } else {
    if ($26) {
     $175 = HEAP8[$30>>0]|0;
     $176 = $175&255;
     $177 = (($$01226) + 2|0);
     $178 = HEAP8[$177>>0]|0;
     $179 = $178&255;
     $180 = (($$01226) + 3|0);
     $181 = HEAP8[$180>>0]|0;
     $182 = $181&255;
     $183 = (($$01226) + 4|0);
     $184 = HEAP8[$183>>0]|0;
     $185 = $184&255;
     $186 = (($176) + 2)|0;
     $187 = (($186) + ($179))|0;
     $188 = (($187) + ($182))|0;
     $189 = (($188) + ($185))|0;
     $190 = $189 >>> 2;
     $191 = (($$01226) + 5|0);
     $192 = HEAP8[$191>>0]|0;
     $193 = $192&255;
     $194 = (($$01226) + 6|0);
     $195 = HEAP8[$194>>0]|0;
     $196 = $195&255;
     $197 = (($$01226) + 7|0);
     $198 = HEAP8[$197>>0]|0;
     $199 = $198&255;
     $200 = (($$01226) + 8|0);
     $201 = HEAP8[$200>>0]|0;
     $202 = $201&255;
     $203 = (($193) + 2)|0;
     $204 = (($203) + ($196))|0;
     $205 = (($204) + ($199))|0;
     $206 = (($205) + ($202))|0;
     $207 = $206 >>> 2;
     $tmp1$1$i = $190;$tmp2$1$i = $207;
    } else {
     $tmp1$1$i = 128;$tmp2$1$i = 128;
    }
   }
   $208 = $tmp1$1$i&255;
   $209 = $tmp2$1$i&255;
   $210 = (($$01030) + 36|0);
   $211 = (($$01030) + 40|0);
   _memset(($scevgep$i|0),($208|0),4)|0;
   _memset(($210|0),($209|0),4)|0;
   $212 = (($$01030) + 44|0);
   $213 = (($$01030) + 48|0);
   _memset(($211|0),($208|0),4)|0;
   _memset(($212|0),($209|0),4)|0;
   $214 = (($$01030) + 52|0);
   $215 = (($$01030) + 56|0);
   _memset(($213|0),($208|0),4)|0;
   _memset(($214|0),($209|0),4)|0;
   $216 = (($$01030) + 60|0);
   _memset(($215|0),($208|0),4)|0;
   _memset(($216|0),($209|0),4)|0;
  } else if ((($predMode|0) == 2)) {
   if ($29) {
    $$0 = 1;
    label = 29;
    break;
   } else {
    $$012$i18 = $$01030;$$012$pn = $$01226;$i$04$i16 = 8;
   }
   while(1) {
    $$03$i17 = (($$012$pn) + 1|0);
    $236 = (($i$04$i16) + -1)|0;
    $237 = HEAP8[$$03$i17>>0]|0;
    HEAP8[$$012$i18>>0] = $237;
    $238 = HEAP8[$$03$i17>>0]|0;
    $239 = (($$012$i18) + 8|0);
    HEAP8[$239>>0] = $238;
    $240 = HEAP8[$$03$i17>>0]|0;
    $241 = (($$012$i18) + 16|0);
    HEAP8[$241>>0] = $240;
    $242 = HEAP8[$$03$i17>>0]|0;
    $243 = (($$012$i18) + 24|0);
    HEAP8[$243>>0] = $242;
    $244 = HEAP8[$$03$i17>>0]|0;
    $245 = (($$012$i18) + 32|0);
    HEAP8[$245>>0] = $244;
    $246 = HEAP8[$$03$i17>>0]|0;
    $247 = (($$012$i18) + 40|0);
    HEAP8[$247>>0] = $246;
    $248 = HEAP8[$$03$i17>>0]|0;
    $249 = (($$012$i18) + 48|0);
    HEAP8[$249>>0] = $248;
    $250 = HEAP8[$$03$i17>>0]|0;
    $251 = (($$012$i18) + 56|0);
    HEAP8[$251>>0] = $250;
    $252 = (($$012$i18) + 1|0);
    $253 = ($236|0)==(0);
    if ($253) {
     break;
    } else {
     $$012$i18 = $252;$$012$pn = $$03$i17;$i$04$i16 = $236;
    }
   }
  } else {
   if (!($or$cond9)) {
    $$0 = 1;
    label = 29;
    break;
   }
   $254 = (($$01226) + 1|0);
   $255 = (($$01226) + 8|0);
   $256 = HEAP8[$255>>0]|0;
   $257 = $256&255;
   $258 = (($$01128) + 7|0);
   $259 = HEAP8[$258>>0]|0;
   $260 = $259&255;
   $261 = (($260) + ($257))|0;
   $262 = $261 << 4;
   $263 = (($$01226) + 5|0);
   $264 = HEAP8[$263>>0]|0;
   $265 = $264&255;
   $266 = (($$01226) + 3|0);
   $267 = HEAP8[$266>>0]|0;
   $268 = $267&255;
   $269 = (($265) - ($268))|0;
   $270 = (($$01226) + 6|0);
   $271 = HEAP8[$270>>0]|0;
   $272 = $271&255;
   $273 = (($$01226) + 2|0);
   $274 = HEAP8[$273>>0]|0;
   $275 = $274&255;
   $276 = (($272) - ($275))|0;
   $277 = $276 << 1;
   $278 = (($269) + ($277))|0;
   $279 = (($$01226) + 7|0);
   $280 = HEAP8[$279>>0]|0;
   $281 = $280&255;
   $282 = HEAP8[$254>>0]|0;
   $283 = $282&255;
   $284 = (($281) - ($283))|0;
   $285 = ($284*3)|0;
   $286 = (($278) + ($285))|0;
   $287 = HEAP8[$$01226>>0]|0;
   $288 = $287&255;
   $289 = (($257) - ($288))|0;
   $290 = $289 << 2;
   $291 = (($286) + ($290))|0;
   $292 = ($291*17)|0;
   $293 = (($292) + 16)|0;
   $294 = $293 >> 5;
   $295 = (($$01128) + 4|0);
   $296 = HEAP8[$295>>0]|0;
   $297 = $296&255;
   $298 = (($$01128) + 2|0);
   $299 = HEAP8[$298>>0]|0;
   $300 = $299&255;
   $301 = (($297) - ($300))|0;
   $302 = (($$01128) + 5|0);
   $303 = HEAP8[$302>>0]|0;
   $304 = $303&255;
   $305 = (($$01128) + 1|0);
   $306 = HEAP8[$305>>0]|0;
   $307 = $306&255;
   $308 = (($304) - ($307))|0;
   $309 = $308 << 1;
   $310 = (($$01128) + 6|0);
   $311 = HEAP8[$310>>0]|0;
   $312 = $311&255;
   $313 = HEAP8[$$01128>>0]|0;
   $314 = $313&255;
   $315 = (($312) - ($314))|0;
   $316 = ($315*3)|0;
   $317 = (($260) - ($288))|0;
   $318 = $317 << 2;
   $319 = (($301) + ($318))|0;
   $320 = (($319) + ($309))|0;
   $321 = (($320) + ($316))|0;
   $322 = ($321*17)|0;
   $323 = (($322) + 16)|0;
   $324 = $323 >> 5;
   $325 = Math_imul($324, -3)|0;
   $326 = (($262) + 16)|0;
   $327 = (($326) + ($325))|0;
   $328 = Math_imul($294, -3)|0;
   $$011$i = $$01030;$a$09$i = $327;$i$010$i = 8;
   while(1) {
    $329 = (($i$010$i) + -1)|0;
    $330 = (($a$09$i) + ($328))|0;
    $331 = $330 >> 5;
    $$sum$i = (($331) + 512)|0;
    $332 = (3472 + ($$sum$i)|0);
    $333 = HEAP8[$332>>0]|0;
    $334 = (($$011$i) + 1|0);
    HEAP8[$$011$i>>0] = $333;
    $335 = (($330) + ($294))|0;
    $336 = $335 >> 5;
    $$sum1$i = (($336) + 512)|0;
    $337 = (3472 + ($$sum1$i)|0);
    $338 = HEAP8[$337>>0]|0;
    $339 = (($$011$i) + 2|0);
    HEAP8[$334>>0] = $338;
    $340 = (($335) + ($294))|0;
    $341 = $340 >> 5;
    $$sum2$i = (($341) + 512)|0;
    $342 = (3472 + ($$sum2$i)|0);
    $343 = HEAP8[$342>>0]|0;
    $344 = (($$011$i) + 3|0);
    HEAP8[$339>>0] = $343;
    $345 = (($340) + ($294))|0;
    $346 = $345 >> 5;
    $$sum3$i = (($346) + 512)|0;
    $347 = (3472 + ($$sum3$i)|0);
    $348 = HEAP8[$347>>0]|0;
    $349 = (($$011$i) + 4|0);
    HEAP8[$344>>0] = $348;
    $350 = (($345) + ($294))|0;
    $351 = $350 >> 5;
    $$sum4$i = (($351) + 512)|0;
    $352 = (3472 + ($$sum4$i)|0);
    $353 = HEAP8[$352>>0]|0;
    $354 = (($$011$i) + 5|0);
    HEAP8[$349>>0] = $353;
    $355 = (($350) + ($294))|0;
    $356 = $355 >> 5;
    $$sum5$i = (($356) + 512)|0;
    $357 = (3472 + ($$sum5$i)|0);
    $358 = HEAP8[$357>>0]|0;
    $359 = (($$011$i) + 6|0);
    HEAP8[$354>>0] = $358;
    $360 = (($355) + ($294))|0;
    $361 = $360 >> 5;
    $$sum6$i = (($361) + 512)|0;
    $362 = (3472 + ($$sum6$i)|0);
    $363 = HEAP8[$362>>0]|0;
    $364 = (($$011$i) + 7|0);
    HEAP8[$359>>0] = $363;
    $365 = (($360) + ($294))|0;
    $366 = $365 >> 5;
    $$sum7$i = (($366) + 512)|0;
    $367 = (3472 + ($$sum7$i)|0);
    $368 = HEAP8[$367>>0]|0;
    $369 = (($$011$i) + 8|0);
    HEAP8[$364>>0] = $368;
    $370 = (($a$09$i) + ($324))|0;
    $371 = ($329|0)==(0);
    if ($371) {
     break;
    } else {
     $$011$i = $369;$a$09$i = $370;$i$010$i = $329;
    }
   }
  }
  _h264bsdAddResidual($$01030,$$01325,$block$033);
  $372 = $block$033 | 1;
  $373 = (($$01325) + 64|0);
  _h264bsdAddResidual($$01030,$373,$372);
  $374 = (($372) + 1)|0;
  $375 = (($$01325) + 128|0);
  _h264bsdAddResidual($$01030,$375,$374);
  $376 = $block$033 | 3;
  $377 = (($$01325) + 192|0);
  _h264bsdAddResidual($$01030,$377,$376);
  $378 = (($block$033) + 4)|0;
  $379 = (($$01030) + 64|0);
  $380 = (($$01226) + 9|0);
  $381 = (($$01128) + 8|0);
  $382 = (($$01325) + 256|0);
  $383 = (($comp$032) + 1)|0;
  $384 = ($383>>>0)<(2);
  if ($384) {
   $$01030 = $379;$$01128 = $381;$$01226 = $380;$$01325 = $382;$block$033 = $378;$comp$032 = $383;
  } else {
   $$0 = 0;
   label = 29;
   break;
  }
 }
 if ((label|0) == 29) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _h264bsdAddResidual($data,$residual,$blockNum) {
 $data = $data|0;
 $residual = $residual|0;
 $blockNum = $blockNum|0;
 var $$sum = 0, $$sum1 = 0, $$sum1$1 = 0, $$sum1$2 = 0, $$sum1$3 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum2$1 = 0, $$sum2$2 = 0, $$sum2$3 = 0, $$sum20 = 0;
 var $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum3 = 0, $$sum3$1 = 0, $$sum3$2 = 0, $$sum3$3 = 0, $$sum4 = 0, $$sum4$1 = 0, $$sum4$2 = 0, $$sum4$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $blockNum$pn = 0, $width$0 = 0, $x$0 = 0, $x$0$in = 0, $y$0 = 0, $y$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$residual>>2]|0;
 $1 = ($0|0)==(16777215);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = ($blockNum>>>0)<(16);
 $3 = $blockNum & 3;
 $width$0 = $2 ? 16 : 8;
 $blockNum$pn = $2 ? $blockNum : $3;
 $x$0$in = (3344 + ($blockNum$pn<<2)|0);
 $y$0$in = (3408 + ($blockNum$pn<<2)|0);
 $x$0 = HEAP32[$x$0$in>>2]|0;
 $y$0 = HEAP32[$y$0$in>>2]|0;
 $4 = Math_imul($y$0, $width$0)|0;
 $$sum = (($4) + ($x$0))|0;
 $5 = (($data) + ($$sum)|0);
 $6 = (($residual) + 4|0);
 $7 = HEAP8[$5>>0]|0;
 $8 = $7&255;
 $9 = (($residual) + 8|0);
 $10 = HEAP32[$6>>2]|0;
 $$sum10 = (($$sum) + 1)|0;
 $11 = (($data) + ($$sum10)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (($0) + 512)|0;
 $$sum1 = (($14) + ($8))|0;
 $15 = (3472 + ($$sum1)|0);
 $16 = HEAP8[$15>>0]|0;
 HEAP8[$5>>0] = $16;
 $17 = (($residual) + 12|0);
 $18 = HEAP32[$9>>2]|0;
 $$sum11 = (($$sum) + 2)|0;
 $19 = (($data) + ($$sum11)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = (($10) + 512)|0;
 $$sum2 = (($22) + ($13))|0;
 $23 = (3472 + ($$sum2)|0);
 $24 = HEAP8[$23>>0]|0;
 HEAP8[$11>>0] = $24;
 $25 = (($residual) + 16|0);
 $26 = HEAP32[$17>>2]|0;
 $$sum12 = (($$sum) + 3)|0;
 $27 = (($data) + ($$sum12)|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = (($18) + 512)|0;
 $$sum3 = (($30) + ($21))|0;
 $31 = (3472 + ($$sum3)|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = (($26) + 512)|0;
 $$sum4 = (($33) + ($29))|0;
 $34 = (3472 + ($$sum4)|0);
 $35 = HEAP8[$34>>0]|0;
 HEAP8[$19>>0] = $32;
 HEAP8[$27>>0] = $35;
 $$sum13 = (($$sum) + ($width$0))|0;
 $36 = (($data) + ($$sum13)|0);
 $37 = (($residual) + 20|0);
 $38 = HEAP32[$25>>2]|0;
 $39 = HEAP8[$36>>0]|0;
 $40 = $39&255;
 $41 = (($residual) + 24|0);
 $42 = HEAP32[$37>>2]|0;
 $$sum14 = (($$sum13) + 1)|0;
 $43 = (($data) + ($$sum14)|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = (($38) + 512)|0;
 $$sum1$1 = (($46) + ($40))|0;
 $47 = (3472 + ($$sum1$1)|0);
 $48 = HEAP8[$47>>0]|0;
 HEAP8[$36>>0] = $48;
 $49 = (($residual) + 28|0);
 $50 = HEAP32[$41>>2]|0;
 $$sum15 = (($$sum13) + 2)|0;
 $51 = (($data) + ($$sum15)|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = (($42) + 512)|0;
 $$sum2$1 = (($54) + ($45))|0;
 $55 = (3472 + ($$sum2$1)|0);
 $56 = HEAP8[$55>>0]|0;
 HEAP8[$43>>0] = $56;
 $57 = (($residual) + 32|0);
 $58 = HEAP32[$49>>2]|0;
 $$sum16 = (($$sum13) + 3)|0;
 $59 = (($data) + ($$sum16)|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = (($50) + 512)|0;
 $$sum3$1 = (($62) + ($53))|0;
 $63 = (3472 + ($$sum3$1)|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = (($58) + 512)|0;
 $$sum4$1 = (($65) + ($61))|0;
 $66 = (3472 + ($$sum4$1)|0);
 $67 = HEAP8[$66>>0]|0;
 HEAP8[$51>>0] = $64;
 HEAP8[$59>>0] = $67;
 $$sum17 = (($$sum13) + ($width$0))|0;
 $68 = (($data) + ($$sum17)|0);
 $69 = (($residual) + 36|0);
 $70 = HEAP32[$57>>2]|0;
 $71 = HEAP8[$68>>0]|0;
 $72 = $71&255;
 $73 = (($residual) + 40|0);
 $74 = HEAP32[$69>>2]|0;
 $$sum18 = (($$sum17) + 1)|0;
 $75 = (($data) + ($$sum18)|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = (($70) + 512)|0;
 $$sum1$2 = (($78) + ($72))|0;
 $79 = (3472 + ($$sum1$2)|0);
 $80 = HEAP8[$79>>0]|0;
 HEAP8[$68>>0] = $80;
 $81 = (($residual) + 44|0);
 $82 = HEAP32[$73>>2]|0;
 $$sum19 = (($$sum17) + 2)|0;
 $83 = (($data) + ($$sum19)|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84&255;
 $86 = (($74) + 512)|0;
 $$sum2$2 = (($86) + ($77))|0;
 $87 = (3472 + ($$sum2$2)|0);
 $88 = HEAP8[$87>>0]|0;
 HEAP8[$75>>0] = $88;
 $89 = (($residual) + 48|0);
 $90 = HEAP32[$81>>2]|0;
 $$sum20 = (($$sum17) + 3)|0;
 $91 = (($data) + ($$sum20)|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = $92&255;
 $94 = (($82) + 512)|0;
 $$sum3$2 = (($94) + ($85))|0;
 $95 = (3472 + ($$sum3$2)|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = (($90) + 512)|0;
 $$sum4$2 = (($97) + ($93))|0;
 $98 = (3472 + ($$sum4$2)|0);
 $99 = HEAP8[$98>>0]|0;
 HEAP8[$83>>0] = $96;
 HEAP8[$91>>0] = $99;
 $$sum21 = (($$sum17) + ($width$0))|0;
 $100 = (($data) + ($$sum21)|0);
 $101 = (($residual) + 52|0);
 $102 = HEAP32[$89>>2]|0;
 $103 = HEAP8[$100>>0]|0;
 $104 = $103&255;
 $105 = (($residual) + 56|0);
 $106 = HEAP32[$101>>2]|0;
 $$sum22 = (($$sum21) + 1)|0;
 $107 = (($data) + ($$sum22)|0);
 $108 = HEAP8[$107>>0]|0;
 $109 = $108&255;
 $110 = (($102) + 512)|0;
 $$sum1$3 = (($110) + ($104))|0;
 $111 = (3472 + ($$sum1$3)|0);
 $112 = HEAP8[$111>>0]|0;
 HEAP8[$100>>0] = $112;
 $113 = (($residual) + 60|0);
 $114 = HEAP32[$105>>2]|0;
 $$sum23 = (($$sum21) + 2)|0;
 $115 = (($data) + ($$sum23)|0);
 $116 = HEAP8[$115>>0]|0;
 $117 = $116&255;
 $118 = (($106) + 512)|0;
 $$sum2$3 = (($118) + ($109))|0;
 $119 = (3472 + ($$sum2$3)|0);
 $120 = HEAP8[$119>>0]|0;
 HEAP8[$107>>0] = $120;
 $121 = HEAP32[$113>>2]|0;
 $$sum24 = (($$sum21) + 3)|0;
 $122 = (($data) + ($$sum24)|0);
 $123 = HEAP8[$122>>0]|0;
 $124 = $123&255;
 $125 = (($114) + 512)|0;
 $$sum3$3 = (($125) + ($117))|0;
 $126 = (3472 + ($$sum3$3)|0);
 $127 = HEAP8[$126>>0]|0;
 $128 = (($121) + 512)|0;
 $$sum4$3 = (($128) + ($124))|0;
 $129 = (3472 + ($$sum4$3)|0);
 $130 = HEAP8[$129>>0]|0;
 HEAP8[$115>>0] = $127;
 HEAP8[$122>>0] = $130;
 STACKTOP = sp;return;
}
function _h264bsdInterPrediction($pMb,$pMbLayer,$dpb,$mbNum,$currImage,$data) {
 $pMb = $pMb|0;
 $pMbLayer = $pMbLayer|0;
 $dpb = $dpb|0;
 $mbNum = $mbNum|0;
 $currImage = $currImage|0;
 $data = $data|0;
 var $$0 = 0, $$in$i = 0, $$in$i19 = 0, $$in$in$i = 0, $$in$in$i18 = 0, $$in12$i = 0, $$in12$in$i = 0, $$in13$i = 0, $$in13$in$i = 0, $$pre$i = 0, $$pre$i17 = 0, $$pre10$i = 0, $$pre9$i = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$i = 0, $exitcond = 0, $i$029 = 0, $i$05$i = 0;
 var $j$03$i = 0, $mv$sroa$0$0$i = 0, $mv$sroa$6$0$i = 0, $mvPred$i = 0, $mvPred$i$i = 0, $mvPred$i12 = 0, $mvPred$i6 = 0, $or$cond$i = 0, $refImage = 0, $sext$i = 0, $sext$i$i = 0, $sext$i20 = 0, $sext$i9 = 0, $sext1$i = 0, $sext1$i$i = 0, $sext1$i10 = 0, $sext1$i21 = 0, $sext2$i = 0, $sext2$i24 = 0, $sext3$i = 0;
 var $sext3$i25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $mvPred$i$i = sp + 72|0;
 $mvPred$i12 = sp + 64|0;
 $mvPred$i6 = sp + 60|0;
 $mvPred$i = sp + 68|0;
 $a$i = sp + 24|0;
 $refImage = sp;
 $0 = (($currImage) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($mbNum>>>0) / ($1>>>0))&-1;
 $3 = Math_imul($2, $1)|0;
 $4 = (($mbNum) - ($3))|0;
 $5 = $2 << 4;
 $6 = $4 << 4;
 $7 = (($refImage) + 4|0);
 HEAP32[$7>>2] = $1;
 $8 = (($currImage) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($refImage) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$pMb>>2]|0;
 do {
  if ((($11|0) == 2)) {
   $139 = (($pMbLayer) + 160|0);
   $140 = HEAP16[$139>>1]|0;
   $141 = (($pMbLayer) + 162|0);
   $142 = HEAP16[$141>>1]|0;
   $143 = (($pMbLayer) + 144|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (($pMb) + 4|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = (($pMb) + 204|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = (($a$i) + 12|0);
   HEAP32[$149>>2] = 0;
   $150 = (($a$i) + 16|0);
   HEAP32[$150>>2] = -1;
   $151 = (($a$i) + 20|0);
   $152 = (($a$i) + 22|0);
   HEAP16[$152>>1] = 0;
   HEAP16[$151>>1] = 0;
   $153 = ($148|0)==(0|0);
   if ($153) {
    $163 = -1;
   } else {
    $154 = (($148) + 4|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ($155|0)==($146|0);
    if ($156) {
     $157 = HEAP32[$148>>2]|0;
     HEAP32[$149>>2] = 1;
     $158 = ($157>>>0)<(6);
     if ($158) {
      $159 = (($148) + 172|0);
      $160 = HEAPU16[$159>>1]|(HEAPU16[$159+2>>1]<<16);
      $161 = (($148) + 108|0);
      $162 = HEAP32[$161>>2]|0;
      HEAP32[$150>>2] = $162;
      HEAP32[$151>>2] = $160;
      $163 = $162;
     } else {
      $163 = -1;
     }
    } else {
     $163 = -1;
    }
   }
   $164 = ($163|0)==($144|0);
   if ($164) {
    $165 = HEAP32[$151>>2]|0;
    HEAP32[$mvPred$i6>>2] = $165;
    $$in$in$i = $165;
   } else {
    $166 = (($pMb) + 200|0);
    $167 = HEAP32[$166>>2]|0;
    HEAP32[$a$i>>2] = 0;
    $168 = (($a$i) + 4|0);
    HEAP32[$168>>2] = -1;
    $169 = (($a$i) + 8|0);
    $170 = (($a$i) + 10|0);
    HEAP16[$170>>1] = 0;
    HEAP16[$169>>1] = 0;
    $171 = ($167|0)==(0|0);
    if (!($171)) {
     $172 = (($167) + 4|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ($173|0)==($146|0);
     if ($174) {
      $175 = HEAP32[$167>>2]|0;
      HEAP32[$a$i>>2] = 1;
      $176 = ($175>>>0)<(6);
      if ($176) {
       $177 = (($167) + 152|0);
       $178 = HEAPU16[$177>>1]|(HEAPU16[$177+2>>1]<<16);
       $179 = (($167) + 104|0);
       $180 = HEAP32[$179>>2]|0;
       HEAP32[$168>>2] = $180;
       HEAP32[$169>>2] = $178;
      }
     }
    }
    $181 = (($pMb) + 208|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = (($a$i) + 24|0);
    HEAP32[$183>>2] = 0;
    $184 = (($a$i) + 28|0);
    HEAP32[$184>>2] = -1;
    $185 = (($a$i) + 32|0);
    $186 = (($a$i) + 34|0);
    HEAP16[$186>>1] = 0;
    HEAP16[$185>>1] = 0;
    $187 = ($182|0)==(0|0);
    if ($187) {
     label = 42;
    } else {
     $188 = (($182) + 4|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = ($189|0)==($146|0);
     if ($190) {
      $191 = HEAP32[$182>>2]|0;
      HEAP32[$183>>2] = 1;
      $192 = ($191>>>0)<(6);
      if ($192) {
       $193 = (($182) + 172|0);
       $194 = HEAPU16[$193>>1]|(HEAPU16[$193+2>>1]<<16);
       $195 = (($182) + 108|0);
       $196 = HEAP32[$195>>2]|0;
       HEAP32[$184>>2] = $196;
       HEAP32[$185>>2] = $194;
      }
     } else {
      label = 42;
     }
    }
    if ((label|0) == 42) {
     $197 = (($pMb) + 212|0);
     $198 = HEAP32[$197>>2]|0;
     HEAP32[$183>>2] = 0;
     HEAP32[$184>>2] = -1;
     HEAP16[$186>>1] = 0;
     HEAP16[$185>>1] = 0;
     $199 = ($198|0)==(0|0);
     if (!($199)) {
      $200 = (($198) + 4|0);
      $201 = HEAP32[$200>>2]|0;
      $202 = ($201|0)==($146|0);
      if ($202) {
       $203 = HEAP32[$198>>2]|0;
       HEAP32[$183>>2] = 1;
       $204 = ($203>>>0)<(6);
       if ($204) {
        $205 = (($198) + 192|0);
        $206 = HEAPU16[$205>>1]|(HEAPU16[$205+2>>1]<<16);
        $207 = (($198) + 112|0);
        $208 = HEAP32[$207>>2]|0;
        HEAP32[$184>>2] = $208;
        HEAP32[$185>>2] = $206;
       }
      }
     }
    }
    _GetPredictionMv($mvPred$i6,$a$i,$144);
    $$pre$i = HEAP32[$mvPred$i6>>2]|0;
    $$in$in$i = $$pre$i;
   }
   $$in$i = $$in$in$i >>> 16;
   $209 = $$in$in$i & 65535;
   $210 = $140&65535;
   $211 = (($209) + ($210))|0;
   $212 = $211&65535;
   $213 = $142&65535;
   $214 = (($$in$i) + ($213))|0;
   $215 = $214&65535;
   $sext$i9 = $211 << 16;
   $216 = $sext$i9 >> 16;
   $217 = (($216) + 8192)|0;
   $218 = ($217>>>0)>(16383);
   if ($218) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $sext1$i10 = $214 << 16;
   $219 = $sext1$i10 >> 16;
   $220 = (($219) + 2048)|0;
   $221 = ($220>>>0)>(4095);
   if ($221) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $222 = (_h264bsdGetRefPicData($dpb,$144)|0);
   $223 = ($222|0)==(0|0);
   if ($223) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $224 = (($pMb) + 132|0);
   $225 = (($pMb) + 136|0);
   $226 = (($pMb) + 140|0);
   $227 = (($pMb) + 144|0);
   $228 = (($pMb) + 148|0);
   $229 = (($pMb) + 152|0);
   $230 = (($pMb) + 156|0);
   $231 = (($pMb) + 160|0);
   $232 = (($pMb) + 160|0);
   HEAP16[$232>>1] = $212;
   $233 = (($pMb) + 162|0);
   HEAP16[$233>>1] = $215;
   $234 = HEAPU16[$231>>1]|(HEAPU16[$231+2>>1]<<16);
   HEAP16[$230>>1]=$234&65535;HEAP16[$230+2>>1]=$234>>>16;
   HEAP16[$229>>1]=$234&65535;HEAP16[$229+2>>1]=$234>>>16;
   HEAP16[$228>>1]=$234&65535;HEAP16[$228+2>>1]=$234>>>16;
   HEAP16[$227>>1]=$234&65535;HEAP16[$227+2>>1]=$234>>>16;
   HEAP16[$226>>1]=$234&65535;HEAP16[$226+2>>1]=$234>>>16;
   HEAP16[$225>>1]=$234&65535;HEAP16[$225+2>>1]=$234>>>16;
   HEAP16[$224>>1]=$234&65535;HEAP16[$224+2>>1]=$234>>>16;
   $235 = (($pMb) + 100|0);
   HEAP32[$235>>2] = $144;
   $236 = (($pMb) + 104|0);
   HEAP32[$236>>2] = $144;
   $237 = (($pMb) + 116|0);
   HEAP32[$237>>2] = $222;
   $238 = (($pMb) + 120|0);
   HEAP32[$238>>2] = $222;
   $239 = (($pMbLayer) + 164|0);
   $240 = HEAP16[$239>>1]|0;
   $241 = (($pMbLayer) + 166|0);
   $242 = HEAP16[$241>>1]|0;
   $243 = (($pMbLayer) + 148|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[$145>>2]|0;
   $246 = (($pMb) + 200|0);
   $247 = HEAP32[$246>>2]|0;
   HEAP32[$a$i>>2] = 0;
   $248 = (($a$i) + 4|0);
   HEAP32[$248>>2] = -1;
   $249 = (($a$i) + 8|0);
   $250 = (($a$i) + 10|0);
   HEAP16[$250>>1] = 0;
   HEAP16[$249>>1] = 0;
   $251 = ($247|0)==(0|0);
   if ($251) {
    $261 = -1;
   } else {
    $252 = (($247) + 4|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = ($253|0)==($245|0);
    if ($254) {
     $255 = HEAP32[$247>>2]|0;
     HEAP32[$a$i>>2] = 1;
     $256 = ($255>>>0)<(6);
     if ($256) {
      $257 = (($247) + 184|0);
      $258 = HEAPU16[$257>>1]|(HEAPU16[$257+2>>1]<<16);
      $259 = (($247) + 112|0);
      $260 = HEAP32[$259>>2]|0;
      HEAP32[$248>>2] = $260;
      HEAP32[$249>>2] = $258;
      $261 = $260;
     } else {
      $261 = -1;
     }
    } else {
     $261 = -1;
    }
   }
   $262 = ($261|0)==($244|0);
   if ($262) {
    $263 = HEAP32[$249>>2]|0;
    HEAP32[$mvPred$i6>>2] = $263;
    $$in12$in$i = $263;
   } else {
    HEAP32[$149>>2] = 1;
    HEAP32[$150>>2] = $144;
    HEAP32[$151>>2] = $234;
    $264 = (($a$i) + 24|0);
    HEAP32[$264>>2] = 0;
    $265 = (($a$i) + 28|0);
    HEAP32[$265>>2] = -1;
    $266 = (($a$i) + 32|0);
    $267 = (($a$i) + 34|0);
    HEAP16[$267>>1] = 0;
    HEAP16[$266>>1] = 0;
    if (!($251)) {
     $268 = (($247) + 4|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = ($269|0)==($245|0);
     if ($270) {
      $271 = HEAP32[$247>>2]|0;
      HEAP32[$264>>2] = 1;
      $272 = ($271>>>0)<(6);
      if ($272) {
       $273 = (($247) + 160|0);
       $274 = HEAPU16[$273>>1]|(HEAPU16[$273+2>>1]<<16);
       $275 = (($247) + 104|0);
       $276 = HEAP32[$275>>2]|0;
       HEAP32[$265>>2] = $276;
       HEAP32[$266>>2] = $274;
      }
     }
    }
    _GetPredictionMv($mvPred$i6,$a$i,$244);
    $$pre9$i = HEAP32[$mvPred$i6>>2]|0;
    $$in12$in$i = $$pre9$i;
   }
   $$in12$i = $$in12$in$i >>> 16;
   $277 = $$in12$in$i & 65535;
   $278 = $240&65535;
   $279 = (($277) + ($278))|0;
   $280 = $279&65535;
   $281 = $242&65535;
   $282 = (($$in12$i) + ($281))|0;
   $283 = $282&65535;
   $sext2$i = $279 << 16;
   $284 = $sext2$i >> 16;
   $285 = (($284) + 8192)|0;
   $286 = ($285>>>0)>(16383);
   if ($286) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $sext3$i = $282 << 16;
   $287 = $sext3$i >> 16;
   $288 = (($287) + 2048)|0;
   $289 = ($288>>>0)>(4095);
   if ($289) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $290 = (_h264bsdGetRefPicData($dpb,$244)|0);
   $291 = ($290|0)==(0|0);
   if ($291) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $292 = (($pMb) + 164|0);
    $293 = (($pMb) + 168|0);
    $294 = (($pMb) + 172|0);
    $295 = (($pMb) + 176|0);
    $296 = (($pMb) + 180|0);
    $297 = (($pMb) + 184|0);
    $298 = (($pMb) + 188|0);
    $299 = (($pMb) + 192|0);
    $300 = (($pMb) + 192|0);
    HEAP16[$300>>1] = $280;
    $301 = (($pMb) + 194|0);
    HEAP16[$301>>1] = $283;
    $302 = HEAPU16[$299>>1]|(HEAPU16[$299+2>>1]<<16);
    HEAP16[$298>>1]=$302&65535;HEAP16[$298+2>>1]=$302>>>16;
    HEAP16[$297>>1]=$302&65535;HEAP16[$297+2>>1]=$302>>>16;
    HEAP16[$296>>1]=$302&65535;HEAP16[$296+2>>1]=$302>>>16;
    HEAP16[$295>>1]=$302&65535;HEAP16[$295+2>>1]=$302>>>16;
    HEAP16[$294>>1]=$302&65535;HEAP16[$294+2>>1]=$302>>>16;
    HEAP16[$293>>1]=$302&65535;HEAP16[$293+2>>1]=$302>>>16;
    HEAP16[$292>>1]=$302&65535;HEAP16[$292+2>>1]=$302>>>16;
    $303 = (($pMb) + 108|0);
    HEAP32[$303>>2] = $244;
    $304 = (($pMb) + 112|0);
    HEAP32[$304>>2] = $244;
    $305 = (($pMb) + 124|0);
    HEAP32[$305>>2] = $290;
    $306 = (($pMb) + 128|0);
    HEAP32[$306>>2] = $290;
    $307 = HEAP32[$237>>2]|0;
    HEAP32[$refImage>>2] = $307;
    $308 = (($pMb) + 132|0);
    _h264bsdPredictSamples($data,$308,$refImage,$6,$5,0,0,16,8);
    $309 = HEAP32[$305>>2]|0;
    HEAP32[$refImage>>2] = $309;
    _h264bsdPredictSamples($data,$292,$refImage,$6,$5,0,8,16,8);
    break;
   }
  } else if ((($11|0) == 3)) {
   $310 = (($pMbLayer) + 160|0);
   $311 = HEAP16[$310>>1]|0;
   $312 = (($pMbLayer) + 162|0);
   $313 = HEAP16[$312>>1]|0;
   $314 = (($pMbLayer) + 144|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = (($pMb) + 4|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = (($pMb) + 200|0);
   $319 = HEAP32[$318>>2]|0;
   HEAP32[$a$i>>2] = 0;
   $320 = (($a$i) + 4|0);
   HEAP32[$320>>2] = -1;
   $321 = (($a$i) + 8|0);
   $322 = (($a$i) + 10|0);
   HEAP16[$322>>1] = 0;
   HEAP16[$321>>1] = 0;
   $323 = ($319|0)==(0|0);
   if ($323) {
    $333 = -1;
   } else {
    $324 = (($319) + 4|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = ($325|0)==($317|0);
    if ($326) {
     $327 = HEAP32[$319>>2]|0;
     HEAP32[$a$i>>2] = 1;
     $328 = ($327>>>0)<(6);
     if ($328) {
      $329 = (($319) + 152|0);
      $330 = HEAPU16[$329>>1]|(HEAPU16[$329+2>>1]<<16);
      $331 = (($319) + 104|0);
      $332 = HEAP32[$331>>2]|0;
      HEAP32[$320>>2] = $332;
      HEAP32[$321>>2] = $330;
      $333 = $332;
     } else {
      $333 = -1;
     }
    } else {
     $333 = -1;
    }
   }
   $334 = ($333|0)==($315|0);
   if ($334) {
    $335 = HEAP32[$321>>2]|0;
    HEAP32[$mvPred$i12>>2] = $335;
    $$in$in$i18 = $335;
   } else {
    $336 = (($pMb) + 204|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = (($a$i) + 12|0);
    HEAP32[$338>>2] = 0;
    $339 = (($a$i) + 16|0);
    HEAP32[$339>>2] = -1;
    $340 = (($a$i) + 20|0);
    $341 = (($a$i) + 22|0);
    HEAP16[$341>>1] = 0;
    HEAP16[$340>>1] = 0;
    $342 = ($337|0)==(0|0);
    if (!($342)) {
     $343 = (($337) + 4|0);
     $344 = HEAP32[$343>>2]|0;
     $345 = ($344|0)==($317|0);
     if ($345) {
      $346 = HEAP32[$337>>2]|0;
      HEAP32[$338>>2] = 1;
      $347 = ($346>>>0)<(6);
      if ($347) {
       $348 = (($337) + 172|0);
       $349 = HEAPU16[$348>>1]|(HEAPU16[$348+2>>1]<<16);
       $350 = (($337) + 108|0);
       $351 = HEAP32[$350>>2]|0;
       HEAP32[$339>>2] = $351;
       HEAP32[$340>>2] = $349;
      }
     }
    }
    $352 = (($a$i) + 24|0);
    HEAP32[$352>>2] = 0;
    $353 = (($a$i) + 28|0);
    HEAP32[$353>>2] = -1;
    $354 = (($a$i) + 32|0);
    $355 = (($a$i) + 34|0);
    HEAP16[$355>>1] = 0;
    HEAP16[$354>>1] = 0;
    if ($342) {
     label = 79;
    } else {
     $356 = (($337) + 4|0);
     $357 = HEAP32[$356>>2]|0;
     $358 = ($357|0)==($317|0);
     if ($358) {
      $359 = HEAP32[$337>>2]|0;
      HEAP32[$352>>2] = 1;
      $360 = ($359>>>0)<(6);
      if ($360) {
       $361 = (($337) + 188|0);
       $362 = HEAPU16[$361>>1]|(HEAPU16[$361+2>>1]<<16);
       $363 = (($337) + 112|0);
       $364 = HEAP32[$363>>2]|0;
       HEAP32[$353>>2] = $364;
       HEAP32[$354>>2] = $362;
      }
     } else {
      label = 79;
     }
    }
    if ((label|0) == 79) {
     $365 = (($pMb) + 212|0);
     $366 = HEAP32[$365>>2]|0;
     HEAP32[$352>>2] = 0;
     HEAP32[$353>>2] = -1;
     HEAP16[$355>>1] = 0;
     HEAP16[$354>>1] = 0;
     $367 = ($366|0)==(0|0);
     if (!($367)) {
      $368 = (($366) + 4|0);
      $369 = HEAP32[$368>>2]|0;
      $370 = ($369|0)==($317|0);
      if ($370) {
       $371 = HEAP32[$366>>2]|0;
       HEAP32[$352>>2] = 1;
       $372 = ($371>>>0)<(6);
       if ($372) {
        $373 = (($366) + 192|0);
        $374 = HEAPU16[$373>>1]|(HEAPU16[$373+2>>1]<<16);
        $375 = (($366) + 112|0);
        $376 = HEAP32[$375>>2]|0;
        HEAP32[$353>>2] = $376;
        HEAP32[$354>>2] = $374;
       }
      }
     }
    }
    _GetPredictionMv($mvPred$i12,$a$i,$315);
    $$pre$i17 = HEAP32[$mvPred$i12>>2]|0;
    $$in$in$i18 = $$pre$i17;
   }
   $$in$i19 = $$in$in$i18 >>> 16;
   $377 = $$in$in$i18 & 65535;
   $378 = $311&65535;
   $379 = (($377) + ($378))|0;
   $380 = $379&65535;
   $381 = $313&65535;
   $382 = (($$in$i19) + ($381))|0;
   $383 = $382&65535;
   $sext$i20 = $379 << 16;
   $384 = $sext$i20 >> 16;
   $385 = (($384) + 8192)|0;
   $386 = ($385>>>0)>(16383);
   if ($386) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $sext1$i21 = $382 << 16;
   $387 = $sext1$i21 >> 16;
   $388 = (($387) + 2048)|0;
   $389 = ($388>>>0)>(4095);
   if ($389) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $390 = (_h264bsdGetRefPicData($dpb,$315)|0);
   $391 = ($390|0)==(0|0);
   if ($391) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $392 = (($pMb) + 132|0);
   $393 = (($pMb) + 136|0);
   $394 = (($pMb) + 140|0);
   $395 = (($pMb) + 144|0);
   $396 = (($pMb) + 164|0);
   $397 = (($pMb) + 168|0);
   $398 = (($pMb) + 172|0);
   $399 = (($pMb) + 176|0);
   $400 = (($pMb) + 176|0);
   HEAP16[$400>>1] = $380;
   $401 = (($pMb) + 178|0);
   HEAP16[$401>>1] = $383;
   $402 = HEAPU16[$399>>1]|(HEAPU16[$399+2>>1]<<16);
   HEAP16[$398>>1]=$402&65535;HEAP16[$398+2>>1]=$402>>>16;
   HEAP16[$397>>1]=$402&65535;HEAP16[$397+2>>1]=$402>>>16;
   HEAP16[$396>>1]=$402&65535;HEAP16[$396+2>>1]=$402>>>16;
   HEAP16[$395>>1]=$402&65535;HEAP16[$395+2>>1]=$402>>>16;
   HEAP16[$394>>1]=$402&65535;HEAP16[$394+2>>1]=$402>>>16;
   HEAP16[$393>>1]=$402&65535;HEAP16[$393+2>>1]=$402>>>16;
   HEAP16[$392>>1]=$402&65535;HEAP16[$392+2>>1]=$402>>>16;
   $403 = (($pMb) + 100|0);
   HEAP32[$403>>2] = $315;
   $404 = (($pMb) + 108|0);
   HEAP32[$404>>2] = $315;
   $405 = (($pMb) + 116|0);
   HEAP32[$405>>2] = $390;
   $406 = (($pMb) + 124|0);
   HEAP32[$406>>2] = $390;
   $407 = (($pMbLayer) + 164|0);
   $408 = HEAP16[$407>>1]|0;
   $409 = (($pMbLayer) + 166|0);
   $410 = HEAP16[$409>>1]|0;
   $411 = (($pMbLayer) + 148|0);
   $412 = HEAP32[$411>>2]|0;
   $413 = HEAP32[$316>>2]|0;
   $414 = (($pMb) + 208|0);
   $415 = HEAP32[$414>>2]|0;
   $416 = (($a$i) + 24|0);
   HEAP32[$416>>2] = 0;
   $417 = (($a$i) + 28|0);
   HEAP32[$417>>2] = -1;
   $418 = (($a$i) + 32|0);
   $419 = (($a$i) + 34|0);
   HEAP16[$419>>1] = 0;
   HEAP16[$418>>1] = 0;
   $420 = ($415|0)==(0|0);
   if ($420) {
    label = 91;
   } else {
    $421 = (($415) + 4|0);
    $422 = HEAP32[$421>>2]|0;
    $423 = ($422|0)==($413|0);
    if ($423) {
     $424 = HEAP32[$415>>2]|0;
     HEAP32[$416>>2] = 1;
     $425 = ($424>>>0)<(6);
     if ($425) {
      $426 = (($415) + 172|0);
      $427 = HEAPU16[$426>>1]|(HEAPU16[$426+2>>1]<<16);
      $428 = (($415) + 108|0);
      $429 = HEAP32[$428>>2]|0;
      HEAP32[$417>>2] = $429;
      HEAP32[$418>>2] = $427;
      $442 = $429;
     } else {
      $442 = -1;
     }
    } else {
     label = 91;
    }
   }
   if ((label|0) == 91) {
    $430 = (($pMb) + 204|0);
    $431 = HEAP32[$430>>2]|0;
    HEAP32[$416>>2] = 0;
    HEAP32[$417>>2] = -1;
    HEAP16[$419>>1] = 0;
    HEAP16[$418>>1] = 0;
    $432 = ($431|0)==(0|0);
    if ($432) {
     $442 = -1;
    } else {
     $433 = (($431) + 4|0);
     $434 = HEAP32[$433>>2]|0;
     $435 = ($434|0)==($413|0);
     if ($435) {
      $436 = HEAP32[$431>>2]|0;
      HEAP32[$416>>2] = 1;
      $437 = ($436>>>0)<(6);
      if ($437) {
       $438 = (($431) + 176|0);
       $439 = HEAPU16[$438>>1]|(HEAPU16[$438+2>>1]<<16);
       $440 = (($431) + 108|0);
       $441 = HEAP32[$440>>2]|0;
       HEAP32[$417>>2] = $441;
       HEAP32[$418>>2] = $439;
       $442 = $441;
      } else {
       $442 = -1;
      }
     } else {
      $442 = -1;
     }
    }
   }
   $443 = ($442|0)==($412|0);
   if ($443) {
    $444 = HEAP32[$418>>2]|0;
    HEAP32[$mvPred$i12>>2] = $444;
    $$in13$in$i = $444;
   } else {
    HEAP32[$a$i>>2] = 1;
    HEAP32[$320>>2] = $315;
    HEAP32[$321>>2] = $402;
    $445 = (($pMb) + 204|0);
    $446 = HEAP32[$445>>2]|0;
    $447 = (($a$i) + 12|0);
    HEAP32[$447>>2] = 0;
    $448 = (($a$i) + 16|0);
    HEAP32[$448>>2] = -1;
    $449 = (($a$i) + 20|0);
    $450 = (($a$i) + 22|0);
    HEAP16[$450>>1] = 0;
    HEAP16[$449>>1] = 0;
    $451 = ($446|0)==(0|0);
    if (!($451)) {
     $452 = (($446) + 4|0);
     $453 = HEAP32[$452>>2]|0;
     $454 = ($453|0)==($413|0);
     if ($454) {
      $455 = HEAP32[$446>>2]|0;
      HEAP32[$447>>2] = 1;
      $456 = ($455>>>0)<(6);
      if ($456) {
       $457 = (($446) + 188|0);
       $458 = HEAPU16[$457>>1]|(HEAPU16[$457+2>>1]<<16);
       $459 = (($446) + 112|0);
       $460 = HEAP32[$459>>2]|0;
       HEAP32[$448>>2] = $460;
       HEAP32[$449>>2] = $458;
      }
     }
    }
    _GetPredictionMv($mvPred$i12,$a$i,$412);
    $$pre10$i = HEAP32[$mvPred$i12>>2]|0;
    $$in13$in$i = $$pre10$i;
   }
   $$in13$i = $$in13$in$i >>> 16;
   $461 = $$in13$in$i & 65535;
   $462 = $408&65535;
   $463 = (($461) + ($462))|0;
   $464 = $463&65535;
   $465 = $410&65535;
   $466 = (($$in13$i) + ($465))|0;
   $467 = $466&65535;
   $sext2$i24 = $463 << 16;
   $468 = $sext2$i24 >> 16;
   $469 = (($468) + 8192)|0;
   $470 = ($469>>>0)>(16383);
   if ($470) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $sext3$i25 = $466 << 16;
   $471 = $sext3$i25 >> 16;
   $472 = (($471) + 2048)|0;
   $473 = ($472>>>0)>(4095);
   if ($473) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $474 = (_h264bsdGetRefPicData($dpb,$412)|0);
   $475 = ($474|0)==(0|0);
   if ($475) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $476 = (($pMb) + 148|0);
    $477 = (($pMb) + 152|0);
    $478 = (($pMb) + 156|0);
    $479 = (($pMb) + 160|0);
    $480 = (($pMb) + 180|0);
    $481 = (($pMb) + 184|0);
    $482 = (($pMb) + 188|0);
    $483 = (($pMb) + 192|0);
    $484 = (($pMb) + 192|0);
    HEAP16[$484>>1] = $464;
    $485 = (($pMb) + 194|0);
    HEAP16[$485>>1] = $467;
    $486 = HEAPU16[$483>>1]|(HEAPU16[$483+2>>1]<<16);
    HEAP16[$482>>1]=$486&65535;HEAP16[$482+2>>1]=$486>>>16;
    HEAP16[$481>>1]=$486&65535;HEAP16[$481+2>>1]=$486>>>16;
    HEAP16[$480>>1]=$486&65535;HEAP16[$480+2>>1]=$486>>>16;
    HEAP16[$479>>1]=$486&65535;HEAP16[$479+2>>1]=$486>>>16;
    HEAP16[$478>>1]=$486&65535;HEAP16[$478+2>>1]=$486>>>16;
    HEAP16[$477>>1]=$486&65535;HEAP16[$477+2>>1]=$486>>>16;
    HEAP16[$476>>1]=$486&65535;HEAP16[$476+2>>1]=$486>>>16;
    $487 = (($pMb) + 104|0);
    HEAP32[$487>>2] = $412;
    $488 = (($pMb) + 112|0);
    HEAP32[$488>>2] = $412;
    $489 = (($pMb) + 120|0);
    HEAP32[$489>>2] = $474;
    $490 = (($pMb) + 128|0);
    HEAP32[$490>>2] = $474;
    $491 = HEAP32[$405>>2]|0;
    HEAP32[$refImage>>2] = $491;
    $492 = (($pMb) + 132|0);
    _h264bsdPredictSamples($data,$492,$refImage,$6,$5,0,0,8,16);
    $493 = HEAP32[$489>>2]|0;
    HEAP32[$refImage>>2] = $493;
    _h264bsdPredictSamples($data,$476,$refImage,$6,$5,8,0,8,16);
    break;
   }
  } else if ((($11|0) == 1) | (($11|0) == 0)) {
   $12 = (($pMbLayer) + 144|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($pMb) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($pMb) + 200|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$a$i>>2] = 0;
   $18 = (($a$i) + 4|0);
   HEAP32[$18>>2] = -1;
   $19 = (($a$i) + 8|0);
   $20 = (($a$i) + 10|0);
   HEAP16[$20>>1] = 0;
   HEAP16[$19>>1] = 0;
   $21 = ($17|0)==(0|0);
   if ($21) {
    $48 = 0;$52 = -1;
   } else {
    $22 = (($17) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==($15|0);
    if ($24) {
     $25 = HEAP32[$17>>2]|0;
     HEAP32[$a$i>>2] = 1;
     $26 = ($25>>>0)<(6);
     if ($26) {
      $27 = (($17) + 152|0);
      $28 = HEAPU16[$27>>1]|(HEAPU16[$27+2>>1]<<16);
      $29 = (($17) + 104|0);
      $30 = HEAP32[$29>>2]|0;
      HEAP32[$18>>2] = $30;
      HEAP32[$19>>2] = $28;
      $48 = 1;$52 = $30;
     } else {
      $48 = 1;$52 = -1;
     }
    } else {
     $48 = 0;$52 = -1;
    }
   }
   $31 = (($pMb) + 204|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($a$i) + 12|0);
   HEAP32[$33>>2] = 0;
   $34 = (($a$i) + 16|0);
   HEAP32[$34>>2] = -1;
   $35 = (($a$i) + 20|0);
   $36 = (($a$i) + 22|0);
   HEAP16[$36>>1] = 0;
   HEAP16[$35>>1] = 0;
   $37 = ($32|0)==(0|0);
   if ($37) {
    $50 = 0;$56 = -1;
   } else {
    $38 = (($32) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==($15|0);
    if ($40) {
     $41 = HEAP32[$32>>2]|0;
     HEAP32[$33>>2] = 1;
     $42 = ($41>>>0)<(6);
     if ($42) {
      $43 = (($32) + 172|0);
      $44 = HEAPU16[$43>>1]|(HEAPU16[$43+2>>1]<<16);
      $45 = (($32) + 108|0);
      $46 = HEAP32[$45>>2]|0;
      HEAP32[$34>>2] = $46;
      HEAP32[$35>>2] = $44;
      $50 = 1;$56 = $46;
     } else {
      $50 = 1;$56 = -1;
     }
    } else {
     $50 = 0;$56 = -1;
    }
   }
   $47 = ($11|0)==(0);
   do {
    if ($47) {
     $49 = ($48|0)==(0);
     $51 = ($50|0)==(0);
     $or$cond$i = $49 | $51;
     if ($or$cond$i) {
      $mv$sroa$0$0$i = 0;$mv$sroa$6$0$i = 0;
     } else {
      $53 = ($52|0)==(0);
      if ($53) {
       $54 = HEAP32[$19>>2]|0;
       $55 = ($54|0)==(0);
       if ($55) {
        $mv$sroa$0$0$i = 0;$mv$sroa$6$0$i = 0;
        break;
       }
      }
      $57 = ($56|0)==(0);
      if ($57) {
       $58 = HEAP32[$35>>2]|0;
       $59 = ($58|0)==(0);
       if ($59) {
        $mv$sroa$0$0$i = 0;$mv$sroa$6$0$i = 0;
       } else {
        label = 16;
       }
      } else {
       label = 16;
      }
     }
    } else {
     label = 16;
    }
   } while(0);
   if ((label|0) == 16) {
    $60 = (($pMbLayer) + 160|0);
    $61 = HEAP16[$60>>1]|0;
    $62 = (($pMbLayer) + 162|0);
    $63 = HEAP16[$62>>1]|0;
    $64 = (($pMb) + 208|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($a$i) + 24|0);
    HEAP32[$66>>2] = 0;
    $67 = (($a$i) + 28|0);
    HEAP32[$67>>2] = -1;
    $68 = (($a$i) + 32|0);
    $69 = (($a$i) + 34|0);
    HEAP16[$69>>1] = 0;
    HEAP16[$68>>1] = 0;
    $70 = ($65|0)==(0|0);
    if ($70) {
     label = 20;
    } else {
     $71 = (($65) + 4|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ($72|0)==($15|0);
     if ($73) {
      $74 = HEAP32[$65>>2]|0;
      HEAP32[$66>>2] = 1;
      $75 = ($74>>>0)<(6);
      if ($75) {
       $76 = (($65) + 172|0);
       $77 = HEAPU16[$76>>1]|(HEAPU16[$76+2>>1]<<16);
       $78 = (($65) + 108|0);
       $79 = HEAP32[$78>>2]|0;
       HEAP32[$67>>2] = $79;
       HEAP32[$68>>2] = $77;
      }
     } else {
      label = 20;
     }
    }
    if ((label|0) == 20) {
     $80 = (($pMb) + 212|0);
     $81 = HEAP32[$80>>2]|0;
     HEAP32[$66>>2] = 0;
     HEAP32[$67>>2] = -1;
     HEAP16[$69>>1] = 0;
     HEAP16[$68>>1] = 0;
     $82 = ($81|0)==(0|0);
     if (!($82)) {
      $83 = (($81) + 4|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ($84|0)==($15|0);
      if ($85) {
       $86 = HEAP32[$81>>2]|0;
       HEAP32[$66>>2] = 1;
       $87 = ($86>>>0)<(6);
       if ($87) {
        $88 = (($81) + 192|0);
        $89 = HEAPU16[$88>>1]|(HEAPU16[$88+2>>1]<<16);
        $90 = (($81) + 112|0);
        $91 = HEAP32[$90>>2]|0;
        HEAP32[$67>>2] = $91;
        HEAP32[$68>>2] = $89;
       }
      }
     }
    }
    _GetPredictionMv($mvPred$i,$a$i,$13);
    $92 = HEAP16[$mvPred$i>>1]|0;
    $93 = $92&65535;
    $94 = $61&65535;
    $95 = (($93) + ($94))|0;
    $96 = (($mvPred$i) + 2|0);
    $97 = HEAP16[$96>>1]|0;
    $98 = $97&65535;
    $99 = $63&65535;
    $100 = (($98) + ($99))|0;
    $sext$i = $95 << 16;
    $101 = $sext$i >> 16;
    $102 = (($101) + 8192)|0;
    $103 = ($102>>>0)>(16383);
    if ($103) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    $104 = $100&65535;
    $105 = $95&65535;
    $sext1$i = $100 << 16;
    $106 = $sext1$i >> 16;
    $107 = (($106) + 2048)|0;
    $108 = ($107>>>0)>(4095);
    if ($108) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $mv$sroa$0$0$i = $105;$mv$sroa$6$0$i = $104;
    }
   }
   $109 = (_h264bsdGetRefPicData($dpb,$13)|0);
   $110 = ($109|0)==(0|0);
   if ($110) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $111 = (($pMb) + 132|0);
    $112 = (($pMb) + 136|0);
    $113 = (($pMb) + 140|0);
    $114 = (($pMb) + 144|0);
    $115 = (($pMb) + 148|0);
    $116 = (($pMb) + 152|0);
    $117 = (($pMb) + 156|0);
    $118 = (($pMb) + 160|0);
    $119 = (($pMb) + 164|0);
    $120 = (($pMb) + 168|0);
    $121 = (($pMb) + 172|0);
    $122 = (($pMb) + 176|0);
    $123 = (($pMb) + 180|0);
    $124 = (($pMb) + 184|0);
    $125 = (($pMb) + 188|0);
    $126 = (($pMb) + 192|0);
    $127 = (($pMb) + 192|0);
    HEAP16[$127>>1] = $mv$sroa$0$0$i;
    $128 = (($pMb) + 194|0);
    HEAP16[$128>>1] = $mv$sroa$6$0$i;
    $129 = HEAPU16[$126>>1]|(HEAPU16[$126+2>>1]<<16);
    HEAP16[$125>>1]=$129&65535;HEAP16[$125+2>>1]=$129>>>16;
    HEAP16[$124>>1]=$129&65535;HEAP16[$124+2>>1]=$129>>>16;
    HEAP16[$123>>1]=$129&65535;HEAP16[$123+2>>1]=$129>>>16;
    HEAP16[$122>>1]=$129&65535;HEAP16[$122+2>>1]=$129>>>16;
    HEAP16[$121>>1]=$129&65535;HEAP16[$121+2>>1]=$129>>>16;
    HEAP16[$120>>1]=$129&65535;HEAP16[$120+2>>1]=$129>>>16;
    HEAP16[$119>>1]=$129&65535;HEAP16[$119+2>>1]=$129>>>16;
    HEAP16[$118>>1]=$129&65535;HEAP16[$118+2>>1]=$129>>>16;
    HEAP16[$117>>1]=$129&65535;HEAP16[$117+2>>1]=$129>>>16;
    HEAP16[$116>>1]=$129&65535;HEAP16[$116+2>>1]=$129>>>16;
    HEAP16[$115>>1]=$129&65535;HEAP16[$115+2>>1]=$129>>>16;
    HEAP16[$114>>1]=$129&65535;HEAP16[$114+2>>1]=$129>>>16;
    HEAP16[$113>>1]=$129&65535;HEAP16[$113+2>>1]=$129>>>16;
    HEAP16[$112>>1]=$129&65535;HEAP16[$112+2>>1]=$129>>>16;
    HEAP16[$111>>1]=$129&65535;HEAP16[$111+2>>1]=$129>>>16;
    $130 = (($pMb) + 100|0);
    HEAP32[$130>>2] = $13;
    $131 = (($pMb) + 104|0);
    HEAP32[$131>>2] = $13;
    $132 = (($pMb) + 108|0);
    HEAP32[$132>>2] = $13;
    $133 = (($pMb) + 112|0);
    HEAP32[$133>>2] = $13;
    $134 = (($pMb) + 116|0);
    HEAP32[$134>>2] = $109;
    $135 = (($pMb) + 120|0);
    HEAP32[$135>>2] = $109;
    $136 = (($pMb) + 124|0);
    HEAP32[$136>>2] = $109;
    $137 = (($pMb) + 128|0);
    HEAP32[$137>>2] = $109;
    HEAP32[$refImage>>2] = $109;
    $138 = (($pMb) + 132|0);
    _h264bsdPredictSamples($data,$138,$refImage,$6,$5,0,0,16,16);
    break;
   }
  } else {
   $494 = (($pMb) + 4|0);
   $495 = (($a$i) + 4|0);
   $496 = (($a$i) + 8|0);
   $497 = (($a$i) + 10|0);
   $498 = (($a$i) + 12|0);
   $499 = (($a$i) + 16|0);
   $500 = (($a$i) + 20|0);
   $501 = (($a$i) + 22|0);
   $502 = (($a$i) + 24|0);
   $503 = (($a$i) + 28|0);
   $504 = (($a$i) + 32|0);
   $505 = (($a$i) + 34|0);
   $506 = (($mvPred$i$i) + 2|0);
   $i$05$i = 0;
   L60: while(1) {
    $507 = ((($pMbLayer) + ($i$05$i<<2)|0) + 176|0);
    $508 = HEAP32[$507>>2]|0;
    $509 = (_h264bsdNumSubMbPart($508)|0);
    $510 = ((($pMbLayer) + ($i$05$i<<2)|0) + 192|0);
    $511 = HEAP32[$510>>2]|0;
    $512 = ((($pMb) + ($i$05$i<<2)|0) + 100|0);
    HEAP32[$512>>2] = $511;
    $513 = HEAP32[$510>>2]|0;
    $514 = (_h264bsdGetRefPicData($dpb,$513)|0);
    $515 = ((($pMb) + ($i$05$i<<2)|0) + 116|0);
    HEAP32[$515>>2] = $514;
    $516 = ($514|0)==(0|0);
    if ($516) {
     $$0 = 1;
     label = 146;
     break;
    }
    $517 = ($509|0)==(0);
    if (!($517)) {
     $518 = $i$05$i << 2;
     $519 = ((($pMb) + ($518<<2)|0) + 132|0);
     $520 = ((($pMb) + ($518<<2)|0) + 134|0);
     $521 = $518 | 1;
     $522 = ((($pMb) + ($521<<2)|0) + 132|0);
     $523 = ((($pMb) + ($521<<2)|0) + 134|0);
     $524 = $518 | 2;
     $525 = ((($pMb) + ($524<<2)|0) + 132|0);
     $526 = ((($pMb) + ($524<<2)|0) + 134|0);
     $527 = $518 | 3;
     $528 = ((($pMb) + ($527<<2)|0) + 132|0);
     $529 = ((($pMb) + ($527<<2)|0) + 134|0);
     $j$03$i = 0;
     while(1) {
      $530 = (((($pMbLayer) + ($i$05$i<<4)|0) + ($j$03$i<<2)|0) + 208|0);
      $531 = HEAP16[$530>>1]|0;
      $532 = (((($pMbLayer) + ($i$05$i<<4)|0) + ($j$03$i<<2)|0) + 210|0);
      $533 = HEAP16[$532>>1]|0;
      $534 = HEAP32[$507>>2]|0;
      $535 = (_h264bsdSubMbPartMode($534)|0);
      $536 = HEAP32[$510>>2]|0;
      $537 = (((6288 + ($i$05$i<<7)|0) + ($535<<5)|0) + ($j$03$i<<3)|0);
      $538 = HEAP32[$537>>2]|0;
      $539 = (_h264bsdGetNeighbourMb($pMb,$538)|0);
      $540 = HEAP32[$494>>2]|0;
      $541 = ((((6288 + ($i$05$i<<7)|0) + ($535<<5)|0) + ($j$03$i<<3)|0) + 4|0);
      $542 = HEAP8[$541>>0]|0;
      $543 = $542&255;
      HEAP32[$a$i>>2] = 0;
      HEAP32[$495>>2] = -1;
      HEAP16[$497>>1] = 0;
      HEAP16[$496>>1] = 0;
      $544 = ($539|0)==(0|0);
      if (!($544)) {
       $545 = (($539) + 4|0);
       $546 = HEAP32[$545>>2]|0;
       $547 = ($546|0)==($540|0);
       if ($547) {
        $548 = HEAP32[$539>>2]|0;
        HEAP32[$a$i>>2] = 1;
        $549 = ($548>>>0)<(6);
        if ($549) {
         $550 = ((($539) + ($543<<2)|0) + 132|0);
         $551 = HEAPU16[$550>>1]|(HEAPU16[$550+2>>1]<<16);
         $552 = $543 >>> 2;
         $553 = ((($539) + ($552<<2)|0) + 100|0);
         $554 = HEAP32[$553>>2]|0;
         HEAP32[$495>>2] = $554;
         HEAP32[$496>>2] = $551;
        }
       }
      }
      $555 = (((5776 + ($i$05$i<<7)|0) + ($535<<5)|0) + ($j$03$i<<3)|0);
      $556 = HEAP32[$555>>2]|0;
      $557 = (_h264bsdGetNeighbourMb($pMb,$556)|0);
      $558 = HEAP32[$494>>2]|0;
      $559 = ((((5776 + ($i$05$i<<7)|0) + ($535<<5)|0) + ($j$03$i<<3)|0) + 4|0);
      $560 = HEAP8[$559>>0]|0;
      $561 = $560&255;
      HEAP32[$498>>2] = 0;
      HEAP32[$499>>2] = -1;
      HEAP16[$501>>1] = 0;
      HEAP16[$500>>1] = 0;
      $562 = ($557|0)==(0|0);
      if (!($562)) {
       $563 = (($557) + 4|0);
       $564 = HEAP32[$563>>2]|0;
       $565 = ($564|0)==($558|0);
       if ($565) {
        $566 = HEAP32[$557>>2]|0;
        HEAP32[$498>>2] = 1;
        $567 = ($566>>>0)<(6);
        if ($567) {
         $568 = ((($557) + ($561<<2)|0) + 132|0);
         $569 = HEAPU16[$568>>1]|(HEAPU16[$568+2>>1]<<16);
         $570 = $561 >>> 2;
         $571 = ((($557) + ($570<<2)|0) + 100|0);
         $572 = HEAP32[$571>>2]|0;
         HEAP32[$499>>2] = $572;
         HEAP32[$500>>2] = $569;
        }
       }
      }
      $573 = (((5264 + ($i$05$i<<7)|0) + ($535<<5)|0) + ($j$03$i<<3)|0);
      $574 = HEAP32[$573>>2]|0;
      $575 = (_h264bsdGetNeighbourMb($pMb,$574)|0);
      $576 = HEAP32[$494>>2]|0;
      $577 = ((((5264 + ($i$05$i<<7)|0) + ($535<<5)|0) + ($j$03$i<<3)|0) + 4|0);
      $578 = HEAP8[$577>>0]|0;
      $579 = $578&255;
      HEAP32[$502>>2] = 0;
      HEAP32[$503>>2] = -1;
      HEAP16[$505>>1] = 0;
      HEAP16[$504>>1] = 0;
      $580 = ($575|0)==(0|0);
      if ($580) {
       label = 122;
      } else {
       $581 = (($575) + 4|0);
       $582 = HEAP32[$581>>2]|0;
       $583 = ($582|0)==($576|0);
       if ($583) {
        $584 = HEAP32[$575>>2]|0;
        HEAP32[$502>>2] = 1;
        $585 = ($584>>>0)<(6);
        if ($585) {
         $586 = ((($575) + ($579<<2)|0) + 132|0);
         $587 = HEAPU16[$586>>1]|(HEAPU16[$586+2>>1]<<16);
         $588 = $579 >>> 2;
         $589 = ((($575) + ($588<<2)|0) + 100|0);
         $590 = HEAP32[$589>>2]|0;
         HEAP32[$503>>2] = $590;
         HEAP32[$504>>2] = $587;
        }
       } else {
        label = 122;
       }
      }
      if ((label|0) == 122) {
       label = 0;
       $591 = (((4752 + ($i$05$i<<7)|0) + ($535<<5)|0) + ($j$03$i<<3)|0);
       $592 = HEAP32[$591>>2]|0;
       $593 = (_h264bsdGetNeighbourMb($pMb,$592)|0);
       $594 = HEAP32[$494>>2]|0;
       $595 = ((((4752 + ($i$05$i<<7)|0) + ($535<<5)|0) + ($j$03$i<<3)|0) + 4|0);
       $596 = HEAP8[$595>>0]|0;
       $597 = $596&255;
       HEAP32[$502>>2] = 0;
       HEAP32[$503>>2] = -1;
       HEAP16[$505>>1] = 0;
       HEAP16[$504>>1] = 0;
       $598 = ($593|0)==(0|0);
       if (!($598)) {
        $599 = (($593) + 4|0);
        $600 = HEAP32[$599>>2]|0;
        $601 = ($600|0)==($594|0);
        if ($601) {
         $602 = HEAP32[$593>>2]|0;
         HEAP32[$502>>2] = 1;
         $603 = ($602>>>0)<(6);
         if ($603) {
          $604 = ((($593) + ($597<<2)|0) + 132|0);
          $605 = HEAPU16[$604>>1]|(HEAPU16[$604+2>>1]<<16);
          $606 = $597 >>> 2;
          $607 = ((($593) + ($606<<2)|0) + 100|0);
          $608 = HEAP32[$607>>2]|0;
          HEAP32[$503>>2] = $608;
          HEAP32[$504>>2] = $605;
         }
        }
       }
      }
      _GetPredictionMv($mvPred$i$i,$a$i,$536);
      $609 = HEAP16[$mvPred$i$i>>1]|0;
      $610 = $609&65535;
      $611 = $531&65535;
      $612 = (($610) + ($611))|0;
      $613 = $612&65535;
      $614 = HEAP16[$506>>1]|0;
      $615 = $614&65535;
      $616 = $533&65535;
      $617 = (($615) + ($616))|0;
      $618 = $617&65535;
      $sext$i$i = $612 << 16;
      $619 = $sext$i$i >> 16;
      $620 = (($619) + 8192)|0;
      $621 = ($620>>>0)>(16383);
      if ($621) {
       $$0 = 1;
       label = 146;
       break L60;
      }
      $sext1$i$i = $617 << 16;
      $622 = $sext1$i$i >> 16;
      $623 = (($622) + 2048)|0;
      $624 = ($623>>>0)>(4095);
      if ($624) {
       $$0 = 1;
       label = 146;
       break L60;
      }
      if ((($535|0) == 0)) {
       HEAP16[$519>>1] = $613;
       HEAP16[$520>>1] = $618;
       HEAP16[$522>>1] = $613;
       HEAP16[$523>>1] = $618;
       HEAP16[$525>>1] = $613;
       HEAP16[$526>>1] = $618;
       HEAP16[$528>>1] = $613;
       HEAP16[$529>>1] = $618;
      } else if ((($535|0) == 1)) {
       $625 = $j$03$i << 1;
       $626 = (($625) + ($518))|0;
       $627 = ((($pMb) + ($626<<2)|0) + 132|0);
       HEAP16[$627>>1] = $613;
       $628 = ((($pMb) + ($626<<2)|0) + 134|0);
       HEAP16[$628>>1] = $618;
       $629 = $626 | 1;
       $630 = ((($pMb) + ($629<<2)|0) + 132|0);
       HEAP16[$630>>1] = $613;
       $631 = ((($pMb) + ($629<<2)|0) + 134|0);
       HEAP16[$631>>1] = $618;
      } else if ((($535|0) == 2)) {
       $632 = (($j$03$i) + ($518))|0;
       $633 = ((($pMb) + ($632<<2)|0) + 132|0);
       HEAP16[$633>>1] = $613;
       $634 = ((($pMb) + ($632<<2)|0) + 134|0);
       HEAP16[$634>>1] = $618;
       $635 = (($632) + 2)|0;
       $636 = ((($pMb) + ($635<<2)|0) + 132|0);
       HEAP16[$636>>1] = $613;
       $637 = ((($pMb) + ($635<<2)|0) + 134|0);
       HEAP16[$637>>1] = $618;
      } else if ((($535|0) == 3)) {
       $638 = (($j$03$i) + ($518))|0;
       $639 = ((($pMb) + ($638<<2)|0) + 132|0);
       HEAP16[$639>>1] = $613;
       $640 = ((($pMb) + ($638<<2)|0) + 134|0);
       HEAP16[$640>>1] = $618;
      }
      $641 = (($j$03$i) + 1)|0;
      $642 = ($641>>>0)<($509>>>0);
      if ($642) {
       $j$03$i = $641;
      } else {
       break;
      }
     }
    }
    $643 = (($i$05$i) + 1)|0;
    $644 = ($643>>>0)<(4);
    if ($644) {
     $i$05$i = $643;
    } else {
     label = 135;
     break;
    }
   }
   if ((label|0) == 135) {
    $i$029 = 0;
    while(1) {
     $645 = ((($pMb) + ($i$029<<2)|0) + 116|0);
     $646 = HEAP32[$645>>2]|0;
     HEAP32[$refImage>>2] = $646;
     $647 = ((($pMbLayer) + ($i$029<<2)|0) + 176|0);
     $648 = HEAP32[$647>>2]|0;
     $649 = (_h264bsdSubMbPartMode($648)|0);
     $650 = $i$029 << 3;
     $651 = $650 & 8;
     $652 = ($i$029>>>0)<(2);
     $653 = $652 ? 0 : 8;
     if ((($649|0) == 0)) {
      $654 = $i$029 << 2;
      $655 = ((($pMb) + ($654<<2)|0) + 132|0);
      _h264bsdPredictSamples($data,$655,$refImage,$6,$5,$651,$653,8,8);
     } else if ((($649|0) == 1)) {
      $656 = $i$029 << 2;
      $657 = ((($pMb) + ($656<<2)|0) + 132|0);
      _h264bsdPredictSamples($data,$657,$refImage,$6,$5,$651,$653,8,4);
      $$sum2 = $656 | 2;
      $658 = ((($pMb) + ($$sum2<<2)|0) + 132|0);
      $659 = $653 | 4;
      _h264bsdPredictSamples($data,$658,$refImage,$6,$5,$651,$659,8,4);
     } else if ((($649|0) == 2)) {
      $660 = $i$029 << 2;
      $661 = ((($pMb) + ($660<<2)|0) + 132|0);
      _h264bsdPredictSamples($data,$661,$refImage,$6,$5,$651,$653,4,8);
      $$sum1 = $660 | 1;
      $662 = ((($pMb) + ($$sum1<<2)|0) + 132|0);
      $663 = $651 | 4;
      _h264bsdPredictSamples($data,$662,$refImage,$6,$5,$663,$653,4,8);
     } else {
      $664 = $i$029 << 2;
      $665 = ((($pMb) + ($664<<2)|0) + 132|0);
      _h264bsdPredictSamples($data,$665,$refImage,$6,$5,$651,$653,4,4);
      $$sum3 = $664 | 1;
      $666 = ((($pMb) + ($$sum3<<2)|0) + 132|0);
      $667 = $651 | 4;
      _h264bsdPredictSamples($data,$666,$refImage,$6,$5,$667,$653,4,4);
      $$sum4 = $664 | 2;
      $668 = ((($pMb) + ($$sum4<<2)|0) + 132|0);
      $669 = $653 | 4;
      _h264bsdPredictSamples($data,$668,$refImage,$6,$5,$651,$669,4,4);
      $$sum5 = $664 | 3;
      $670 = ((($pMb) + ($$sum5<<2)|0) + 132|0);
      _h264bsdPredictSamples($data,$670,$refImage,$6,$5,$667,$669,4,4);
     }
     $671 = (($i$029) + 1)|0;
     $exitcond = ($671|0)==(4);
     if ($exitcond) {
      break;
     } else {
      $i$029 = $671;
     }
    }
   }
   else if ((label|0) == 146) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $672 = (($pMb) + 196|0);
 $673 = HEAP32[$672>>2]|0;
 $674 = ($673>>>0)>(1);
 if ($674) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $675 = HEAP32[$pMb>>2]|0;
 $676 = ($675|0)==(0);
 if ($676) {
  _h264bsdWriteMacroblock($currImage,$data);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $677 = (($pMbLayer) + 328|0);
  _h264bsdWriteOutputBlocks($currImage,$mbNum,$data,$677);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _GetPredictionMv($mv,$a,$refIndex) {
 $mv = $mv|0;
 $a = $a|0;
 $refIndex = $refIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $b$a$i = 0, $b$a$i1 = 0, $max$0$i = 0, $max$0$i2 = 0, $med$0$i = 0, $med$0$i5 = 0, $min$0$c$i = 0, $min$0$c$i4 = 0, $min$0$i = 0, $min$0$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($a) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (($a) + 24|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   $6 = HEAP32[$a>>2]|0;
   $7 = ($6|0)==(0);
   if (!($7)) {
    $58 = (($a) + 8|0);
    $59 = HEAPU16[$58>>1]|(HEAPU16[$58+2>>1]<<16);
    HEAP16[$mv>>1]=$59&65535;HEAP16[$mv+2>>1]=$59>>>16;
    STACKTOP = sp;return;
   }
  }
 }
 $8 = (($a) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==($refIndex|0);
 $11 = $10&1;
 $12 = (($a) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==($refIndex|0);
 $15 = $14&1;
 $16 = (($a) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==($refIndex|0);
 $19 = $18&1;
 $20 = (($15) + ($11))|0;
 $21 = (($20) + ($19))|0;
 $22 = ($21|0)==(1);
 if ($22) {
  if ($10) {
   $52 = (($a) + 8|0);
   $53 = HEAPU16[$52>>1]|(HEAPU16[$52+2>>1]<<16);
   HEAP16[$mv>>1]=$53&65535;HEAP16[$mv+2>>1]=$53>>>16;
   STACKTOP = sp;return;
  }
  if ($14) {
   $54 = (($a) + 20|0);
   $55 = HEAPU16[$54>>1]|(HEAPU16[$54+2>>1]<<16);
   HEAP16[$mv>>1]=$55&65535;HEAP16[$mv+2>>1]=$55>>>16;
   STACKTOP = sp;return;
  } else {
   $56 = (($a) + 32|0);
   $57 = HEAPU16[$56>>1]|(HEAPU16[$56+2>>1]<<16);
   HEAP16[$mv>>1]=$57&65535;HEAP16[$mv+2>>1]=$57>>>16;
   STACKTOP = sp;return;
  }
 }
 $23 = (($a) + 8|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24 << 16 >> 16;
 $26 = (($a) + 20|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27 << 16 >> 16;
 $29 = (($a) + 32|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30 << 16 >> 16;
 $32 = ($27<<16>>16)>($24<<16>>16);
 if ($32) {
  $max$0$i = $28;$min$0$i = $25;
 } else {
  $33 = ($28|0)<($25|0);
  $b$a$i = $33 ? $28 : $25;
  $max$0$i = $25;$min$0$i = $b$a$i;
 }
 $34 = ($max$0$i|0)<($31|0);
 if ($34) {
  $med$0$i = $max$0$i;
 } else {
  $35 = ($min$0$i|0)>($31|0);
  $min$0$c$i = $35 ? $min$0$i : $31;
  $med$0$i = $min$0$c$i;
 }
 $36 = $med$0$i&65535;
 HEAP16[$mv>>1] = $36;
 $37 = (($a) + 10|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38 << 16 >> 16;
 $40 = (($a) + 22|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = $41 << 16 >> 16;
 $43 = (($a) + 34|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = $44 << 16 >> 16;
 $46 = ($41<<16>>16)>($38<<16>>16);
 if ($46) {
  $max$0$i2 = $42;$min$0$i3 = $39;
 } else {
  $47 = ($42|0)<($39|0);
  $b$a$i1 = $47 ? $42 : $39;
  $max$0$i2 = $39;$min$0$i3 = $b$a$i1;
 }
 $48 = ($max$0$i2|0)<($45|0);
 if ($48) {
  $med$0$i5 = $max$0$i2;
 } else {
  $49 = ($min$0$i3|0)>($45|0);
  $min$0$c$i4 = $49 ? $min$0$i3 : $45;
  $med$0$i5 = $min$0$c$i4;
 }
 $50 = $med$0$i5&65535;
 $51 = (($mv) + 2|0);
 HEAP16[$51>>1] = $50;
 STACKTOP = sp;return;
}
function _h264bsdInterpolateChromaHor($pRef,$predPartChroma,$x0,$y0,$width,$height,$xFrac,$chromaPartWidth,$chromaPartHeight) {
 $pRef = $pRef|0;
 $predPartChroma = $predPartChroma|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $xFrac = $xFrac|0;
 $chromaPartWidth = $chromaPartWidth|0;
 $chromaPartHeight = $chromaPartHeight|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$sum = 0, $$sum$1 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block = 0, $cbr$016 = 0, $cbr$016$1 = 0, $cbr$1$lcssa = 0, $cbr$1$lcssa$1 = 0, $cbr$112 = 0, $cbr$112$1 = 0, $or$cond = 0, $or$cond9 = 0, $ptrA$015 = 0, $ptrA$015$1 = 0, $ptrA$1$lcssa = 0, $ptrA$1$lcssa$1 = 0, $ptrA$111 = 0;
 var $ptrA$111$1 = 0, $scevgep = 0, $scevgep$1 = 0, $scevgep22 = 0, $scevgep22$1 = 0, $x$010 = 0, $x$010$1 = 0, $y$014 = 0, $y$014$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $block = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 3;
 } else {
  $1 = (($x0) + 1)|0;
  $2 = (($1) + ($chromaPartWidth))|0;
  $3 = ($2>>>0)>($width>>>0);
  $4 = ($y0|0)<(0);
  $or$cond = $3 | $4;
  $5 = (($chromaPartHeight) + ($y0))|0;
  $6 = ($5>>>0)>($height>>>0);
  $or$cond9 = $or$cond | $6;
  if ($or$cond9) {
   label = 3;
  } else {
   $$0 = $pRef;$$02 = $x0;$$03 = $y0;$$04 = $width;$$05 = $height;
  }
 }
 if ((label|0) == 3) {
  $7 = (($chromaPartWidth) + 1)|0;
  _h264bsdFillBlock($pRef,$block,$x0,$y0,$width,$height,$7,$chromaPartHeight,$7);
  $8 = Math_imul($height, $width)|0;
  $9 = (($pRef) + ($8)|0);
  $10 = Math_imul($7, $chromaPartHeight)|0;
  $11 = (($block) + ($10)|0);
  _h264bsdFillBlock($9,$11,$x0,$y0,$width,$height,$7,$chromaPartHeight,$7);
  $$0 = $block;$$02 = 0;$$03 = 0;$$04 = $7;$$05 = $chromaPartHeight;
 }
 $12 = (8 - ($xFrac))|0;
 $13 = $chromaPartHeight >>> 1;
 $14 = ($13|0)==(0);
 $15 = $chromaPartWidth >>> 1;
 $16 = ($15|0)==(0);
 $17 = (16 - ($chromaPartWidth))|0;
 $18 = $$04 << 1;
 $19 = (($18) - ($chromaPartWidth))|0;
 $$sum6 = (($$04) + 1)|0;
 $$sum7 = (($$04) + 2)|0;
 $20 = $15 << 1;
 if ($14) {
  STACKTOP = sp;return;
 }
 $21 = Math_imul($$03, $$04)|0;
 $$sum = (($21) + ($$02))|0;
 $22 = (($$0) + ($$sum)|0);
 $cbr$016 = $predPartChroma;$ptrA$015 = $22;$y$014 = $13;
 while(1) {
  if ($16) {
   $cbr$1$lcssa = $cbr$016;$ptrA$1$lcssa = $ptrA$015;
  } else {
   $scevgep = (($cbr$016) + ($20)|0);
   $cbr$112 = $cbr$016;$ptrA$111 = $ptrA$015;$x$010 = $15;
   while(1) {
    $23 = (($ptrA$111) + ($$04)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = (($ptrA$111) + 1|0);
    $27 = HEAP8[$ptrA$111>>0]|0;
    $28 = $27&255;
    $29 = (($ptrA$111) + ($$sum6)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = (($ptrA$111) + 2|0);
    $33 = HEAP8[$26>>0]|0;
    $34 = $33&255;
    $35 = Math_imul($25, $12)|0;
    $36 = Math_imul($31, $xFrac)|0;
    $37 = (($36) + ($35))|0;
    $38 = $37 << 3;
    $39 = (($38) + 32)|0;
    $40 = $39 >>> 6;
    $41 = $40&255;
    $42 = (($cbr$112) + 8|0);
    HEAP8[$42>>0] = $41;
    $43 = Math_imul($28, $12)|0;
    $44 = Math_imul($34, $xFrac)|0;
    $45 = (($44) + ($43))|0;
    $46 = $45 << 3;
    $47 = (($46) + 32)|0;
    $48 = $47 >>> 6;
    $49 = $48&255;
    $50 = (($cbr$112) + 1|0);
    HEAP8[$cbr$112>>0] = $49;
    $51 = (($ptrA$111) + ($$sum7)|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = HEAP8[$32>>0]|0;
    $55 = $54&255;
    $56 = Math_imul($31, $12)|0;
    $57 = Math_imul($53, $xFrac)|0;
    $58 = (($57) + ($56))|0;
    $59 = $58 << 3;
    $60 = (($59) + 32)|0;
    $61 = $60 >>> 6;
    $62 = $61&255;
    $63 = (($cbr$112) + 9|0);
    HEAP8[$63>>0] = $62;
    $64 = Math_imul($34, $12)|0;
    $65 = Math_imul($55, $xFrac)|0;
    $66 = (($65) + ($64))|0;
    $67 = $66 << 3;
    $68 = (($67) + 32)|0;
    $69 = $68 >>> 6;
    $70 = $69&255;
    $71 = (($cbr$112) + 2|0);
    HEAP8[$50>>0] = $70;
    $72 = (($x$010) + -1)|0;
    $73 = ($72|0)==(0);
    if ($73) {
     break;
    } else {
     $cbr$112 = $71;$ptrA$111 = $32;$x$010 = $72;
    }
   }
   $scevgep22 = (($ptrA$015) + ($20)|0);
   $cbr$1$lcssa = $scevgep;$ptrA$1$lcssa = $scevgep22;
  }
  $74 = (($cbr$1$lcssa) + ($17)|0);
  $75 = (($ptrA$1$lcssa) + ($19)|0);
  $76 = (($y$014) + -1)|0;
  $77 = ($76|0)==(0);
  if ($77) {
   break;
  } else {
   $cbr$016 = $74;$ptrA$015 = $75;$y$014 = $76;
  }
 }
 if ($14) {
  STACKTOP = sp;return;
 }
 $78 = (($$05) + ($$03))|0;
 $79 = Math_imul($78, $$04)|0;
 $$sum$1 = (($79) + ($$02))|0;
 $80 = (($predPartChroma) + 64|0);
 $81 = (($$0) + ($$sum$1)|0);
 $cbr$016$1 = $80;$ptrA$015$1 = $81;$y$014$1 = $13;
 while(1) {
  if ($16) {
   $cbr$1$lcssa$1 = $cbr$016$1;$ptrA$1$lcssa$1 = $ptrA$015$1;
  } else {
   $scevgep$1 = (($cbr$016$1) + ($20)|0);
   $cbr$112$1 = $cbr$016$1;$ptrA$111$1 = $ptrA$015$1;$x$010$1 = $15;
   while(1) {
    $82 = (($ptrA$111$1) + ($$04)|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = (($ptrA$111$1) + 1|0);
    $86 = HEAP8[$ptrA$111$1>>0]|0;
    $87 = $86&255;
    $88 = (($ptrA$111$1) + ($$sum6)|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = (($ptrA$111$1) + 2|0);
    $92 = HEAP8[$85>>0]|0;
    $93 = $92&255;
    $94 = Math_imul($84, $12)|0;
    $95 = Math_imul($90, $xFrac)|0;
    $96 = (($95) + ($94))|0;
    $97 = $96 << 3;
    $98 = (($97) + 32)|0;
    $99 = $98 >>> 6;
    $100 = $99&255;
    $101 = (($cbr$112$1) + 8|0);
    HEAP8[$101>>0] = $100;
    $102 = Math_imul($87, $12)|0;
    $103 = Math_imul($93, $xFrac)|0;
    $104 = (($103) + ($102))|0;
    $105 = $104 << 3;
    $106 = (($105) + 32)|0;
    $107 = $106 >>> 6;
    $108 = $107&255;
    $109 = (($cbr$112$1) + 1|0);
    HEAP8[$cbr$112$1>>0] = $108;
    $110 = (($ptrA$111$1) + ($$sum7)|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111&255;
    $113 = HEAP8[$91>>0]|0;
    $114 = $113&255;
    $115 = Math_imul($90, $12)|0;
    $116 = Math_imul($112, $xFrac)|0;
    $117 = (($116) + ($115))|0;
    $118 = $117 << 3;
    $119 = (($118) + 32)|0;
    $120 = $119 >>> 6;
    $121 = $120&255;
    $122 = (($cbr$112$1) + 9|0);
    HEAP8[$122>>0] = $121;
    $123 = Math_imul($93, $12)|0;
    $124 = Math_imul($114, $xFrac)|0;
    $125 = (($124) + ($123))|0;
    $126 = $125 << 3;
    $127 = (($126) + 32)|0;
    $128 = $127 >>> 6;
    $129 = $128&255;
    $130 = (($cbr$112$1) + 2|0);
    HEAP8[$109>>0] = $129;
    $131 = (($x$010$1) + -1)|0;
    $132 = ($131|0)==(0);
    if ($132) {
     break;
    } else {
     $cbr$112$1 = $130;$ptrA$111$1 = $91;$x$010$1 = $131;
    }
   }
   $scevgep22$1 = (($ptrA$015$1) + ($20)|0);
   $cbr$1$lcssa$1 = $scevgep$1;$ptrA$1$lcssa$1 = $scevgep22$1;
  }
  $133 = (($cbr$1$lcssa$1) + ($17)|0);
  $134 = (($ptrA$1$lcssa$1) + ($19)|0);
  $135 = (($y$014$1) + -1)|0;
  $136 = ($135|0)==(0);
  if ($136) {
   break;
  } else {
   $cbr$016$1 = $133;$ptrA$015$1 = $134;$y$014$1 = $135;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdFillBlock($ref,$fill,$x0,$y0,$width,$height,$blockWidth,$blockHeight,$fillScanLength) {
 $ref = $ref|0;
 $fill = $fill|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $blockWidth = $blockWidth|0;
 $blockHeight = $blockHeight|0;
 $fillScanLength = $fillScanLength|0;
 var $$ = 0, $$0 = 0, $$01$lcssa = 0, $$0118 = 0, $$04 = 0, $$1 = 0, $$12$lcssa = 0, $$1212 = 0, $$15 = 0, $$2$lcssa = 0, $$213 = 0, $$2310 = 0, $$8 = 0, $$y0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $bottom$011 = 0, $fp$0 = 0, $height$$y0 = 0, $or$cond = 0, $scevgep = 0, $scevgep27 = 0, $scevgep31 = 0, $smax = 0, $smax24 = 0, $smax25 = 0, $smax26 = 0, $smax28 = 0, $smax29 = 0, $smax30 = 0;
 var $top$019 = 0, $y$014 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($blockWidth) + ($x0))|0;
 $1 = (($blockHeight) + ($y0))|0;
 $2 = ($x0|0)<(0);
 $3 = ($0|0)>($width|0);
 $or$cond = $2 | $3;
 $fp$0 = $or$cond ? 2 : 1;
 $4 = ($1|0)<(0);
 $5 = (0 - ($blockHeight))|0;
 $$y0 = $4 ? $5 : $y0;
 $6 = ($0|0)<(0);
 $7 = (0 - ($blockWidth))|0;
 $$04 = $6 ? $7 : $x0;
 $8 = ($$y0|0)>($height|0);
 $height$$y0 = $8 ? $height : $$y0;
 $9 = ($$04|0)>($width|0);
 $$15 = $9 ? $width : $$04;
 $10 = (($$15) + ($blockWidth))|0;
 $11 = (($height$$y0) + ($blockHeight))|0;
 $12 = ($$15|0)>(0);
 if ($12) {
  $13 = (($ref) + ($$15)|0);
  $$0 = $13;
 } else {
  $$0 = $ref;
 }
 $14 = ($height$$y0|0)>(0);
 if ($14) {
  $15 = Math_imul($height$$y0, $width)|0;
  $16 = (($$0) + ($15)|0);
  $$1 = $16;
 } else {
  $$1 = $$0;
 }
 $17 = ($$15|0)<(0);
 $18 = (0 - ($$15))|0;
 $$ = $17 ? $18 : 0;
 $19 = ($10|0)>($width|0);
 $20 = (($10) - ($width))|0;
 $21 = $19 ? $20 : 0;
 $22 = (($blockWidth) - ($$))|0;
 $23 = (($22) - ($21))|0;
 $24 = ($height$$y0|0)<(0);
 $25 = (0 - ($height$$y0))|0;
 $$8 = $24 ? $25 : 0;
 $26 = ($11|0)>($height|0);
 $27 = (($11) - ($height))|0;
 $28 = $26 ? $27 : 0;
 $29 = (($blockHeight) - ($$8))|0;
 $30 = (($29) - ($28))|0;
 $31 = ($$8|0)==(0);
 if ($31) {
  $$01$lcssa = $fill;
 } else {
  $32 = (($blockHeight) + -1)|0;
  $33 = ($1|0)>(0);
  $smax28 = $33 ? $1 : 0;
  $34 = (($32) - ($smax28))|0;
  $35 = $height ^ -1;
  $36 = ($34|0)>($35|0);
  $smax29 = $36 ? $34 : $35;
  $37 = $smax29 ^ -1;
  $38 = ($37|0)>(0);
  $smax30 = $38 ? $37 : 0;
  $39 = (($smax29) + ($smax30))|0;
  $40 = (($39) + 1)|0;
  $41 = Math_imul($40, $fillScanLength)|0;
  $$0118 = $fill;$top$019 = $25;
  while(1) {
   FUNCTION_TABLE_viiiii[$fp$0 & 3]($$1,$$0118,$$,$23,$21);
   $59 = (($$0118) + ($fillScanLength)|0);
   $60 = (($top$019) + -1)|0;
   $61 = ($60|0)==(0);
   if ($61) {
    break;
   } else {
    $$0118 = $59;$top$019 = $60;
   }
  }
  $scevgep31 = (($fill) + ($41)|0);
  $$01$lcssa = $scevgep31;
 }
 $42 = ($29|0)==($28|0);
 if ($42) {
  $$12$lcssa = $$01$lcssa;$$2$lcssa = $$1;
 } else {
  $43 = (($blockHeight) + ($height))|0;
  $44 = (($43) + -1)|0;
  $45 = (($blockHeight) + -1)|0;
  $46 = ($1|0)>(0);
  $smax = $46 ? $1 : 0;
  $47 = (($45) - ($smax))|0;
  $48 = $height ^ -1;
  $49 = ($47|0)>($48|0);
  $smax24 = $49 ? $47 : $48;
  $50 = (($45) - ($smax24))|0;
  $51 = ($50|0)<($height|0);
  $smax25 = $51 ? $height : $50;
  $52 = (($44) - ($smax25))|0;
  $53 = (($52) - ($smax24))|0;
  $54 = $smax24 ^ -1;
  $55 = ($54|0)>(0);
  $smax26 = $55 ? $54 : 0;
  $56 = (($53) - ($smax26))|0;
  $57 = Math_imul($56, $fillScanLength)|0;
  $58 = Math_imul($56, $width)|0;
  $$1212 = $$01$lcssa;$$213 = $$1;$y$014 = $30;
  while(1) {
   FUNCTION_TABLE_viiiii[$fp$0 & 3]($$213,$$1212,$$,$23,$21);
   $62 = (($$213) + ($width)|0);
   $63 = (($$1212) + ($fillScanLength)|0);
   $64 = (($y$014) + -1)|0;
   $65 = ($64|0)==(0);
   if ($65) {
    break;
   } else {
    $$1212 = $63;$$213 = $62;$y$014 = $64;
   }
  }
  $scevgep = (($$01$lcssa) + ($57)|0);
  $scevgep27 = (($$1) + ($58)|0);
  $$12$lcssa = $scevgep;$$2$lcssa = $scevgep27;
 }
 $66 = (0 - ($width))|0;
 $67 = (($$2$lcssa) + ($66)|0);
 $68 = ($28|0)==(0);
 if ($68) {
  STACKTOP = sp;return;
 } else {
  $$2310 = $$12$lcssa;$bottom$011 = $27;
 }
 while(1) {
  FUNCTION_TABLE_viiiii[$fp$0 & 3]($67,$$2310,$$,$23,$21);
  $69 = (($$2310) + ($fillScanLength)|0);
  $70 = (($bottom$011) + -1)|0;
  $71 = ($70|0)==(0);
  if ($71) {
   break;
  } else {
   $$2310 = $69;$bottom$011 = $70;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateChromaVer($pRef,$predPartChroma,$x0,$y0,$width,$height,$yFrac,$chromaPartWidth,$chromaPartHeight) {
 $pRef = $pRef|0;
 $predPartChroma = $predPartChroma|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $yFrac = $yFrac|0;
 $chromaPartWidth = $chromaPartWidth|0;
 $chromaPartHeight = $chromaPartHeight|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$sum = 0, $$sum$1 = 0, $$sum67 = 0, $$sum8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block = 0, $cbr$015 = 0, $cbr$015$1 = 0, $cbr$1$lcssa = 0, $cbr$1$lcssa$1 = 0, $cbr$111 = 0, $cbr$111$1 = 0, $or$cond = 0, $ptrA$014 = 0, $ptrA$014$1 = 0, $ptrA$1$lcssa = 0, $ptrA$1$lcssa$1 = 0;
 var $ptrA$110 = 0, $ptrA$110$1 = 0, $scevgep = 0, $scevgep$1 = 0, $scevgep21 = 0, $scevgep21$1 = 0, $x$09 = 0, $x$09$1 = 0, $y$013 = 0, $y$013$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $block = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 4;
 } else {
  $1 = (($chromaPartWidth) + ($x0))|0;
  $2 = ($1>>>0)>($width>>>0);
  $3 = ($y0|0)<(0);
  $or$cond = $2 | $3;
  if ($or$cond) {
   label = 4;
  } else {
   $4 = (($y0) + 1)|0;
   $5 = (($4) + ($chromaPartHeight))|0;
   $6 = ($5>>>0)>($height>>>0);
   if ($6) {
    label = 4;
   } else {
    $$0 = $pRef;$$02 = $x0;$$03 = $y0;$$04 = $width;$$05 = $height;
   }
  }
 }
 if ((label|0) == 4) {
  $7 = (($chromaPartHeight) + 1)|0;
  _h264bsdFillBlock($pRef,$block,$x0,$y0,$width,$height,$chromaPartWidth,$7,$chromaPartWidth);
  $8 = Math_imul($height, $width)|0;
  $9 = (($pRef) + ($8)|0);
  $10 = Math_imul($7, $chromaPartWidth)|0;
  $11 = (($block) + ($10)|0);
  _h264bsdFillBlock($9,$11,$x0,$y0,$width,$height,$chromaPartWidth,$7,$chromaPartWidth);
  $$0 = $block;$$02 = 0;$$03 = 0;$$04 = $chromaPartWidth;$$05 = $7;
 }
 $12 = (8 - ($yFrac))|0;
 $13 = $chromaPartHeight >>> 1;
 $14 = ($13|0)==(0);
 $15 = $chromaPartWidth >>> 1;
 $16 = ($15|0)==(0);
 $17 = (16 - ($chromaPartWidth))|0;
 $18 = $$04 << 1;
 $19 = (($18) - ($chromaPartWidth))|0;
 $$sum67 = $18 | 1;
 $$sum8 = (($$04) + 1)|0;
 $20 = $15 << 1;
 if ($14) {
  STACKTOP = sp;return;
 }
 $21 = Math_imul($$03, $$04)|0;
 $$sum = (($21) + ($$02))|0;
 $22 = (($$0) + ($$sum)|0);
 $cbr$015 = $predPartChroma;$ptrA$014 = $22;$y$013 = $13;
 while(1) {
  if ($16) {
   $cbr$1$lcssa = $cbr$015;$ptrA$1$lcssa = $ptrA$014;
  } else {
   $scevgep = (($cbr$015) + ($20)|0);
   $cbr$111 = $cbr$015;$ptrA$110 = $ptrA$014;$x$09 = $15;
   while(1) {
    $23 = (($ptrA$110) + ($18)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = (($ptrA$110) + ($$04)|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = (($ptrA$110) + 1|0);
    $30 = HEAP8[$ptrA$110>>0]|0;
    $31 = $30&255;
    $32 = Math_imul($28, $12)|0;
    $33 = Math_imul($25, $yFrac)|0;
    $34 = (($32) + ($33))|0;
    $35 = $34 << 3;
    $36 = (($35) + 32)|0;
    $37 = $36 >>> 6;
    $38 = $37&255;
    $39 = (($cbr$111) + 8|0);
    HEAP8[$39>>0] = $38;
    $40 = Math_imul($31, $12)|0;
    $41 = Math_imul($28, $yFrac)|0;
    $42 = (($40) + ($41))|0;
    $43 = $42 << 3;
    $44 = (($43) + 32)|0;
    $45 = $44 >>> 6;
    $46 = $45&255;
    $47 = (($cbr$111) + 1|0);
    HEAP8[$cbr$111>>0] = $46;
    $48 = (($ptrA$110) + ($$sum67)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49&255;
    $51 = (($ptrA$110) + ($$sum8)|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = (($ptrA$110) + 2|0);
    $55 = HEAP8[$29>>0]|0;
    $56 = $55&255;
    $57 = Math_imul($53, $12)|0;
    $58 = Math_imul($50, $yFrac)|0;
    $59 = (($57) + ($58))|0;
    $60 = $59 << 3;
    $61 = (($60) + 32)|0;
    $62 = $61 >>> 6;
    $63 = $62&255;
    $64 = (($cbr$111) + 9|0);
    HEAP8[$64>>0] = $63;
    $65 = Math_imul($56, $12)|0;
    $66 = Math_imul($53, $yFrac)|0;
    $67 = (($65) + ($66))|0;
    $68 = $67 << 3;
    $69 = (($68) + 32)|0;
    $70 = $69 >>> 6;
    $71 = $70&255;
    $72 = (($cbr$111) + 2|0);
    HEAP8[$47>>0] = $71;
    $73 = (($x$09) + -1)|0;
    $74 = ($73|0)==(0);
    if ($74) {
     break;
    } else {
     $cbr$111 = $72;$ptrA$110 = $54;$x$09 = $73;
    }
   }
   $scevgep21 = (($ptrA$014) + ($20)|0);
   $cbr$1$lcssa = $scevgep;$ptrA$1$lcssa = $scevgep21;
  }
  $75 = (($cbr$1$lcssa) + ($17)|0);
  $76 = (($ptrA$1$lcssa) + ($19)|0);
  $77 = (($y$013) + -1)|0;
  $78 = ($77|0)==(0);
  if ($78) {
   break;
  } else {
   $cbr$015 = $75;$ptrA$014 = $76;$y$013 = $77;
  }
 }
 if ($14) {
  STACKTOP = sp;return;
 }
 $79 = (($$05) + ($$03))|0;
 $80 = Math_imul($79, $$04)|0;
 $$sum$1 = (($80) + ($$02))|0;
 $81 = (($predPartChroma) + 64|0);
 $82 = (($$0) + ($$sum$1)|0);
 $cbr$015$1 = $81;$ptrA$014$1 = $82;$y$013$1 = $13;
 while(1) {
  if ($16) {
   $cbr$1$lcssa$1 = $cbr$015$1;$ptrA$1$lcssa$1 = $ptrA$014$1;
  } else {
   $scevgep$1 = (($cbr$015$1) + ($20)|0);
   $cbr$111$1 = $cbr$015$1;$ptrA$110$1 = $ptrA$014$1;$x$09$1 = $15;
   while(1) {
    $83 = (($ptrA$110$1) + ($18)|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $86 = (($ptrA$110$1) + ($$04)|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = $87&255;
    $89 = (($ptrA$110$1) + 1|0);
    $90 = HEAP8[$ptrA$110$1>>0]|0;
    $91 = $90&255;
    $92 = Math_imul($88, $12)|0;
    $93 = Math_imul($85, $yFrac)|0;
    $94 = (($92) + ($93))|0;
    $95 = $94 << 3;
    $96 = (($95) + 32)|0;
    $97 = $96 >>> 6;
    $98 = $97&255;
    $99 = (($cbr$111$1) + 8|0);
    HEAP8[$99>>0] = $98;
    $100 = Math_imul($91, $12)|0;
    $101 = Math_imul($88, $yFrac)|0;
    $102 = (($100) + ($101))|0;
    $103 = $102 << 3;
    $104 = (($103) + 32)|0;
    $105 = $104 >>> 6;
    $106 = $105&255;
    $107 = (($cbr$111$1) + 1|0);
    HEAP8[$cbr$111$1>>0] = $106;
    $108 = (($ptrA$110$1) + ($$sum67)|0);
    $109 = HEAP8[$108>>0]|0;
    $110 = $109&255;
    $111 = (($ptrA$110$1) + ($$sum8)|0);
    $112 = HEAP8[$111>>0]|0;
    $113 = $112&255;
    $114 = (($ptrA$110$1) + 2|0);
    $115 = HEAP8[$89>>0]|0;
    $116 = $115&255;
    $117 = Math_imul($113, $12)|0;
    $118 = Math_imul($110, $yFrac)|0;
    $119 = (($117) + ($118))|0;
    $120 = $119 << 3;
    $121 = (($120) + 32)|0;
    $122 = $121 >>> 6;
    $123 = $122&255;
    $124 = (($cbr$111$1) + 9|0);
    HEAP8[$124>>0] = $123;
    $125 = Math_imul($116, $12)|0;
    $126 = Math_imul($113, $yFrac)|0;
    $127 = (($125) + ($126))|0;
    $128 = $127 << 3;
    $129 = (($128) + 32)|0;
    $130 = $129 >>> 6;
    $131 = $130&255;
    $132 = (($cbr$111$1) + 2|0);
    HEAP8[$107>>0] = $131;
    $133 = (($x$09$1) + -1)|0;
    $134 = ($133|0)==(0);
    if ($134) {
     break;
    } else {
     $cbr$111$1 = $132;$ptrA$110$1 = $114;$x$09$1 = $133;
    }
   }
   $scevgep21$1 = (($ptrA$014$1) + ($20)|0);
   $cbr$1$lcssa$1 = $scevgep$1;$ptrA$1$lcssa$1 = $scevgep21$1;
  }
  $135 = (($cbr$1$lcssa$1) + ($17)|0);
  $136 = (($ptrA$1$lcssa$1) + ($19)|0);
  $137 = (($y$013$1) + -1)|0;
  $138 = ($137|0)==(0);
  if ($138) {
   break;
  } else {
   $cbr$015$1 = $135;$ptrA$014$1 = $136;$y$013$1 = $137;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateChromaHorVer($ref,$predPartChroma,$x0,$y0,$width,$height,$xFrac,$yFrac,$chromaPartWidth,$chromaPartHeight) {
 $ref = $ref|0;
 $predPartChroma = $predPartChroma|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $xFrac = $xFrac|0;
 $yFrac = $yFrac|0;
 $chromaPartWidth = $chromaPartWidth|0;
 $chromaPartHeight = $chromaPartHeight|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$sum = 0, $$sum10 = 0, $$sum6 = 0, $$sum78 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block = 0;
 var $cbr$019 = 0, $cbr$1$lcssa = 0, $cbr$115 = 0, $comp$023 = 0, $exitcond = 0, $or$cond = 0, $ptrA$018 = 0, $ptrA$1$lcssa = 0, $ptrA$114 = 0, $scevgep = 0, $scevgep25 = 0, $tmp1$011 = 0, $tmp3$013 = 0, $x$012 = 0, $y$017 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $block = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 4;
 } else {
  $1 = (($x0) + 1)|0;
  $2 = (($1) + ($chromaPartWidth))|0;
  $3 = ($2>>>0)>($width>>>0);
  $4 = ($y0|0)<(0);
  $or$cond = $3 | $4;
  if ($or$cond) {
   label = 4;
  } else {
   $5 = (($y0) + 1)|0;
   $6 = (($5) + ($chromaPartHeight))|0;
   $7 = ($6>>>0)>($height>>>0);
   if ($7) {
    label = 4;
   } else {
    $$0 = $ref;$$02 = $x0;$$03 = $y0;$$04 = $width;$$05 = $height;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = (($chromaPartWidth) + 1)|0;
  $9 = (($chromaPartHeight) + 1)|0;
  _h264bsdFillBlock($ref,$block,$x0,$y0,$width,$height,$8,$9,$8);
  $10 = Math_imul($height, $width)|0;
  $11 = (($ref) + ($10)|0);
  $12 = Math_imul($9, $8)|0;
  $13 = (($block) + ($12)|0);
  _h264bsdFillBlock($11,$13,$x0,$y0,$width,$height,$8,$9,$8);
  $$0 = $block;$$02 = 0;$$03 = 0;$$04 = $8;$$05 = $9;
 }
 $14 = (8 - ($xFrac))|0;
 $15 = (8 - ($yFrac))|0;
 $16 = $chromaPartHeight >>> 1;
 $17 = ($16|0)==(0);
 $18 = $$04 << 1;
 $19 = $chromaPartWidth >>> 1;
 $20 = ($19|0)==(0);
 $21 = (16 - ($chromaPartWidth))|0;
 $22 = (($18) - ($chromaPartWidth))|0;
 $$sum6 = (($$04) + 1)|0;
 $$sum78 = $18 | 1;
 $$sum9 = (($$04) + 2)|0;
 $$sum10 = (($18) + 2)|0;
 $23 = $19 << 1;
 $comp$023 = 0;
 while(1) {
  if (!($17)) {
   $24 = Math_imul($comp$023, $$05)|0;
   $25 = (($24) + ($$03))|0;
   $26 = Math_imul($25, $$04)|0;
   $27 = $comp$023 << 6;
   $$sum = (($26) + ($$02))|0;
   $28 = (($predPartChroma) + ($27)|0);
   $29 = (($$0) + ($$sum)|0);
   $cbr$019 = $28;$ptrA$018 = $29;$y$017 = $16;
   while(1) {
    $30 = (($ptrA$018) + ($$04)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    if ($20) {
     $cbr$1$lcssa = $cbr$019;$ptrA$1$lcssa = $ptrA$018;
    } else {
     $33 = (($ptrA$018) + ($18)|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = HEAP8[$ptrA$018>>0]|0;
     $36 = $34&255;
     $37 = $35&255;
     $38 = Math_imul($36, $yFrac)|0;
     $39 = Math_imul($32, $15)|0;
     $40 = Math_imul($32, $yFrac)|0;
     $41 = Math_imul($37, $15)|0;
     $42 = (($38) + ($39))|0;
     $43 = (($40) + ($41))|0;
     $scevgep = (($cbr$019) + ($23)|0);
     $cbr$115 = $cbr$019;$ptrA$114 = $ptrA$018;$tmp1$011 = $43;$tmp3$013 = $42;$x$012 = $19;
     while(1) {
      $44 = (($ptrA$114) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      $46 = $45&255;
      $47 = (($ptrA$114) + ($$sum6)|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = $48&255;
      $50 = (($ptrA$114) + ($$sum78)|0);
      $51 = HEAP8[$50>>0]|0;
      $52 = $51&255;
      $53 = Math_imul($46, $15)|0;
      $54 = Math_imul($49, $yFrac)|0;
      $55 = (($54) + ($53))|0;
      $56 = Math_imul($49, $15)|0;
      $57 = Math_imul($52, $yFrac)|0;
      $58 = (($57) + ($56))|0;
      $59 = Math_imul($tmp1$011, $14)|0;
      $60 = (($59) + 32)|0;
      $61 = Math_imul($tmp3$013, $14)|0;
      $62 = (($61) + 32)|0;
      $63 = Math_imul($55, $xFrac)|0;
      $64 = (($60) + ($63))|0;
      $65 = $64 >>> 6;
      $66 = Math_imul($58, $xFrac)|0;
      $67 = (($62) + ($66))|0;
      $68 = $67 >>> 6;
      $69 = $68&255;
      $70 = (($cbr$115) + 8|0);
      HEAP8[$70>>0] = $69;
      $71 = $65&255;
      $72 = (($cbr$115) + 1|0);
      HEAP8[$cbr$115>>0] = $71;
      $73 = (($ptrA$114) + 2|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = $74&255;
      $76 = (($ptrA$114) + ($$sum9)|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = $77&255;
      $79 = (($ptrA$114) + ($$sum10)|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = $80&255;
      $82 = Math_imul($75, $15)|0;
      $83 = Math_imul($78, $yFrac)|0;
      $84 = (($83) + ($82))|0;
      $85 = Math_imul($78, $15)|0;
      $86 = Math_imul($81, $yFrac)|0;
      $87 = (($86) + ($85))|0;
      $88 = Math_imul($55, $14)|0;
      $89 = (($88) + 32)|0;
      $90 = Math_imul($58, $14)|0;
      $91 = (($90) + 32)|0;
      $92 = Math_imul($84, $xFrac)|0;
      $93 = (($89) + ($92))|0;
      $94 = $93 >>> 6;
      $95 = Math_imul($87, $xFrac)|0;
      $96 = (($91) + ($95))|0;
      $97 = $96 >>> 6;
      $98 = $97&255;
      $99 = (($cbr$115) + 9|0);
      HEAP8[$99>>0] = $98;
      $100 = $94&255;
      $101 = (($cbr$115) + 2|0);
      HEAP8[$72>>0] = $100;
      $102 = (($x$012) + -1)|0;
      $103 = ($102|0)==(0);
      if ($103) {
       break;
      } else {
       $cbr$115 = $101;$ptrA$114 = $73;$tmp1$011 = $84;$tmp3$013 = $87;$x$012 = $102;
      }
     }
     $scevgep25 = (($ptrA$018) + ($23)|0);
     $cbr$1$lcssa = $scevgep;$ptrA$1$lcssa = $scevgep25;
    }
    $104 = (($cbr$1$lcssa) + ($21)|0);
    $105 = (($ptrA$1$lcssa) + ($22)|0);
    $106 = (($y$017) + -1)|0;
    $107 = ($106|0)==(0);
    if ($107) {
     break;
    } else {
     $cbr$019 = $104;$ptrA$018 = $105;$y$017 = $106;
    }
   }
  }
  $108 = (($comp$023) + 1)|0;
  $exitcond = ($108|0)==(2);
  if ($exitcond) {
   break;
  } else {
   $comp$023 = $108;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateVerHalf($ref,$mb,$x0,$y0,$width,$height,$partWidth,$partHeight) {
 $ref = $ref|0;
 $mb = $mb|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 var $$0 = 0, $$0232 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1$lcssa = 0, $$126 = 0, $$sum = 0, $$sum10 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$031 = 0, $j$025 = 0, $or$cond = 0;
 var $p1 = 0, $ptrC$033 = 0, $ptrC$1$lcssa = 0, $ptrC$127 = 0, $ptrV$034 = 0, $ptrV$1$lcssa = 0, $ptrV$128 = 0, $scevgep = 0, $scevgep38 = 0, $scevgep39 = 0, $tmp12 = 0, $tmp16 = 0, $tmp20 = 0, $tmp24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $p1 = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 4;
 } else {
  $1 = (($partWidth) + ($x0))|0;
  $2 = ($1>>>0)>($width>>>0);
  $3 = ($y0|0)<(0);
  $or$cond = $2 | $3;
  if ($or$cond) {
   label = 4;
  } else {
   $4 = (($y0) + 5)|0;
   $5 = (($4) + ($partHeight))|0;
   $6 = ($5>>>0)>($height>>>0);
   if ($6) {
    label = 4;
   } else {
    $$0 = $ref;$$03 = $x0;$$04 = $y0;$$05 = $width;
   }
  }
 }
 if ((label|0) == 4) {
  $7 = (($partHeight) + 5)|0;
  _h264bsdFillBlock($ref,$p1,$x0,$y0,$width,$height,$partWidth,$7,$partWidth);
  $$0 = $p1;$$03 = 0;$$04 = 0;$$05 = $partWidth;
 }
 $8 = Math_imul($$04, $$05)|0;
 $9 = (($$03) + ($$05))|0;
 $$sum = (($9) + ($8))|0;
 $10 = $partHeight >>> 2;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = ($$05*5)|0;
 $$sum6 = (($$sum) + ($12))|0;
 $13 = (($$0) + ($$sum6)|0);
 $14 = (($$0) + ($$sum)|0);
 $15 = ($partWidth|0)==(0);
 $16 = $$05 << 2;
 $17 = (($16) - ($partWidth))|0;
 $18 = (64 - ($partWidth))|0;
 $19 = (0 - ($$05))|0;
 $20 = $19 << 1;
 $21 = $$05 << 1;
 $$0232 = $mb;$i$031 = $10;$ptrC$033 = $14;$ptrV$034 = $13;
 while(1) {
  if ($15) {
   $$1$lcssa = $$0232;$ptrC$1$lcssa = $ptrC$033;$ptrV$1$lcssa = $ptrV$034;
  } else {
   $scevgep38 = (($$0232) + ($partWidth)|0);
   $$126 = $$0232;$j$025 = $partWidth;$ptrC$127 = $ptrC$033;$ptrV$128 = $ptrV$034;
   while(1) {
    $22 = (($ptrV$128) + ($20)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = (($ptrV$128) + ($19)|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $28 = (($ptrV$128) + ($$05)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = (($ptrV$128) + ($21)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = (($ptrV$128) + 1|0);
    $35 = HEAP8[$ptrV$128>>0]|0;
    $36 = $35&255;
    $37 = (($30) + ($24))|0;
    $38 = $37 << 2;
    $39 = (($36) + ($27))|0;
    $40 = (($ptrC$127) + ($21)|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $tmp12 = ($39*20)|0;
    $43 = (($33) + 16)|0;
    $44 = (($43) - ($37))|0;
    $45 = (($44) - ($38))|0;
    $46 = (($45) + ($42))|0;
    $47 = (($46) + ($tmp12))|0;
    $48 = $47 >> 5;
    $$sum7 = (($48) + 512)|0;
    $49 = (3472 + ($$sum7)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = (($$126) + 48|0);
    HEAP8[$51>>0] = $50;
    $52 = (($42) + ($36))|0;
    $53 = $52 << 2;
    $54 = (($27) + ($24))|0;
    $55 = (($ptrC$127) + ($$05)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $tmp16 = ($54*20)|0;
    $58 = (($30) + 16)|0;
    $59 = (($58) - ($52))|0;
    $60 = (($59) - ($53))|0;
    $61 = (($60) + ($57))|0;
    $62 = (($61) + ($tmp16))|0;
    $63 = $62 >> 5;
    $$sum8 = (($63) + 512)|0;
    $64 = (3472 + ($$sum8)|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = (($$126) + 32|0);
    HEAP8[$66>>0] = $65;
    $67 = (($57) + ($27))|0;
    $68 = $67 << 2;
    $69 = (($42) + ($24))|0;
    $70 = HEAP8[$ptrC$127>>0]|0;
    $71 = $70&255;
    $tmp20 = ($69*20)|0;
    $72 = (($36) + 16)|0;
    $73 = (($72) - ($67))|0;
    $74 = (($73) - ($68))|0;
    $75 = (($74) + ($71))|0;
    $76 = (($75) + ($tmp20))|0;
    $77 = $76 >> 5;
    $$sum9 = (($77) + 512)|0;
    $78 = (3472 + ($$sum9)|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = (($$126) + 16|0);
    HEAP8[$80>>0] = $79;
    $81 = (($71) + ($24))|0;
    $82 = $81 << 2;
    $83 = (($57) + ($42))|0;
    $84 = (($ptrC$127) + ($19)|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85&255;
    $tmp24 = ($83*20)|0;
    $87 = (($27) + 16)|0;
    $88 = (($87) - ($81))|0;
    $89 = (($88) - ($82))|0;
    $90 = (($89) + ($86))|0;
    $91 = (($90) + ($tmp24))|0;
    $92 = $91 >> 5;
    $$sum10 = (($92) + 512)|0;
    $93 = (3472 + ($$sum10)|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = (($$126) + 1|0);
    HEAP8[$$126>>0] = $94;
    $96 = (($ptrC$127) + 1|0);
    $97 = (($j$025) + -1)|0;
    $98 = ($97|0)==(0);
    if ($98) {
     break;
    } else {
     $$126 = $95;$j$025 = $97;$ptrC$127 = $96;$ptrV$128 = $34;
    }
   }
   $scevgep = (($ptrC$033) + ($partWidth)|0);
   $scevgep39 = (($ptrV$034) + ($partWidth)|0);
   $$1$lcssa = $scevgep38;$ptrC$1$lcssa = $scevgep;$ptrV$1$lcssa = $scevgep39;
  }
  $99 = (($ptrC$1$lcssa) + ($17)|0);
  $100 = (($ptrV$1$lcssa) + ($17)|0);
  $101 = (($$1$lcssa) + ($18)|0);
  $102 = (($i$031) + -1)|0;
  $103 = ($102|0)==(0);
  if ($103) {
   break;
  } else {
   $$0232 = $101;$i$031 = $102;$ptrC$033 = $99;$ptrV$034 = $100;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateVerQuarter($ref,$mb,$x0,$y0,$width,$height,$partWidth,$partHeight,$verOffset) {
 $ref = $ref|0;
 $mb = $mb|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 $verOffset = $verOffset|0;
 var $$0 = 0, $$0235 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1$lcssa = 0, $$127 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$034 = 0, $j$026 = 0, $or$cond = 0, $p1 = 0, $ptrC$036 = 0, $ptrC$1$lcssa = 0;
 var $ptrC$128 = 0, $ptrInt$038 = 0, $ptrInt$1$lcssa = 0, $ptrInt$130 = 0, $ptrV$037 = 0, $ptrV$1$lcssa = 0, $ptrV$129 = 0, $scevgep = 0, $scevgep43 = 0, $scevgep44 = 0, $scevgep45 = 0, $tmp13 = 0, $tmp17 = 0, $tmp21 = 0, $tmp25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $p1 = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 4;
 } else {
  $1 = (($partWidth) + ($x0))|0;
  $2 = ($1>>>0)>($width>>>0);
  $3 = ($y0|0)<(0);
  $or$cond = $2 | $3;
  if ($or$cond) {
   label = 4;
  } else {
   $4 = (($y0) + 5)|0;
   $5 = (($4) + ($partHeight))|0;
   $6 = ($5>>>0)>($height>>>0);
   if ($6) {
    label = 4;
   } else {
    $$0 = $ref;$$03 = $x0;$$04 = $y0;$$05 = $width;
   }
  }
 }
 if ((label|0) == 4) {
  $7 = (($partHeight) + 5)|0;
  _h264bsdFillBlock($ref,$p1,$x0,$y0,$width,$height,$partWidth,$7,$partWidth);
  $$0 = $p1;$$03 = 0;$$04 = 0;$$05 = $partWidth;
 }
 $8 = Math_imul($$04, $$05)|0;
 $9 = (($$03) + ($$05))|0;
 $$sum = (($9) + ($8))|0;
 $10 = $partHeight >>> 2;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = (($verOffset) + 2)|0;
 $13 = Math_imul($$05, $12)|0;
 $14 = ($$05*5)|0;
 $$sum7 = (($$sum) + ($13))|0;
 $$sum6 = (($$sum) + ($14))|0;
 $15 = (($$0) + ($$sum7)|0);
 $16 = (($$0) + ($$sum6)|0);
 $17 = (($$0) + ($$sum)|0);
 $18 = ($partWidth|0)==(0);
 $19 = $$05 << 2;
 $20 = (($19) - ($partWidth))|0;
 $21 = (64 - ($partWidth))|0;
 $22 = (0 - ($$05))|0;
 $23 = $22 << 1;
 $24 = $$05 << 1;
 $$0235 = $mb;$i$034 = $10;$ptrC$036 = $17;$ptrInt$038 = $15;$ptrV$037 = $16;
 while(1) {
  if ($18) {
   $$1$lcssa = $$0235;$ptrC$1$lcssa = $ptrC$036;$ptrInt$1$lcssa = $ptrInt$038;$ptrV$1$lcssa = $ptrV$037;
  } else {
   $scevgep = (($ptrInt$038) + ($partWidth)|0);
   $scevgep44 = (($$0235) + ($partWidth)|0);
   $$127 = $$0235;$j$026 = $partWidth;$ptrC$128 = $ptrC$036;$ptrInt$130 = $ptrInt$038;$ptrV$129 = $ptrV$037;
   while(1) {
    $25 = (($ptrV$129) + ($23)|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $28 = (($ptrV$129) + ($22)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = (($ptrV$129) + ($$05)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = (($ptrV$129) + ($24)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = (($ptrV$129) + 1|0);
    $38 = HEAP8[$ptrV$129>>0]|0;
    $39 = $38&255;
    $40 = (($33) + ($27))|0;
    $41 = $40 << 2;
    $42 = (($39) + ($30))|0;
    $43 = (($ptrC$128) + ($24)|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $tmp13 = ($42*20)|0;
    $46 = (($36) + 16)|0;
    $47 = (($46) - ($40))|0;
    $48 = (($47) - ($41))|0;
    $49 = (($48) + ($45))|0;
    $50 = (($49) + ($tmp13))|0;
    $51 = $50 >> 5;
    $$sum8 = (($51) + 512)|0;
    $52 = (3472 + ($$sum8)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = (($ptrInt$130) + ($24)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $58 = (($54) + 1)|0;
    $59 = (($58) + ($57))|0;
    $60 = $59 >>> 1;
    $61 = $60&255;
    $62 = (($$127) + 48|0);
    HEAP8[$62>>0] = $61;
    $63 = (($45) + ($39))|0;
    $64 = $63 << 2;
    $65 = (($30) + ($27))|0;
    $66 = (($ptrC$128) + ($$05)|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $tmp17 = ($65*20)|0;
    $69 = (($33) + 16)|0;
    $70 = (($69) - ($63))|0;
    $71 = (($70) - ($64))|0;
    $72 = (($71) + ($68))|0;
    $73 = (($72) + ($tmp17))|0;
    $74 = $73 >> 5;
    $$sum9 = (($74) + 512)|0;
    $75 = (3472 + ($$sum9)|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $76&255;
    $78 = (($ptrInt$130) + ($$05)|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = (($77) + 1)|0;
    $82 = (($81) + ($80))|0;
    $83 = $82 >>> 1;
    $84 = $83&255;
    $85 = (($$127) + 32|0);
    HEAP8[$85>>0] = $84;
    $86 = (($68) + ($30))|0;
    $87 = $86 << 2;
    $88 = (($45) + ($27))|0;
    $89 = HEAP8[$ptrC$128>>0]|0;
    $90 = $89&255;
    $tmp21 = ($88*20)|0;
    $91 = (($39) + 16)|0;
    $92 = (($91) - ($86))|0;
    $93 = (($92) - ($87))|0;
    $94 = (($93) + ($90))|0;
    $95 = (($94) + ($tmp21))|0;
    $96 = $95 >> 5;
    $$sum10 = (($96) + 512)|0;
    $97 = (3472 + ($$sum10)|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = HEAP8[$ptrInt$130>>0]|0;
    $101 = $100&255;
    $102 = (($99) + 1)|0;
    $103 = (($102) + ($101))|0;
    $104 = $103 >>> 1;
    $105 = $104&255;
    $106 = (($$127) + 16|0);
    HEAP8[$106>>0] = $105;
    $107 = (($90) + ($27))|0;
    $108 = $107 << 2;
    $109 = (($68) + ($45))|0;
    $110 = (($ptrC$128) + ($22)|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111&255;
    $tmp25 = ($109*20)|0;
    $113 = (($30) + 16)|0;
    $114 = (($113) - ($107))|0;
    $115 = (($114) - ($108))|0;
    $116 = (($115) + ($112))|0;
    $117 = (($116) + ($tmp25))|0;
    $118 = $117 >> 5;
    $$sum11 = (($118) + 512)|0;
    $119 = (3472 + ($$sum11)|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $120&255;
    $122 = (($ptrInt$130) + ($22)|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $125 = (($121) + 1)|0;
    $126 = (($125) + ($124))|0;
    $127 = $126 >>> 1;
    $128 = $127&255;
    $129 = (($$127) + 1|0);
    HEAP8[$$127>>0] = $128;
    $130 = (($ptrC$128) + 1|0);
    $131 = (($ptrInt$130) + 1|0);
    $132 = (($j$026) + -1)|0;
    $133 = ($132|0)==(0);
    if ($133) {
     break;
    } else {
     $$127 = $129;$j$026 = $132;$ptrC$128 = $130;$ptrInt$130 = $131;$ptrV$129 = $37;
    }
   }
   $scevgep43 = (($ptrC$036) + ($partWidth)|0);
   $scevgep45 = (($ptrV$037) + ($partWidth)|0);
   $$1$lcssa = $scevgep44;$ptrC$1$lcssa = $scevgep43;$ptrInt$1$lcssa = $scevgep;$ptrV$1$lcssa = $scevgep45;
  }
  $134 = (($ptrC$1$lcssa) + ($20)|0);
  $135 = (($ptrV$1$lcssa) + ($20)|0);
  $136 = (($ptrInt$1$lcssa) + ($20)|0);
  $137 = (($$1$lcssa) + ($21)|0);
  $138 = (($i$034) + -1)|0;
  $139 = ($138|0)==(0);
  if ($139) {
   break;
  } else {
   $$0235 = $137;$i$034 = $138;$ptrC$036 = $134;$ptrInt$038 = $136;$ptrV$037 = $135;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateHorHalf($ref,$mb,$x0,$y0,$width,$height,$partWidth,$partHeight) {
 $ref = $ref|0;
 $mb = $mb|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 var $$0 = 0, $$0237 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1$lcssa = 0, $$133 = 0, $$sum = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $or$cond = 0, $or$cond11 = 0, $p1 = 0, $ptrJ$035 = 0, $ptrJ$1$lcssa = 0, $ptrJ$126 = 0, $scevgep = 0, $scevgep42 = 0, $tmp13 = 0, $tmp17 = 0;
 var $tmp2$028 = 0, $tmp21 = 0, $tmp25 = 0, $tmp3$029 = 0, $tmp4$030 = 0, $tmp5$031 = 0, $tmp6$032 = 0, $tmp6$032$phi = 0, $x$027 = 0, $y$036 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $p1 = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 3;
 } else {
  $1 = (($x0) + 5)|0;
  $2 = (($1) + ($partWidth))|0;
  $3 = ($2>>>0)>($width>>>0);
  $4 = ($y0|0)<(0);
  $or$cond = $3 | $4;
  $5 = (($partHeight) + ($y0))|0;
  $6 = ($5>>>0)>($height>>>0);
  $or$cond11 = $or$cond | $6;
  if ($or$cond11) {
   label = 3;
  } else {
   $$0 = $ref;$$03 = $x0;$$04 = $y0;$$05 = $width;
  }
 }
 if ((label|0) == 3) {
  $7 = (($partWidth) + 5)|0;
  _h264bsdFillBlock($ref,$p1,$x0,$y0,$width,$height,$7,$partHeight,$7);
  $$0 = $p1;$$03 = 0;$$04 = 0;$$05 = $7;
 }
 $8 = ($partHeight|0)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = (($$03) + 5)|0;
 $10 = Math_imul($$04, $$05)|0;
 $$sum = (($9) + ($10))|0;
 $11 = (($$0) + ($$sum)|0);
 $12 = $partWidth >>> 2;
 $13 = ($12|0)==(0);
 $14 = (($$05) - ($partWidth))|0;
 $15 = (16 - ($partWidth))|0;
 $16 = $12 << 2;
 $$0237 = $mb;$ptrJ$035 = $11;$y$036 = $partHeight;
 while(1) {
  if ($13) {
   $$1$lcssa = $$0237;$ptrJ$1$lcssa = $ptrJ$035;
  } else {
   $17 = (($ptrJ$035) + -1|0);
   $18 = (($ptrJ$035) + -2|0);
   $19 = (($ptrJ$035) + -3|0);
   $20 = (($ptrJ$035) + -4|0);
   $21 = (($ptrJ$035) + -5|0);
   $22 = HEAP8[$17>>0]|0;
   $23 = HEAP8[$18>>0]|0;
   $24 = HEAP8[$19>>0]|0;
   $25 = HEAP8[$20>>0]|0;
   $26 = HEAP8[$21>>0]|0;
   $27 = $22&255;
   $28 = $23&255;
   $29 = $24&255;
   $30 = $25&255;
   $31 = $26&255;
   $scevgep = (($$0237) + ($16)|0);
   $$133 = $$0237;$ptrJ$126 = $ptrJ$035;$tmp2$028 = $27;$tmp3$029 = $28;$tmp4$030 = $29;$tmp5$031 = $30;$tmp6$032 = $31;$x$027 = $12;
   while(1) {
    $32 = (($tmp4$030) + ($tmp3$029))|0;
    $33 = (($tmp5$031) + ($tmp2$028))|0;
    $34 = (($ptrJ$126) + 1|0);
    $35 = HEAP8[$ptrJ$126>>0]|0;
    $36 = $35&255;
    $37 = $33 << 2;
    $tmp13 = ($32*20)|0;
    $38 = (($tmp6$032) + 16)|0;
    $39 = (($38) - ($33))|0;
    $40 = (($39) - ($37))|0;
    $41 = (($40) + ($36))|0;
    $42 = (($41) + ($tmp13))|0;
    $43 = $42 >> 5;
    $$sum6 = (($43) + 512)|0;
    $44 = (3472 + ($$sum6)|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = (($tmp3$029) + ($tmp2$028))|0;
    $47 = (($$133) + 1|0);
    HEAP8[$$133>>0] = $45;
    $48 = (($36) + ($tmp4$030))|0;
    $49 = (($ptrJ$126) + 2|0);
    $50 = HEAP8[$34>>0]|0;
    $51 = $50&255;
    $52 = $48 << 2;
    $tmp17 = ($46*20)|0;
    $53 = (($tmp5$031) + 16)|0;
    $54 = (($53) - ($48))|0;
    $55 = (($54) - ($52))|0;
    $56 = (($55) + ($51))|0;
    $57 = (($56) + ($tmp17))|0;
    $58 = $57 >> 5;
    $$sum7 = (($58) + 512)|0;
    $59 = (3472 + ($$sum7)|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = (($36) + ($tmp2$028))|0;
    $62 = (($$133) + 2|0);
    HEAP8[$47>>0] = $60;
    $63 = (($51) + ($tmp3$029))|0;
    $64 = (($ptrJ$126) + 3|0);
    $65 = HEAP8[$49>>0]|0;
    $66 = $65&255;
    $67 = $63 << 2;
    $tmp21 = ($61*20)|0;
    $68 = (($tmp4$030) + 16)|0;
    $69 = (($68) - ($63))|0;
    $70 = (($69) - ($67))|0;
    $71 = (($70) + ($66))|0;
    $72 = (($71) + ($tmp21))|0;
    $73 = $72 >> 5;
    $$sum8 = (($73) + 512)|0;
    $74 = (3472 + ($$sum8)|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = (($51) + ($36))|0;
    $77 = (($$133) + 3|0);
    HEAP8[$62>>0] = $75;
    $78 = (($66) + ($tmp2$028))|0;
    $79 = (($ptrJ$126) + 4|0);
    $80 = HEAP8[$64>>0]|0;
    $81 = $80&255;
    $82 = $78 << 2;
    $tmp25 = ($76*20)|0;
    $83 = (($tmp3$029) + 16)|0;
    $84 = (($83) - ($78))|0;
    $85 = (($84) - ($82))|0;
    $86 = (($85) + ($81))|0;
    $87 = (($86) + ($tmp25))|0;
    $88 = $87 >> 5;
    $$sum9 = (($88) + 512)|0;
    $89 = (3472 + ($$sum9)|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = (($$133) + 4|0);
    HEAP8[$77>>0] = $90;
    $92 = (($x$027) + -1)|0;
    $93 = ($92|0)==(0);
    if ($93) {
     break;
    } else {
     $tmp6$032$phi = $tmp2$028;$$133 = $91;$ptrJ$126 = $79;$tmp2$028 = $81;$tmp3$029 = $66;$tmp4$030 = $51;$tmp5$031 = $36;$x$027 = $92;$tmp6$032 = $tmp6$032$phi;
    }
   }
   $scevgep42 = (($ptrJ$035) + ($16)|0);
   $$1$lcssa = $scevgep;$ptrJ$1$lcssa = $scevgep42;
  }
  $94 = (($ptrJ$1$lcssa) + ($14)|0);
  $95 = (($$1$lcssa) + ($15)|0);
  $96 = (($y$036) + -1)|0;
  $97 = ($96|0)==(0);
  if ($97) {
   break;
  } else {
   $$0237 = $95;$ptrJ$035 = $94;$y$036 = $96;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateHorQuarter($ref,$mb,$x0,$y0,$width,$height,$partWidth,$partHeight,$horOffset) {
 $ref = $ref|0;
 $mb = $mb|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 $horOffset = $horOffset|0;
 var $$0 = 0, $$0238 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1$lcssa = 0, $$129 = 0, $$pn10 = 0, $$sum = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $$tmp2$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $p1 = 0, $ptrJ$036 = 0, $ptrJ$1$lcssa = 0, $ptrJ$127 = 0, $scevgep = 0, $scevgep43 = 0, $tmp14 = 0, $tmp18 = 0, $tmp2$0$pn = 0;
 var $tmp2$030 = 0, $tmp22 = 0, $tmp26 = 0, $tmp3$0$tmp4$0 = 0, $tmp3$031 = 0, $tmp3$1 = 0, $tmp4$032 = 0, $tmp4$1 = 0, $tmp5$033 = 0, $tmp5$1 = 0, $tmp6$034 = 0, $tmp6$034$phi = 0, $tmp6$1 = 0, $x$028 = 0, $y$037 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $p1 = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 3;
 } else {
  $1 = (($x0) + 5)|0;
  $2 = (($1) + ($partWidth))|0;
  $3 = ($2>>>0)>($width>>>0);
  $4 = ($y0|0)<(0);
  $or$cond = $3 | $4;
  $5 = (($partHeight) + ($y0))|0;
  $6 = ($5>>>0)>($height>>>0);
  $or$cond12 = $or$cond | $6;
  if ($or$cond12) {
   label = 3;
  } else {
   $$0 = $ref;$$03 = $x0;$$04 = $y0;$$05 = $width;
  }
 }
 if ((label|0) == 3) {
  $7 = (($partWidth) + 5)|0;
  _h264bsdFillBlock($ref,$p1,$x0,$y0,$width,$height,$7,$partHeight,$7);
  $$0 = $p1;$$03 = 0;$$04 = 0;$$05 = $7;
 }
 $8 = ($partHeight|0)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = (($$03) + 5)|0;
 $10 = Math_imul($$04, $$05)|0;
 $$sum = (($9) + ($10))|0;
 $11 = (($$0) + ($$sum)|0);
 $12 = $partWidth >>> 2;
 $13 = ($12|0)==(0);
 $14 = (($$05) - ($partWidth))|0;
 $15 = (16 - ($partWidth))|0;
 $16 = ($horOffset|0)!=(0);
 $17 = $12 << 2;
 $$0238 = $mb;$ptrJ$036 = $11;$y$037 = $partHeight;
 while(1) {
  if ($13) {
   $$1$lcssa = $$0238;$ptrJ$1$lcssa = $ptrJ$036;
  } else {
   $18 = (($ptrJ$036) + -1|0);
   $19 = (($ptrJ$036) + -2|0);
   $20 = (($ptrJ$036) + -3|0);
   $21 = (($ptrJ$036) + -4|0);
   $22 = (($ptrJ$036) + -5|0);
   $23 = HEAP8[$18>>0]|0;
   $24 = HEAP8[$19>>0]|0;
   $25 = HEAP8[$20>>0]|0;
   $26 = HEAP8[$21>>0]|0;
   $27 = HEAP8[$22>>0]|0;
   $28 = $23&255;
   $29 = $24&255;
   $30 = $25&255;
   $31 = $26&255;
   $32 = $27&255;
   $scevgep = (($$0238) + ($17)|0);
   $$129 = $$0238;$ptrJ$127 = $ptrJ$036;$tmp2$030 = $28;$tmp3$031 = $29;$tmp4$032 = $30;$tmp5$033 = $31;$tmp6$034 = $32;$x$028 = $12;
   while(1) {
    $33 = (($tmp4$032) + ($tmp3$031))|0;
    $34 = (($tmp5$033) + ($tmp2$030))|0;
    $35 = (($ptrJ$127) + 1|0);
    $36 = HEAP8[$ptrJ$127>>0]|0;
    $37 = $36&255;
    $38 = $34 << 2;
    $tmp14 = ($33*20)|0;
    $39 = (($tmp6$034) + 16)|0;
    $40 = (($39) - ($34))|0;
    $41 = (($40) - ($38))|0;
    $42 = (($41) + ($37))|0;
    $43 = (($42) + ($tmp14))|0;
    $44 = $43 >> 5;
    $$sum6 = (($44) + 512)|0;
    $45 = (3472 + ($$sum6)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $tmp3$0$tmp4$0 = $16 ? $tmp3$031 : $tmp4$032;
    $tmp6$1 = (($tmp3$0$tmp4$0) + 1)|0;
    $48 = (($tmp6$1) + ($47))|0;
    $49 = $48 >>> 1;
    $50 = $49&255;
    $51 = (($$129) + 1|0);
    HEAP8[$$129>>0] = $50;
    $52 = (($tmp3$031) + ($tmp2$030))|0;
    $53 = (($37) + ($tmp4$032))|0;
    $54 = (($ptrJ$127) + 2|0);
    $55 = HEAP8[$35>>0]|0;
    $56 = $55&255;
    $57 = $53 << 2;
    $tmp18 = ($52*20)|0;
    $58 = (($tmp5$033) + 16)|0;
    $59 = (($58) - ($53))|0;
    $60 = (($59) - ($57))|0;
    $61 = (($60) + ($56))|0;
    $62 = (($61) + ($tmp18))|0;
    $63 = $62 >> 5;
    $$sum7 = (($63) + 512)|0;
    $64 = (3472 + ($$sum7)|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65&255;
    $tmp2$0$pn = $16 ? $tmp2$030 : $tmp3$031;
    $tmp5$1 = (($tmp2$0$pn) + 1)|0;
    $67 = (($tmp5$1) + ($66))|0;
    $68 = $67 >>> 1;
    $69 = $68&255;
    $70 = (($$129) + 2|0);
    HEAP8[$51>>0] = $69;
    $71 = (($37) + ($tmp2$030))|0;
    $72 = (($56) + ($tmp3$031))|0;
    $73 = (($ptrJ$127) + 3|0);
    $74 = HEAP8[$54>>0]|0;
    $75 = $74&255;
    $76 = $72 << 2;
    $tmp22 = ($71*20)|0;
    $77 = (($tmp4$032) + 16)|0;
    $78 = (($77) - ($72))|0;
    $79 = (($78) - ($76))|0;
    $80 = (($79) + ($75))|0;
    $81 = (($80) + ($tmp22))|0;
    $82 = $81 >> 5;
    $$sum8 = (($82) + 512)|0;
    $83 = (3472 + ($$sum8)|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $$tmp2$0 = $16 ? $37 : $tmp2$030;
    $tmp4$1 = (($$tmp2$0) + 1)|0;
    $86 = (($tmp4$1) + ($85))|0;
    $87 = $86 >>> 1;
    $88 = $87&255;
    $89 = (($$129) + 3|0);
    HEAP8[$70>>0] = $88;
    $90 = (($56) + ($37))|0;
    $91 = (($75) + ($tmp2$030))|0;
    $92 = (($ptrJ$127) + 4|0);
    $93 = HEAP8[$73>>0]|0;
    $94 = $93&255;
    $95 = $91 << 2;
    $tmp26 = ($90*20)|0;
    $96 = (($tmp3$031) + 16)|0;
    $97 = (($96) - ($91))|0;
    $98 = (($97) - ($95))|0;
    $99 = (($98) + ($94))|0;
    $100 = (($99) + ($tmp26))|0;
    $101 = $100 >> 5;
    $$sum9 = (($101) + 512)|0;
    $102 = (3472 + ($$sum9)|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $$pn10 = $16 ? $56 : $37;
    $tmp3$1 = (($$pn10) + 1)|0;
    $105 = (($tmp3$1) + ($104))|0;
    $106 = $105 >>> 1;
    $107 = $106&255;
    $108 = (($$129) + 4|0);
    HEAP8[$89>>0] = $107;
    $109 = (($x$028) + -1)|0;
    $110 = ($109|0)==(0);
    if ($110) {
     break;
    } else {
     $tmp6$034$phi = $tmp2$030;$$129 = $108;$ptrJ$127 = $92;$tmp2$030 = $94;$tmp3$031 = $75;$tmp4$032 = $56;$tmp5$033 = $37;$x$028 = $109;$tmp6$034 = $tmp6$034$phi;
    }
   }
   $scevgep43 = (($ptrJ$036) + ($17)|0);
   $$1$lcssa = $scevgep;$ptrJ$1$lcssa = $scevgep43;
  }
  $111 = (($ptrJ$1$lcssa) + ($14)|0);
  $112 = (($$1$lcssa) + ($15)|0);
  $113 = (($y$037) + -1)|0;
  $114 = ($113|0)==(0);
  if ($114) {
   break;
  } else {
   $$0238 = $112;$ptrJ$036 = $111;$y$037 = $113;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateHorVerQuarter($ref,$mb,$x0,$y0,$width,$height,$partWidth,$partHeight,$horVerOffset) {
 $ref = $ref|0;
 $mb = $mb|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 $horVerOffset = $horVerOffset|0;
 var $$0 = 0, $$0272 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1$lcssa = 0, $$159 = 0, $$254 = 0, $$3$lcssa = 0, $$348 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0;
 var $$sum6 = 0, $$sum779 = 0, $$sum8 = 0, $$sum87 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $p1 = 0, $ptrC$055 = 0, $ptrC$1$lcssa = 0, $ptrC$149 = 0, $ptrJ$073 = 0;
 var $ptrJ$1$lcssa = 0, $ptrJ$160 = 0, $ptrV$056 = 0, $ptrV$1$lcssa = 0, $ptrV$150 = 0, $scevgep = 0, $scevgep82 = 0, $scevgep83 = 0, $scevgep85 = 0, $scevgep86 = 0, $tmp2$062 = 0, $tmp20 = 0, $tmp24 = 0, $tmp28 = 0, $tmp3$063 = 0, $tmp32 = 0, $tmp35 = 0, $tmp39 = 0, $tmp4$064 = 0, $tmp43 = 0;
 var $tmp47 = 0, $tmp5$065 = 0, $tmp6$066 = 0, $tmp6$066$phi = 0, $x$061 = 0, $x$151 = 0, $y$074 = 0, $y$157 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $p1 = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 4;
 } else {
  $1 = (($x0) + 5)|0;
  $2 = (($1) + ($partWidth))|0;
  $3 = ($2>>>0)>($width>>>0);
  $4 = ($y0|0)<(0);
  $or$cond = $3 | $4;
  if ($or$cond) {
   label = 4;
  } else {
   $5 = (($y0) + 5)|0;
   $6 = (($5) + ($partHeight))|0;
   $7 = ($6>>>0)>($height>>>0);
   if ($7) {
    label = 4;
   } else {
    $$0 = $ref;$$03 = $x0;$$04 = $y0;$$05 = $width;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = (($partWidth) + 5)|0;
  $9 = (($partHeight) + 5)|0;
  _h264bsdFillBlock($ref,$p1,$x0,$y0,$width,$height,$8,$9,$8);
  $$0 = $p1;$$03 = 0;$$04 = 0;$$05 = $8;
 }
 $10 = Math_imul($$04, $$05)|0;
 $11 = (($10) + ($$03))|0;
 $12 = $horVerOffset & 1;
 $$sum779 = $12 | 2;
 $$sum8 = (($$sum779) + ($$05))|0;
 $$sum9 = (($$sum8) + ($11))|0;
 $13 = (($$0) + ($$sum9)|0);
 $14 = ($partHeight|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = $horVerOffset >>> 1;
 $16 = $15 & 1;
 $17 = $16 | 2;
 $18 = Math_imul($$05, $17)|0;
 $$sum = (($18) + 5)|0;
 $$sum6 = (($$sum) + ($11))|0;
 $19 = (($$0) + ($$sum6)|0);
 $20 = $partWidth >>> 2;
 $21 = ($20|0)==(0);
 $22 = (($$05) - ($partWidth))|0;
 $23 = (16 - ($partWidth))|0;
 $24 = $20 << 2;
 $$0272 = $mb;$ptrJ$073 = $19;$y$074 = $partHeight;
 while(1) {
  if ($21) {
   $$1$lcssa = $$0272;$ptrJ$1$lcssa = $ptrJ$073;
  } else {
   $25 = (($ptrJ$073) + -1|0);
   $26 = (($ptrJ$073) + -2|0);
   $27 = (($ptrJ$073) + -3|0);
   $28 = (($ptrJ$073) + -4|0);
   $29 = (($ptrJ$073) + -5|0);
   $30 = HEAP8[$25>>0]|0;
   $31 = HEAP8[$26>>0]|0;
   $32 = HEAP8[$27>>0]|0;
   $33 = HEAP8[$28>>0]|0;
   $34 = HEAP8[$29>>0]|0;
   $35 = $30&255;
   $36 = $31&255;
   $37 = $32&255;
   $38 = $33&255;
   $39 = $34&255;
   $scevgep85 = (($$0272) + ($24)|0);
   $$159 = $$0272;$ptrJ$160 = $ptrJ$073;$tmp2$062 = $35;$tmp3$063 = $36;$tmp4$064 = $37;$tmp5$065 = $38;$tmp6$066 = $39;$x$061 = $20;
   while(1) {
    $40 = (($tmp4$064) + ($tmp3$063))|0;
    $41 = (($tmp5$065) + ($tmp2$062))|0;
    $42 = (($ptrJ$160) + 1|0);
    $43 = HEAP8[$ptrJ$160>>0]|0;
    $44 = $43&255;
    $45 = $41 << 2;
    $tmp20 = ($40*20)|0;
    $46 = (($tmp6$066) + 16)|0;
    $47 = (($46) - ($41))|0;
    $48 = (($47) - ($45))|0;
    $49 = (($48) + ($44))|0;
    $50 = (($49) + ($tmp20))|0;
    $51 = $50 >> 5;
    $$sum15 = (($51) + 512)|0;
    $52 = (3472 + ($$sum15)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = (($tmp3$063) + ($tmp2$062))|0;
    $55 = (($$159) + 1|0);
    HEAP8[$$159>>0] = $53;
    $56 = (($44) + ($tmp4$064))|0;
    $57 = (($ptrJ$160) + 2|0);
    $58 = HEAP8[$42>>0]|0;
    $59 = $58&255;
    $60 = $56 << 2;
    $tmp24 = ($54*20)|0;
    $61 = (($tmp5$065) + 16)|0;
    $62 = (($61) - ($56))|0;
    $63 = (($62) - ($60))|0;
    $64 = (($63) + ($59))|0;
    $65 = (($64) + ($tmp24))|0;
    $66 = $65 >> 5;
    $$sum16 = (($66) + 512)|0;
    $67 = (3472 + ($$sum16)|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = (($44) + ($tmp2$062))|0;
    $70 = (($$159) + 2|0);
    HEAP8[$55>>0] = $68;
    $71 = (($59) + ($tmp3$063))|0;
    $72 = (($ptrJ$160) + 3|0);
    $73 = HEAP8[$57>>0]|0;
    $74 = $73&255;
    $75 = $71 << 2;
    $tmp28 = ($69*20)|0;
    $76 = (($tmp4$064) + 16)|0;
    $77 = (($76) - ($71))|0;
    $78 = (($77) - ($75))|0;
    $79 = (($78) + ($74))|0;
    $80 = (($79) + ($tmp28))|0;
    $81 = $80 >> 5;
    $$sum17 = (($81) + 512)|0;
    $82 = (3472 + ($$sum17)|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = (($59) + ($44))|0;
    $85 = (($$159) + 3|0);
    HEAP8[$70>>0] = $83;
    $86 = (($74) + ($tmp2$062))|0;
    $87 = (($ptrJ$160) + 4|0);
    $88 = HEAP8[$72>>0]|0;
    $89 = $88&255;
    $90 = $86 << 2;
    $tmp32 = ($84*20)|0;
    $91 = (($tmp3$063) + 16)|0;
    $92 = (($91) - ($86))|0;
    $93 = (($92) - ($90))|0;
    $94 = (($93) + ($89))|0;
    $95 = (($94) + ($tmp32))|0;
    $96 = $95 >> 5;
    $$sum18 = (($96) + 512)|0;
    $97 = (3472 + ($$sum18)|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = (($$159) + 4|0);
    HEAP8[$85>>0] = $98;
    $100 = (($x$061) + -1)|0;
    $101 = ($100|0)==(0);
    if ($101) {
     break;
    } else {
     $tmp6$066$phi = $tmp2$062;$$159 = $99;$ptrJ$160 = $87;$tmp2$062 = $89;$tmp3$063 = $74;$tmp4$064 = $59;$tmp5$065 = $44;$x$061 = $100;$tmp6$066 = $tmp6$066$phi;
    }
   }
   $scevgep86 = (($ptrJ$073) + ($24)|0);
   $$1$lcssa = $scevgep85;$ptrJ$1$lcssa = $scevgep86;
  }
  $102 = (($ptrJ$1$lcssa) + ($22)|0);
  $103 = (($$1$lcssa) + ($23)|0);
  $104 = (($y$074) + -1)|0;
  $105 = ($104|0)==(0);
  if ($105) {
   break;
  } else {
   $$0272 = $103;$ptrJ$073 = $102;$y$074 = $104;
  }
 }
 $106 = $partHeight >>> 2;
 $107 = ($106|0)==(0);
 if ($107) {
  STACKTOP = sp;return;
 }
 $108 = ($$05*5)|0;
 $109 = $partHeight << 4;
 $$sum10 = (($$sum9) + ($108))|0;
 $110 = (($$0) + ($$sum10)|0);
 $$sum87 = (($23) - ($109))|0;
 $111 = (($$1$lcssa) + ($$sum87)|0);
 $112 = ($partWidth|0)==(0);
 $113 = $$05 << 2;
 $114 = (($113) - ($partWidth))|0;
 $115 = (64 - ($partWidth))|0;
 $116 = (0 - ($$05))|0;
 $117 = $116 << 1;
 $118 = $$05 << 1;
 $$254 = $111;$ptrC$055 = $13;$ptrV$056 = $110;$y$157 = $106;
 while(1) {
  if ($112) {
   $$3$lcssa = $$254;$ptrC$1$lcssa = $ptrC$055;$ptrV$1$lcssa = $ptrV$056;
  } else {
   $scevgep82 = (($$254) + ($partWidth)|0);
   $$348 = $$254;$ptrC$149 = $ptrC$055;$ptrV$150 = $ptrV$056;$x$151 = $partWidth;
   while(1) {
    $119 = (($ptrV$150) + ($117)|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $120&255;
    $122 = (($ptrV$150) + ($116)|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $125 = (($ptrV$150) + ($$05)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126&255;
    $128 = (($ptrV$150) + ($118)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = (($ptrV$150) + 1|0);
    $132 = HEAP8[$ptrV$150>>0]|0;
    $133 = $132&255;
    $134 = (($127) + ($121))|0;
    $135 = $134 << 2;
    $136 = (($133) + ($124))|0;
    $137 = (($ptrC$149) + ($118)|0);
    $138 = HEAP8[$137>>0]|0;
    $139 = $138&255;
    $tmp35 = ($136*20)|0;
    $140 = (($130) + 16)|0;
    $141 = (($140) - ($134))|0;
    $142 = (($141) - ($135))|0;
    $143 = (($142) + ($139))|0;
    $144 = (($143) + ($tmp35))|0;
    $145 = $144 >> 5;
    $$sum11 = (($145) + 512)|0;
    $146 = (3472 + ($$sum11)|0);
    $147 = HEAP8[$146>>0]|0;
    $148 = $147&255;
    $149 = (($$348) + 48|0);
    $150 = HEAP8[$149>>0]|0;
    $151 = $150&255;
    $152 = (($148) + 1)|0;
    $153 = (($152) + ($151))|0;
    $154 = $153 >>> 1;
    $155 = $154&255;
    HEAP8[$149>>0] = $155;
    $156 = (($139) + ($133))|0;
    $157 = $156 << 2;
    $158 = (($124) + ($121))|0;
    $159 = (($ptrC$149) + ($$05)|0);
    $160 = HEAP8[$159>>0]|0;
    $161 = $160&255;
    $tmp39 = ($158*20)|0;
    $162 = (($127) + 16)|0;
    $163 = (($162) - ($156))|0;
    $164 = (($163) - ($157))|0;
    $165 = (($164) + ($161))|0;
    $166 = (($165) + ($tmp39))|0;
    $167 = $166 >> 5;
    $$sum12 = (($167) + 512)|0;
    $168 = (3472 + ($$sum12)|0);
    $169 = HEAP8[$168>>0]|0;
    $170 = $169&255;
    $171 = (($$348) + 32|0);
    $172 = HEAP8[$171>>0]|0;
    $173 = $172&255;
    $174 = (($170) + 1)|0;
    $175 = (($174) + ($173))|0;
    $176 = $175 >>> 1;
    $177 = $176&255;
    HEAP8[$171>>0] = $177;
    $178 = HEAP8[$ptrC$149>>0]|0;
    $179 = $178&255;
    $180 = (($161) + ($124))|0;
    $181 = $180 << 2;
    $182 = (($139) + ($121))|0;
    $tmp43 = ($182*20)|0;
    $183 = (($133) + 16)|0;
    $184 = (($183) - ($180))|0;
    $185 = (($184) - ($181))|0;
    $186 = (($185) + ($179))|0;
    $187 = (($186) + ($tmp43))|0;
    $188 = $187 >> 5;
    $$sum13 = (($188) + 512)|0;
    $189 = (3472 + ($$sum13)|0);
    $190 = HEAP8[$189>>0]|0;
    $191 = $190&255;
    $192 = (($$348) + 16|0);
    $193 = HEAP8[$192>>0]|0;
    $194 = $193&255;
    $195 = (($191) + 1)|0;
    $196 = (($195) + ($194))|0;
    $197 = $196 >>> 1;
    $198 = $197&255;
    HEAP8[$192>>0] = $198;
    $199 = (($ptrC$149) + ($116)|0);
    $200 = HEAP8[$199>>0]|0;
    $201 = $200&255;
    $202 = (($179) + ($121))|0;
    $203 = $202 << 2;
    $204 = (($161) + ($139))|0;
    $tmp47 = ($204*20)|0;
    $205 = (($124) + 16)|0;
    $206 = (($205) - ($202))|0;
    $207 = (($206) - ($203))|0;
    $208 = (($207) + ($201))|0;
    $209 = (($208) + ($tmp47))|0;
    $210 = $209 >> 5;
    $$sum14 = (($210) + 512)|0;
    $211 = (3472 + ($$sum14)|0);
    $212 = HEAP8[$211>>0]|0;
    $213 = $212&255;
    $214 = HEAP8[$$348>>0]|0;
    $215 = $214&255;
    $216 = (($213) + 1)|0;
    $217 = (($216) + ($215))|0;
    $218 = $217 >>> 1;
    $219 = $218&255;
    $220 = (($$348) + 1|0);
    HEAP8[$$348>>0] = $219;
    $221 = (($ptrC$149) + 1|0);
    $222 = (($x$151) + -1)|0;
    $223 = ($222|0)==(0);
    if ($223) {
     break;
    } else {
     $$348 = $220;$ptrC$149 = $221;$ptrV$150 = $131;$x$151 = $222;
    }
   }
   $scevgep = (($ptrC$055) + ($partWidth)|0);
   $scevgep83 = (($ptrV$056) + ($partWidth)|0);
   $$3$lcssa = $scevgep82;$ptrC$1$lcssa = $scevgep;$ptrV$1$lcssa = $scevgep83;
  }
  $224 = (($ptrC$1$lcssa) + ($114)|0);
  $225 = (($ptrV$1$lcssa) + ($114)|0);
  $226 = (($$3$lcssa) + ($115)|0);
  $227 = (($y$157) + -1)|0;
  $228 = ($227|0)==(0);
  if ($228) {
   break;
  } else {
   $$254 = $226;$ptrC$055 = $224;$ptrV$056 = $225;$y$157 = $227;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateMidHalf($ref,$mb,$x0,$y0,$width,$height,$partWidth,$partHeight) {
 $ref = $ref|0;
 $mb = $mb|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 var $$0 = 0, $$0246 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1$lcssa = 0, $$140 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum10 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b1$065 = 0;
 var $b1$1$lcssa = 0, $b1$157 = 0, $or$cond = 0, $p1 = 0, $phitmp = 0, $ptrC$048 = 0, $ptrC$1$lcssa = 0, $ptrC$142 = 0, $ptrJ$066 = 0, $ptrJ$1$lcssa = 0, $ptrJ$158 = 0, $ptrV$049 = 0, $ptrV$1$lcssa = 0, $ptrV$143 = 0, $scevgep = 0, $scevgep72 = 0, $scevgep73 = 0, $scevgep75 = 0, $scevgep76 = 0, $table = 0;
 var $tmp12 = 0, $tmp16 = 0, $tmp2$052 = 0, $tmp20 = 0, $tmp24 = 0, $tmp27 = 0, $tmp3$053 = 0, $tmp31 = 0, $tmp35 = 0, $tmp39 = 0, $tmp4$054 = 0, $tmp5$055 = 0, $tmp6$056 = 0, $tmp6$056$phi = 0, $x$051 = 0, $x$141 = 0, $y$064 = 0, $y$147 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1792|0;
 $p1 = sp + 1344|0;
 $table = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 5;
 } else {
  $1 = (($x0) + 5)|0;
  $2 = (($1) + ($partWidth))|0;
  $3 = ($2>>>0)>($width>>>0);
  $4 = ($y0|0)<(0);
  $or$cond = $3 | $4;
  if ($or$cond) {
   label = 5;
  } else {
   $5 = (($y0) + 5)|0;
   $6 = (($5) + ($partHeight))|0;
   $7 = ($6>>>0)>($height>>>0);
   if ($7) {
    label = 5;
   } else {
    $$pre = (($partHeight) + 5)|0;
    $phitmp = (($x0) + 5)|0;
    $$0 = $ref;$$03 = $phitmp;$$04 = $y0;$$05 = $width;$$pre$phiZ2D = $$pre;
   }
  }
 }
 if ((label|0) == 5) {
  $8 = (($partWidth) + 5)|0;
  $9 = (($partHeight) + 5)|0;
  _h264bsdFillBlock($ref,$p1,$x0,$y0,$width,$height,$8,$9,$8);
  $$0 = $p1;$$03 = 5;$$04 = 0;$$05 = $8;$$pre$phiZ2D = $9;
 }
 $10 = ($$pre$phiZ2D|0)==(0);
 if (!($10)) {
  $11 = Math_imul($$04, $$05)|0;
  $$sum = (($$03) + ($11))|0;
  $12 = (($$0) + ($$sum)|0);
  $13 = $partWidth >>> 2;
  $14 = ($13|0)==(0);
  $15 = (($$05) - ($partWidth))|0;
  $16 = $13 << 2;
  $b1$065 = $table;$ptrJ$066 = $12;$y$064 = $$pre$phiZ2D;
  while(1) {
   if ($14) {
    $b1$1$lcssa = $b1$065;$ptrJ$1$lcssa = $ptrJ$066;
   } else {
    $17 = (($ptrJ$066) + -1|0);
    $18 = (($ptrJ$066) + -2|0);
    $19 = (($ptrJ$066) + -3|0);
    $20 = (($ptrJ$066) + -4|0);
    $21 = (($ptrJ$066) + -5|0);
    $22 = HEAP8[$17>>0]|0;
    $23 = HEAP8[$18>>0]|0;
    $24 = HEAP8[$19>>0]|0;
    $25 = HEAP8[$20>>0]|0;
    $26 = HEAP8[$21>>0]|0;
    $27 = $22&255;
    $28 = $23&255;
    $29 = $24&255;
    $30 = $25&255;
    $31 = $26&255;
    $scevgep75 = (($b1$065) + ($16<<2)|0);
    $b1$157 = $b1$065;$ptrJ$158 = $ptrJ$066;$tmp2$052 = $27;$tmp3$053 = $28;$tmp4$054 = $29;$tmp5$055 = $30;$tmp6$056 = $31;$x$051 = $13;
    while(1) {
     $32 = (($tmp4$054) + ($tmp3$053))|0;
     $33 = (($tmp5$055) + ($tmp2$052))|0;
     $34 = (($ptrJ$158) + 1|0);
     $35 = HEAP8[$ptrJ$158>>0]|0;
     $36 = $35&255;
     $37 = $33 << 2;
     $tmp12 = ($32*20)|0;
     $38 = (($tmp6$056) - ($33))|0;
     $39 = (($38) - ($37))|0;
     $40 = (($39) + ($36))|0;
     $41 = (($40) + ($tmp12))|0;
     $42 = (($b1$157) + 4|0);
     HEAP32[$b1$157>>2] = $41;
     $43 = (($tmp3$053) + ($tmp2$052))|0;
     $44 = (($36) + ($tmp4$054))|0;
     $45 = (($ptrJ$158) + 2|0);
     $46 = HEAP8[$34>>0]|0;
     $47 = $46&255;
     $48 = $44 << 2;
     $tmp16 = ($43*20)|0;
     $49 = (($tmp5$055) - ($44))|0;
     $50 = (($49) + ($47))|0;
     $51 = (($50) - ($48))|0;
     $52 = (($51) + ($tmp16))|0;
     $53 = (($b1$157) + 8|0);
     HEAP32[$42>>2] = $52;
     $54 = (($36) + ($tmp2$052))|0;
     $55 = (($47) + ($tmp3$053))|0;
     $56 = (($ptrJ$158) + 3|0);
     $57 = HEAP8[$45>>0]|0;
     $58 = $57&255;
     $59 = $55 << 2;
     $tmp20 = ($54*20)|0;
     $60 = (($tmp4$054) - ($55))|0;
     $61 = (($60) + ($58))|0;
     $62 = (($61) - ($59))|0;
     $63 = (($62) + ($tmp20))|0;
     $64 = (($b1$157) + 12|0);
     HEAP32[$53>>2] = $63;
     $65 = (($47) + ($36))|0;
     $66 = (($58) + ($tmp2$052))|0;
     $67 = (($ptrJ$158) + 4|0);
     $68 = HEAP8[$56>>0]|0;
     $69 = $68&255;
     $70 = $66 << 2;
     $tmp24 = ($65*20)|0;
     $71 = (($tmp3$053) - ($66))|0;
     $72 = (($71) + ($69))|0;
     $73 = (($72) - ($70))|0;
     $74 = (($73) + ($tmp24))|0;
     $75 = (($b1$157) + 16|0);
     HEAP32[$64>>2] = $74;
     $76 = (($x$051) + -1)|0;
     $77 = ($76|0)==(0);
     if ($77) {
      break;
     } else {
      $tmp6$056$phi = $tmp2$052;$b1$157 = $75;$ptrJ$158 = $67;$tmp2$052 = $69;$tmp3$053 = $58;$tmp4$054 = $47;$tmp5$055 = $36;$x$051 = $76;$tmp6$056 = $tmp6$056$phi;
     }
    }
    $scevgep76 = (($ptrJ$066) + ($16)|0);
    $b1$1$lcssa = $scevgep75;$ptrJ$1$lcssa = $scevgep76;
   }
   $78 = (($ptrJ$1$lcssa) + ($15)|0);
   $79 = (($y$064) + -1)|0;
   $80 = ($79|0)==(0);
   if ($80) {
    break;
   } else {
    $b1$065 = $b1$1$lcssa;$ptrJ$066 = $78;$y$064 = $79;
   }
  }
 }
 $81 = $partHeight >>> 2;
 $82 = ($81|0)==(0);
 if ($82) {
  STACKTOP = sp;return;
 }
 $$sum6 = ($partWidth*6)|0;
 $83 = (($table) + ($$sum6<<2)|0);
 $84 = (($table) + ($partWidth<<2)|0);
 $85 = ($partWidth|0)==(0);
 $86 = (64 - ($partWidth))|0;
 $87 = ($partWidth*3)|0;
 $88 = (0 - ($partWidth))|0;
 $89 = $88 << 1;
 $90 = $partWidth << 1;
 $$0246 = $mb;$ptrC$048 = $84;$ptrV$049 = $83;$y$147 = $81;
 while(1) {
  if ($85) {
   $$1$lcssa = $$0246;$ptrC$1$lcssa = $ptrC$048;$ptrV$1$lcssa = $ptrV$049;
  } else {
   $scevgep72 = (($$0246) + ($partWidth)|0);
   $$140 = $$0246;$ptrC$142 = $ptrC$048;$ptrV$143 = $ptrV$049;$x$141 = $partWidth;
   while(1) {
    $91 = (($ptrV$143) + ($89<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($ptrV$143) + ($88<<2)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($ptrV$143) + ($partWidth<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($ptrV$143) + ($90<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($ptrV$143) + 4|0);
    $100 = HEAP32[$ptrV$143>>2]|0;
    $101 = (($96) + ($92))|0;
    $102 = $101 << 2;
    $103 = (($100) + ($94))|0;
    $104 = (($ptrC$142) + ($90<<2)|0);
    $105 = HEAP32[$104>>2]|0;
    $tmp27 = ($103*20)|0;
    $106 = (($98) + 512)|0;
    $107 = (($106) - ($101))|0;
    $108 = (($107) - ($102))|0;
    $109 = (($108) + ($105))|0;
    $110 = (($109) + ($tmp27))|0;
    $111 = $110 >> 10;
    $$sum7 = (($111) + 512)|0;
    $112 = (3472 + ($$sum7)|0);
    $113 = HEAP8[$112>>0]|0;
    $114 = (($$140) + 48|0);
    HEAP8[$114>>0] = $113;
    $115 = (($105) + ($100))|0;
    $116 = $115 << 2;
    $117 = (($94) + ($92))|0;
    $118 = (($ptrC$142) + ($partWidth<<2)|0);
    $119 = HEAP32[$118>>2]|0;
    $tmp31 = ($117*20)|0;
    $120 = (($96) + 512)|0;
    $121 = (($120) - ($115))|0;
    $122 = (($121) - ($116))|0;
    $123 = (($122) + ($119))|0;
    $124 = (($123) + ($tmp31))|0;
    $125 = $124 >> 10;
    $$sum8 = (($125) + 512)|0;
    $126 = (3472 + ($$sum8)|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = (($$140) + 32|0);
    HEAP8[$128>>0] = $127;
    $129 = HEAP32[$ptrC$142>>2]|0;
    $130 = (($119) + ($94))|0;
    $131 = $130 << 2;
    $132 = (($105) + ($92))|0;
    $tmp35 = ($132*20)|0;
    $133 = (($100) + 512)|0;
    $134 = (($133) - ($130))|0;
    $135 = (($134) - ($131))|0;
    $136 = (($135) + ($129))|0;
    $137 = (($136) + ($tmp35))|0;
    $138 = $137 >> 10;
    $$sum9 = (($138) + 512)|0;
    $139 = (3472 + ($$sum9)|0);
    $140 = HEAP8[$139>>0]|0;
    $141 = (($$140) + 16|0);
    HEAP8[$141>>0] = $140;
    $142 = (($ptrC$142) + ($88<<2)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = (($129) + ($92))|0;
    $145 = $144 << 2;
    $146 = (($119) + ($105))|0;
    $tmp39 = ($146*20)|0;
    $147 = (($94) + 512)|0;
    $148 = (($147) - ($144))|0;
    $149 = (($148) - ($145))|0;
    $150 = (($149) + ($143))|0;
    $151 = (($150) + ($tmp39))|0;
    $152 = $151 >> 10;
    $$sum10 = (($152) + 512)|0;
    $153 = (3472 + ($$sum10)|0);
    $154 = HEAP8[$153>>0]|0;
    $155 = (($$140) + 1|0);
    HEAP8[$$140>>0] = $154;
    $156 = (($ptrC$142) + 4|0);
    $157 = (($x$141) + -1)|0;
    $158 = ($157|0)==(0);
    if ($158) {
     break;
    } else {
     $$140 = $155;$ptrC$142 = $156;$ptrV$143 = $99;$x$141 = $157;
    }
   }
   $scevgep = (($ptrC$048) + ($partWidth<<2)|0);
   $scevgep73 = (($ptrV$049) + ($partWidth<<2)|0);
   $$1$lcssa = $scevgep72;$ptrC$1$lcssa = $scevgep;$ptrV$1$lcssa = $scevgep73;
  }
  $159 = (($$1$lcssa) + ($86)|0);
  $160 = (($ptrC$1$lcssa) + ($87<<2)|0);
  $161 = (($ptrV$1$lcssa) + ($87<<2)|0);
  $162 = (($y$147) + -1)|0;
  $163 = ($162|0)==(0);
  if ($163) {
   break;
  } else {
   $$0246 = $159;$ptrC$048 = $160;$ptrV$049 = $161;$y$147 = $162;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateMidVerQuarter($ref,$mb,$x0,$y0,$width,$height,$partWidth,$partHeight,$verOffset) {
 $ref = $ref|0;
 $mb = $mb|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 $verOffset = $verOffset|0;
 var $$0 = 0, $$0253 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1$lcssa = 0, $$145 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b1$073 = 0, $b1$1$lcssa = 0, $b1$165 = 0, $or$cond = 0;
 var $p1 = 0, $phitmp = 0, $ptrC$055 = 0, $ptrC$1$lcssa = 0, $ptrC$147 = 0, $ptrInt$057 = 0, $ptrInt$1$lcssa = 0, $ptrInt$149 = 0, $ptrJ$074 = 0, $ptrJ$1$lcssa = 0, $ptrJ$166 = 0, $ptrV$056 = 0, $ptrV$1$lcssa = 0, $ptrV$148 = 0, $scevgep = 0, $scevgep81 = 0, $scevgep82 = 0, $scevgep83 = 0, $scevgep85 = 0, $scevgep86 = 0;
 var $table = 0, $tmp17 = 0, $tmp2$060 = 0, $tmp21 = 0, $tmp25 = 0, $tmp29 = 0, $tmp3$061 = 0, $tmp32 = 0, $tmp36 = 0, $tmp4$062 = 0, $tmp40 = 0, $tmp44 = 0, $tmp5$063 = 0, $tmp6$064 = 0, $tmp6$064$phi = 0, $x$059 = 0, $x$146 = 0, $y$072 = 0, $y$154 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1792|0;
 $p1 = sp + 1344|0;
 $table = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 5;
 } else {
  $1 = (($x0) + 5)|0;
  $2 = (($1) + ($partWidth))|0;
  $3 = ($2>>>0)>($width>>>0);
  $4 = ($y0|0)<(0);
  $or$cond = $3 | $4;
  if ($or$cond) {
   label = 5;
  } else {
   $5 = (($y0) + 5)|0;
   $6 = (($5) + ($partHeight))|0;
   $7 = ($6>>>0)>($height>>>0);
   if ($7) {
    label = 5;
   } else {
    $$pre = (($partHeight) + 5)|0;
    $phitmp = (($x0) + 5)|0;
    $$0 = $ref;$$03 = $phitmp;$$04 = $y0;$$05 = $width;$$pre$phiZ2D = $$pre;
   }
  }
 }
 if ((label|0) == 5) {
  $8 = (($partWidth) + 5)|0;
  $9 = (($partHeight) + 5)|0;
  _h264bsdFillBlock($ref,$p1,$x0,$y0,$width,$height,$8,$9,$8);
  $$0 = $p1;$$03 = 5;$$04 = 0;$$05 = $8;$$pre$phiZ2D = $9;
 }
 $10 = ($$pre$phiZ2D|0)==(0);
 if (!($10)) {
  $11 = Math_imul($$04, $$05)|0;
  $$sum = (($$03) + ($11))|0;
  $12 = (($$0) + ($$sum)|0);
  $13 = $partWidth >>> 2;
  $14 = ($13|0)==(0);
  $15 = (($$05) - ($partWidth))|0;
  $16 = $13 << 2;
  $b1$073 = $table;$ptrJ$074 = $12;$y$072 = $$pre$phiZ2D;
  while(1) {
   if ($14) {
    $b1$1$lcssa = $b1$073;$ptrJ$1$lcssa = $ptrJ$074;
   } else {
    $17 = (($ptrJ$074) + -1|0);
    $18 = (($ptrJ$074) + -2|0);
    $19 = (($ptrJ$074) + -3|0);
    $20 = (($ptrJ$074) + -4|0);
    $21 = (($ptrJ$074) + -5|0);
    $22 = HEAP8[$17>>0]|0;
    $23 = HEAP8[$18>>0]|0;
    $24 = HEAP8[$19>>0]|0;
    $25 = HEAP8[$20>>0]|0;
    $26 = HEAP8[$21>>0]|0;
    $27 = $22&255;
    $28 = $23&255;
    $29 = $24&255;
    $30 = $25&255;
    $31 = $26&255;
    $scevgep85 = (($b1$073) + ($16<<2)|0);
    $b1$165 = $b1$073;$ptrJ$166 = $ptrJ$074;$tmp2$060 = $27;$tmp3$061 = $28;$tmp4$062 = $29;$tmp5$063 = $30;$tmp6$064 = $31;$x$059 = $13;
    while(1) {
     $32 = (($tmp4$062) + ($tmp3$061))|0;
     $33 = (($tmp5$063) + ($tmp2$060))|0;
     $34 = (($ptrJ$166) + 1|0);
     $35 = HEAP8[$ptrJ$166>>0]|0;
     $36 = $35&255;
     $37 = $33 << 2;
     $tmp17 = ($32*20)|0;
     $38 = (($tmp6$064) - ($33))|0;
     $39 = (($38) - ($37))|0;
     $40 = (($39) + ($36))|0;
     $41 = (($40) + ($tmp17))|0;
     $42 = (($b1$165) + 4|0);
     HEAP32[$b1$165>>2] = $41;
     $43 = (($tmp3$061) + ($tmp2$060))|0;
     $44 = (($36) + ($tmp4$062))|0;
     $45 = (($ptrJ$166) + 2|0);
     $46 = HEAP8[$34>>0]|0;
     $47 = $46&255;
     $48 = $44 << 2;
     $tmp21 = ($43*20)|0;
     $49 = (($tmp5$063) - ($44))|0;
     $50 = (($49) + ($47))|0;
     $51 = (($50) - ($48))|0;
     $52 = (($51) + ($tmp21))|0;
     $53 = (($b1$165) + 8|0);
     HEAP32[$42>>2] = $52;
     $54 = (($36) + ($tmp2$060))|0;
     $55 = (($47) + ($tmp3$061))|0;
     $56 = (($ptrJ$166) + 3|0);
     $57 = HEAP8[$45>>0]|0;
     $58 = $57&255;
     $59 = $55 << 2;
     $tmp25 = ($54*20)|0;
     $60 = (($tmp4$062) - ($55))|0;
     $61 = (($60) + ($58))|0;
     $62 = (($61) - ($59))|0;
     $63 = (($62) + ($tmp25))|0;
     $64 = (($b1$165) + 12|0);
     HEAP32[$53>>2] = $63;
     $65 = (($47) + ($36))|0;
     $66 = (($58) + ($tmp2$060))|0;
     $67 = (($ptrJ$166) + 4|0);
     $68 = HEAP8[$56>>0]|0;
     $69 = $68&255;
     $70 = $66 << 2;
     $tmp29 = ($65*20)|0;
     $71 = (($tmp3$061) - ($66))|0;
     $72 = (($71) + ($69))|0;
     $73 = (($72) - ($70))|0;
     $74 = (($73) + ($tmp29))|0;
     $75 = (($b1$165) + 16|0);
     HEAP32[$64>>2] = $74;
     $76 = (($x$059) + -1)|0;
     $77 = ($76|0)==(0);
     if ($77) {
      break;
     } else {
      $tmp6$064$phi = $tmp2$060;$b1$165 = $75;$ptrJ$166 = $67;$tmp2$060 = $69;$tmp3$061 = $58;$tmp4$062 = $47;$tmp5$063 = $36;$x$059 = $76;$tmp6$064 = $tmp6$064$phi;
     }
    }
    $scevgep86 = (($ptrJ$074) + ($16)|0);
    $b1$1$lcssa = $scevgep85;$ptrJ$1$lcssa = $scevgep86;
   }
   $78 = (($ptrJ$1$lcssa) + ($15)|0);
   $79 = (($y$072) + -1)|0;
   $80 = ($79|0)==(0);
   if ($80) {
    break;
   } else {
    $b1$073 = $b1$1$lcssa;$ptrJ$074 = $78;$y$072 = $79;
   }
  }
 }
 $81 = $partHeight >>> 2;
 $82 = ($81|0)==(0);
 if ($82) {
  STACKTOP = sp;return;
 }
 $83 = (($verOffset) + 2)|0;
 $84 = Math_imul($83, $partWidth)|0;
 $$sum7 = (($84) + ($partWidth))|0;
 $$sum6 = ($partWidth*6)|0;
 $85 = (($table) + ($$sum7<<2)|0);
 $86 = (($table) + ($$sum6<<2)|0);
 $87 = (($table) + ($partWidth<<2)|0);
 $88 = ($partWidth|0)==(0);
 $89 = (64 - ($partWidth))|0;
 $90 = ($partWidth*3)|0;
 $91 = (0 - ($partWidth))|0;
 $92 = $91 << 1;
 $93 = $partWidth << 1;
 $$0253 = $mb;$ptrC$055 = $87;$ptrInt$057 = $85;$ptrV$056 = $86;$y$154 = $81;
 while(1) {
  if ($88) {
   $$1$lcssa = $$0253;$ptrC$1$lcssa = $ptrC$055;$ptrInt$1$lcssa = $ptrInt$057;$ptrV$1$lcssa = $ptrV$056;
  } else {
   $scevgep = (($ptrInt$057) + ($partWidth<<2)|0);
   $scevgep82 = (($$0253) + ($partWidth)|0);
   $$145 = $$0253;$ptrC$147 = $ptrC$055;$ptrInt$149 = $ptrInt$057;$ptrV$148 = $ptrV$056;$x$146 = $partWidth;
   while(1) {
    $94 = (($ptrV$148) + ($92<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($ptrV$148) + ($91<<2)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (($ptrV$148) + ($partWidth<<2)|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (($ptrV$148) + ($93<<2)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($ptrV$148) + 4|0);
    $103 = HEAP32[$ptrV$148>>2]|0;
    $104 = (($99) + ($95))|0;
    $105 = $104 << 2;
    $106 = (($103) + ($97))|0;
    $107 = (($ptrC$147) + ($93<<2)|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($ptrInt$149) + ($93<<2)|0);
    $110 = HEAP32[$109>>2]|0;
    $tmp32 = ($106*20)|0;
    $111 = (($101) + 512)|0;
    $112 = (($111) - ($104))|0;
    $113 = (($112) - ($105))|0;
    $114 = (($113) + ($108))|0;
    $115 = (($114) + ($tmp32))|0;
    $116 = $115 >> 10;
    $$sum8 = (($116) + 512)|0;
    $117 = (3472 + ($$sum8)|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $120 = (($110) + 16)|0;
    $121 = $120 >> 5;
    $$sum9 = (($121) + 512)|0;
    $122 = (3472 + ($$sum9)|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $125 = (($119) + 1)|0;
    $126 = (($125) + ($124))|0;
    $127 = $126 >>> 1;
    $128 = $127&255;
    $129 = (($$145) + 48|0);
    HEAP8[$129>>0] = $128;
    $130 = (($108) + ($103))|0;
    $131 = $130 << 2;
    $132 = (($97) + ($95))|0;
    $133 = (($ptrC$147) + ($partWidth<<2)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (($ptrInt$149) + ($partWidth<<2)|0);
    $136 = HEAP32[$135>>2]|0;
    $tmp36 = ($132*20)|0;
    $137 = (($99) + 512)|0;
    $138 = (($137) - ($130))|0;
    $139 = (($138) - ($131))|0;
    $140 = (($139) + ($134))|0;
    $141 = (($140) + ($tmp36))|0;
    $142 = $141 >> 10;
    $$sum10 = (($142) + 512)|0;
    $143 = (3472 + ($$sum10)|0);
    $144 = HEAP8[$143>>0]|0;
    $145 = $144&255;
    $146 = (($136) + 16)|0;
    $147 = $146 >> 5;
    $$sum11 = (($147) + 512)|0;
    $148 = (3472 + ($$sum11)|0);
    $149 = HEAP8[$148>>0]|0;
    $150 = $149&255;
    $151 = (($145) + 1)|0;
    $152 = (($151) + ($150))|0;
    $153 = $152 >>> 1;
    $154 = $153&255;
    $155 = (($$145) + 32|0);
    HEAP8[$155>>0] = $154;
    $156 = HEAP32[$ptrC$147>>2]|0;
    $157 = (($134) + ($97))|0;
    $158 = $157 << 2;
    $159 = (($108) + ($95))|0;
    $160 = HEAP32[$ptrInt$149>>2]|0;
    $tmp40 = ($159*20)|0;
    $161 = (($103) + 512)|0;
    $162 = (($161) - ($157))|0;
    $163 = (($162) - ($158))|0;
    $164 = (($163) + ($156))|0;
    $165 = (($164) + ($tmp40))|0;
    $166 = $165 >> 10;
    $$sum12 = (($166) + 512)|0;
    $167 = (3472 + ($$sum12)|0);
    $168 = HEAP8[$167>>0]|0;
    $169 = $168&255;
    $170 = (($160) + 16)|0;
    $171 = $170 >> 5;
    $$sum13 = (($171) + 512)|0;
    $172 = (3472 + ($$sum13)|0);
    $173 = HEAP8[$172>>0]|0;
    $174 = $173&255;
    $175 = (($169) + 1)|0;
    $176 = (($175) + ($174))|0;
    $177 = $176 >>> 1;
    $178 = $177&255;
    $179 = (($$145) + 16|0);
    HEAP8[$179>>0] = $178;
    $180 = (($ptrC$147) + ($91<<2)|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = (($156) + ($95))|0;
    $183 = $182 << 2;
    $184 = (($134) + ($108))|0;
    $185 = (($ptrInt$149) + ($91<<2)|0);
    $186 = HEAP32[$185>>2]|0;
    $tmp44 = ($184*20)|0;
    $187 = (($97) + 512)|0;
    $188 = (($187) - ($182))|0;
    $189 = (($188) - ($183))|0;
    $190 = (($189) + ($181))|0;
    $191 = (($190) + ($tmp44))|0;
    $192 = $191 >> 10;
    $$sum14 = (($192) + 512)|0;
    $193 = (3472 + ($$sum14)|0);
    $194 = HEAP8[$193>>0]|0;
    $195 = $194&255;
    $196 = (($186) + 16)|0;
    $197 = $196 >> 5;
    $$sum15 = (($197) + 512)|0;
    $198 = (3472 + ($$sum15)|0);
    $199 = HEAP8[$198>>0]|0;
    $200 = $199&255;
    $201 = (($195) + 1)|0;
    $202 = (($201) + ($200))|0;
    $203 = $202 >>> 1;
    $204 = $203&255;
    $205 = (($$145) + 1|0);
    HEAP8[$$145>>0] = $204;
    $206 = (($ptrC$147) + 4|0);
    $207 = (($ptrInt$149) + 4|0);
    $208 = (($x$146) + -1)|0;
    $209 = ($208|0)==(0);
    if ($209) {
     break;
    } else {
     $$145 = $205;$ptrC$147 = $206;$ptrInt$149 = $207;$ptrV$148 = $102;$x$146 = $208;
    }
   }
   $scevgep81 = (($ptrC$055) + ($partWidth<<2)|0);
   $scevgep83 = (($ptrV$056) + ($partWidth<<2)|0);
   $$1$lcssa = $scevgep82;$ptrC$1$lcssa = $scevgep81;$ptrInt$1$lcssa = $scevgep;$ptrV$1$lcssa = $scevgep83;
  }
  $210 = (($$1$lcssa) + ($89)|0);
  $211 = (($ptrC$1$lcssa) + ($90<<2)|0);
  $212 = (($ptrV$1$lcssa) + ($90<<2)|0);
  $213 = (($ptrInt$1$lcssa) + ($90<<2)|0);
  $214 = (($y$154) + -1)|0;
  $215 = ($214|0)==(0);
  if ($215) {
   break;
  } else {
   $$0253 = $210;$ptrC$055 = $211;$ptrInt$057 = $213;$ptrV$056 = $212;$y$154 = $214;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateMidHorQuarter($ref,$mb,$x0,$y0,$width,$height,$partWidth,$partHeight,$horOffset) {
 $ref = $ref|0;
 $mb = $mb|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 $horOffset = $horOffset|0;
 var $$0 = 0, $$0259 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1$lcssa = 0, $$153 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $h1$073 = 0, $h1$1$lcssa = 0, $h1$164 = 0, $or$cond = 0, $p1 = 0, $ptrC$074 = 0, $ptrC$1$lcssa = 0, $ptrC$165 = 0, $ptrInt$058 = 0, $ptrInt$1$lcssa = 0, $ptrInt$152 = 0, $ptrJ$057 = 0, $ptrJ$1$lcssa = 0, $ptrJ$151 = 0, $ptrV$075 = 0, $ptrV$1$lcssa = 0, $ptrV$166 = 0, $scevgep = 0, $scevgep79 = 0, $scevgep80 = 0;
 var $scevgep83 = 0, $scevgep84 = 0, $scevgep85 = 0, $table = 0, $tmp17 = 0, $tmp2$046 = 0, $tmp21 = 0, $tmp25 = 0, $tmp29 = 0, $tmp3$047 = 0, $tmp32 = 0, $tmp36 = 0, $tmp4$048 = 0, $tmp40 = 0, $tmp44 = 0, $tmp5$049 = 0, $tmp6$050 = 0, $tmp6$050$phi = 0, $x$063 = 0, $x$145 = 0;
 var $y$072 = 0, $y$156 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1792|0;
 $p1 = sp + 1344|0;
 $table = sp;
 $0 = (($partWidth) + 5)|0;
 $1 = ($x0|0)<(0);
 if ($1) {
  label = 4;
 } else {
  $2 = (($x0) + 5)|0;
  $3 = (($2) + ($partWidth))|0;
  $4 = ($3>>>0)>($width>>>0);
  $5 = ($y0|0)<(0);
  $or$cond = $4 | $5;
  if ($or$cond) {
   label = 4;
  } else {
   $6 = (($y0) + 5)|0;
   $7 = (($6) + ($partHeight))|0;
   $8 = ($7>>>0)>($height>>>0);
   if ($8) {
    label = 4;
   } else {
    $$0 = $ref;$$03 = $x0;$$04 = $y0;$$05 = $width;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = (($partHeight) + 5)|0;
  _h264bsdFillBlock($ref,$p1,$x0,$y0,$width,$height,$0,$9,$0);
  $$0 = $p1;$$03 = 0;$$04 = 0;$$05 = $0;
 }
 $10 = Math_imul($$04, $$05)|0;
 $11 = (($$03) + ($$05))|0;
 $$sum = (($11) + ($10))|0;
 $12 = $partHeight >>> 2;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = ($$05*5)|0;
  $$sum6 = (($$sum) + ($14))|0;
  $15 = (($$0) + ($$sum6)|0);
  $16 = (($$0) + ($$sum)|0);
  $17 = (($table) + ($0<<2)|0);
  $18 = ($0|0)==(0);
  $19 = $$05 << 2;
  $20 = (($19) - ($partWidth))|0;
  $21 = (($20) + -5)|0;
  $22 = ($0*3)|0;
  $23 = (0 - ($$05))|0;
  $24 = $23 << 1;
  $25 = $$05 << 1;
  $26 = $0 << 1;
  $27 = (-5 - ($partWidth))|0;
  $h1$073 = $17;$ptrC$074 = $16;$ptrV$075 = $15;$y$072 = $12;
  while(1) {
   if ($18) {
    $h1$1$lcssa = $h1$073;$ptrC$1$lcssa = $ptrC$074;$ptrV$1$lcssa = $ptrV$075;
   } else {
    $scevgep84 = (($h1$073) + ($0<<2)|0);
    $h1$164 = $h1$073;$ptrC$165 = $ptrC$074;$ptrV$166 = $ptrV$075;$x$063 = $0;
    while(1) {
     $28 = (($ptrV$166) + ($24)|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = $29&255;
     $31 = (($ptrV$166) + ($23)|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = (($ptrV$166) + ($$05)|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = $35&255;
     $37 = (($ptrV$166) + ($25)|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = (($ptrV$166) + 1|0);
     $41 = HEAP8[$ptrV$166>>0]|0;
     $42 = $41&255;
     $43 = (($36) + ($30))|0;
     $44 = $43 << 2;
     $45 = (($42) + ($33))|0;
     $46 = (($ptrC$165) + ($25)|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = $47&255;
     $tmp17 = ($45*20)|0;
     $49 = (($39) - ($43))|0;
     $50 = (($49) - ($44))|0;
     $51 = (($50) + ($48))|0;
     $52 = (($51) + ($tmp17))|0;
     $53 = (($h1$164) + ($26<<2)|0);
     HEAP32[$53>>2] = $52;
     $54 = (($48) + ($42))|0;
     $55 = $54 << 2;
     $56 = (($33) + ($30))|0;
     $57 = (($ptrC$165) + ($$05)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $tmp21 = ($56*20)|0;
     $60 = (($36) - ($54))|0;
     $61 = (($60) + ($59))|0;
     $62 = (($61) - ($55))|0;
     $63 = (($62) + ($tmp21))|0;
     $64 = (($h1$164) + ($0<<2)|0);
     HEAP32[$64>>2] = $63;
     $65 = HEAP8[$ptrC$165>>0]|0;
     $66 = $65&255;
     $67 = (($59) + ($33))|0;
     $68 = $67 << 2;
     $69 = (($48) + ($30))|0;
     $tmp25 = ($69*20)|0;
     $70 = (($42) - ($67))|0;
     $71 = (($70) + ($66))|0;
     $72 = (($71) - ($68))|0;
     $73 = (($72) + ($tmp25))|0;
     HEAP32[$h1$164>>2] = $73;
     $74 = (($ptrC$165) + ($23)|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = $75&255;
     $77 = (($66) + ($30))|0;
     $78 = $77 << 2;
     $79 = (($59) + ($48))|0;
     $tmp29 = ($79*20)|0;
     $80 = (($33) - ($77))|0;
     $81 = (($80) + ($76))|0;
     $82 = (($81) - ($78))|0;
     $83 = (($82) + ($tmp29))|0;
     $84 = (($h1$164) + ($27<<2)|0);
     HEAP32[$84>>2] = $83;
     $85 = (($h1$164) + 4|0);
     $86 = (($ptrC$165) + 1|0);
     $87 = (($x$063) + -1)|0;
     $88 = ($87|0)==(0);
     if ($88) {
      break;
     } else {
      $h1$164 = $85;$ptrC$165 = $86;$ptrV$166 = $40;$x$063 = $87;
     }
    }
    $scevgep83 = (($ptrC$074) + ($0)|0);
    $scevgep85 = (($ptrV$075) + ($0)|0);
    $h1$1$lcssa = $scevgep84;$ptrC$1$lcssa = $scevgep83;$ptrV$1$lcssa = $scevgep85;
   }
   $89 = (($ptrC$1$lcssa) + ($21)|0);
   $90 = (($ptrV$1$lcssa) + ($21)|0);
   $91 = (($h1$1$lcssa) + ($22<<2)|0);
   $92 = (($y$072) + -1)|0;
   $93 = ($92|0)==(0);
   if ($93) {
    break;
   } else {
    $h1$073 = $91;$ptrC$074 = $89;$ptrV$075 = $90;$y$072 = $92;
   }
  }
 }
 $94 = ($partHeight|0)==(0);
 if ($94) {
  STACKTOP = sp;return;
 }
 $$sum7 = (($horOffset) + 2)|0;
 $95 = (($table) + ($$sum7<<2)|0);
 $96 = (($table) + 20|0);
 $97 = $partWidth >>> 2;
 $98 = ($97|0)==(0);
 $99 = (16 - ($partWidth))|0;
 $100 = $97 << 2;
 $$0259 = $mb;$ptrInt$058 = $95;$ptrJ$057 = $96;$y$156 = $partHeight;
 while(1) {
  if ($98) {
   $$1$lcssa = $$0259;$ptrInt$1$lcssa = $ptrInt$058;$ptrJ$1$lcssa = $ptrJ$057;
  } else {
   $101 = (($ptrJ$057) + -4|0);
   $102 = (($ptrJ$057) + -8|0);
   $103 = (($ptrJ$057) + -12|0);
   $104 = (($ptrJ$057) + -16|0);
   $105 = (($ptrJ$057) + -20|0);
   $106 = HEAP32[$101>>2]|0;
   $107 = HEAP32[$102>>2]|0;
   $108 = HEAP32[$103>>2]|0;
   $109 = HEAP32[$104>>2]|0;
   $110 = HEAP32[$105>>2]|0;
   $scevgep79 = (($ptrInt$058) + ($100<<2)|0);
   $$153 = $$0259;$ptrInt$152 = $ptrInt$058;$ptrJ$151 = $ptrJ$057;$tmp2$046 = $106;$tmp3$047 = $107;$tmp4$048 = $108;$tmp5$049 = $109;$tmp6$050 = $110;$x$145 = $97;
   while(1) {
    $111 = (($tmp4$048) + ($tmp3$047))|0;
    $112 = (($tmp5$049) + ($tmp2$046))|0;
    $113 = (($ptrJ$151) + 4|0);
    $114 = HEAP32[$ptrJ$151>>2]|0;
    $115 = $112 << 2;
    $116 = (($ptrInt$152) + 4|0);
    $117 = HEAP32[$ptrInt$152>>2]|0;
    $tmp32 = ($111*20)|0;
    $118 = (($tmp6$050) + 512)|0;
    $119 = (($118) - ($112))|0;
    $120 = (($119) - ($115))|0;
    $121 = (($120) + ($114))|0;
    $122 = (($121) + ($tmp32))|0;
    $123 = $122 >> 10;
    $$sum8 = (($123) + 512)|0;
    $124 = (3472 + ($$sum8)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125&255;
    $127 = (($117) + 16)|0;
    $128 = $127 >> 5;
    $$sum9 = (($128) + 512)|0;
    $129 = (3472 + ($$sum9)|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = $130&255;
    $132 = (($126) + 1)|0;
    $133 = (($132) + ($131))|0;
    $134 = $133 >>> 1;
    $135 = $134&255;
    $136 = (($$153) + 1|0);
    HEAP8[$$153>>0] = $135;
    $137 = (($tmp3$047) + ($tmp2$046))|0;
    $138 = (($114) + ($tmp4$048))|0;
    $139 = (($ptrJ$151) + 8|0);
    $140 = HEAP32[$113>>2]|0;
    $141 = $138 << 2;
    $142 = (($ptrInt$152) + 8|0);
    $143 = HEAP32[$116>>2]|0;
    $tmp36 = ($137*20)|0;
    $144 = (($tmp5$049) + 512)|0;
    $145 = (($144) - ($138))|0;
    $146 = (($145) - ($141))|0;
    $147 = (($146) + ($140))|0;
    $148 = (($147) + ($tmp36))|0;
    $149 = $148 >> 10;
    $$sum10 = (($149) + 512)|0;
    $150 = (3472 + ($$sum10)|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = $151&255;
    $153 = (($143) + 16)|0;
    $154 = $153 >> 5;
    $$sum11 = (($154) + 512)|0;
    $155 = (3472 + ($$sum11)|0);
    $156 = HEAP8[$155>>0]|0;
    $157 = $156&255;
    $158 = (($152) + 1)|0;
    $159 = (($158) + ($157))|0;
    $160 = $159 >>> 1;
    $161 = $160&255;
    $162 = (($$153) + 2|0);
    HEAP8[$136>>0] = $161;
    $163 = (($114) + ($tmp2$046))|0;
    $164 = (($140) + ($tmp3$047))|0;
    $165 = (($ptrJ$151) + 12|0);
    $166 = HEAP32[$139>>2]|0;
    $167 = $164 << 2;
    $168 = (($ptrInt$152) + 12|0);
    $169 = HEAP32[$142>>2]|0;
    $tmp40 = ($163*20)|0;
    $170 = (($tmp4$048) + 512)|0;
    $171 = (($170) - ($164))|0;
    $172 = (($171) - ($167))|0;
    $173 = (($172) + ($166))|0;
    $174 = (($173) + ($tmp40))|0;
    $175 = $174 >> 10;
    $$sum12 = (($175) + 512)|0;
    $176 = (3472 + ($$sum12)|0);
    $177 = HEAP8[$176>>0]|0;
    $178 = $177&255;
    $179 = (($169) + 16)|0;
    $180 = $179 >> 5;
    $$sum13 = (($180) + 512)|0;
    $181 = (3472 + ($$sum13)|0);
    $182 = HEAP8[$181>>0]|0;
    $183 = $182&255;
    $184 = (($178) + 1)|0;
    $185 = (($184) + ($183))|0;
    $186 = $185 >>> 1;
    $187 = $186&255;
    $188 = (($$153) + 3|0);
    HEAP8[$162>>0] = $187;
    $189 = (($140) + ($114))|0;
    $190 = (($166) + ($tmp2$046))|0;
    $191 = (($ptrJ$151) + 16|0);
    $192 = HEAP32[$165>>2]|0;
    $193 = $190 << 2;
    $194 = (($ptrInt$152) + 16|0);
    $195 = HEAP32[$168>>2]|0;
    $tmp44 = ($189*20)|0;
    $196 = (($tmp3$047) + 512)|0;
    $197 = (($196) - ($190))|0;
    $198 = (($197) - ($193))|0;
    $199 = (($198) + ($192))|0;
    $200 = (($199) + ($tmp44))|0;
    $201 = $200 >> 10;
    $$sum14 = (($201) + 512)|0;
    $202 = (3472 + ($$sum14)|0);
    $203 = HEAP8[$202>>0]|0;
    $204 = $203&255;
    $205 = (($195) + 16)|0;
    $206 = $205 >> 5;
    $$sum15 = (($206) + 512)|0;
    $207 = (3472 + ($$sum15)|0);
    $208 = HEAP8[$207>>0]|0;
    $209 = $208&255;
    $210 = (($204) + 1)|0;
    $211 = (($210) + ($209))|0;
    $212 = $211 >>> 1;
    $213 = $212&255;
    $214 = (($$153) + 4|0);
    HEAP8[$188>>0] = $213;
    $215 = (($x$145) + -1)|0;
    $216 = ($215|0)==(0);
    if ($216) {
     break;
    } else {
     $tmp6$050$phi = $tmp2$046;$$153 = $214;$ptrInt$152 = $194;$ptrJ$151 = $191;$tmp2$046 = $192;$tmp3$047 = $166;$tmp4$048 = $140;$tmp5$049 = $114;$x$145 = $215;$tmp6$050 = $tmp6$050$phi;
    }
   }
   $scevgep = (($$0259) + ($100)|0);
   $scevgep80 = (($ptrJ$057) + ($100<<2)|0);
   $$1$lcssa = $scevgep;$ptrInt$1$lcssa = $scevgep79;$ptrJ$1$lcssa = $scevgep80;
  }
  $217 = (($ptrJ$1$lcssa) + 20|0);
  $218 = (($ptrInt$1$lcssa) + 20|0);
  $219 = (($$1$lcssa) + ($99)|0);
  $220 = (($y$156) + -1)|0;
  $221 = ($220|0)==(0);
  if ($221) {
   break;
  } else {
   $$0259 = $219;$ptrInt$058 = $218;$ptrJ$057 = $217;$y$156 = $220;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdPredictSamples($data,$mv,$refPic,$xA,$yA,$partX,$partY,$partWidth,$partHeight) {
 $data = $data|0;
 $mv = $mv|0;
 $refPic = $refPic|0;
 $xA = $xA|0;
 $yA = $yA|0;
 $partX = $partX|0;
 $partY = $partY|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 var $$sum = 0, $$sum$i = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $or$cond$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $partY << 4;
 $$sum = (($0) + ($partX))|0;
 $1 = (($data) + ($$sum)|0);
 $2 = HEAP16[$mv>>1]|0;
 $3 = $2 << 16 >> 16;
 $4 = $3 & 3;
 $5 = (($mv) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = $7 & 3;
 $9 = (($refPic) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 << 4;
 $12 = (($refPic) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << 4;
 $15 = (($partX) + ($xA))|0;
 $16 = $3 >> 2;
 $17 = (($15) + ($16))|0;
 $18 = (($partY) + ($yA))|0;
 $19 = $7 >> 2;
 $20 = (($18) + ($19))|0;
 $21 = ((6800 + ($4<<4)|0) + ($8<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 do {
  switch ($22|0) {
  case 14:  {
   $57 = HEAP32[$refPic>>2]|0;
   $58 = (($17) + -2)|0;
   $59 = (($20) + -2)|0;
   _h264bsdInterpolateMidHorQuarter($57,$1,$58,$59,$11,$14,$partWidth,$partHeight,1);
   break;
  }
  case 10:  {
   $46 = HEAP32[$refPic>>2]|0;
   $47 = (($17) + -2)|0;
   $48 = (($20) + -2)|0;
   _h264bsdInterpolateMidHalf($46,$1,$47,$48,$11,$14,$partWidth,$partHeight);
   break;
  }
  case 9:  {
   $43 = HEAP32[$refPic>>2]|0;
   $44 = (($17) + -2)|0;
   $45 = (($20) + -2)|0;
   _h264bsdInterpolateMidVerQuarter($43,$1,$44,$45,$11,$14,$partWidth,$partHeight,0);
   break;
  }
  case 6:  {
   $35 = HEAP32[$refPic>>2]|0;
   $36 = (($17) + -2)|0;
   $37 = (($20) + -2)|0;
   _h264bsdInterpolateMidHorQuarter($35,$1,$36,$37,$11,$14,$partWidth,$partHeight,0);
   break;
  }
  case 13:  {
   $54 = HEAP32[$refPic>>2]|0;
   $55 = (($17) + -2)|0;
   $56 = (($20) + -2)|0;
   _h264bsdInterpolateHorVerQuarter($54,$1,$55,$56,$11,$14,$partWidth,$partHeight,1);
   break;
  }
  case 11:  {
   $49 = HEAP32[$refPic>>2]|0;
   $50 = (($17) + -2)|0;
   $51 = (($20) + -2)|0;
   _h264bsdInterpolateMidVerQuarter($49,$1,$50,$51,$11,$14,$partWidth,$partHeight,1);
   break;
  }
  case 1:  {
   $24 = HEAP32[$refPic>>2]|0;
   $25 = (($20) + -2)|0;
   _h264bsdInterpolateVerQuarter($24,$1,$17,$25,$11,$14,$partWidth,$partHeight,0);
   break;
  }
  case 8:  {
   $41 = HEAP32[$refPic>>2]|0;
   $42 = (($17) + -2)|0;
   _h264bsdInterpolateHorHalf($41,$1,$42,$20,$11,$14,$partWidth,$partHeight);
   break;
  }
  case 7:  {
   $38 = HEAP32[$refPic>>2]|0;
   $39 = (($17) + -2)|0;
   $40 = (($20) + -2)|0;
   _h264bsdInterpolateHorVerQuarter($38,$1,$39,$40,$11,$14,$partWidth,$partHeight,2);
   break;
  }
  case 12:  {
   $52 = HEAP32[$refPic>>2]|0;
   $53 = (($17) + -2)|0;
   _h264bsdInterpolateHorQuarter($52,$1,$53,$20,$11,$14,$partWidth,$partHeight,1);
   break;
  }
  case 3:  {
   $28 = HEAP32[$refPic>>2]|0;
   $29 = (($20) + -2)|0;
   _h264bsdInterpolateVerQuarter($28,$1,$17,$29,$11,$14,$partWidth,$partHeight,1);
   break;
  }
  case 4:  {
   $30 = HEAP32[$refPic>>2]|0;
   $31 = (($17) + -2)|0;
   _h264bsdInterpolateHorQuarter($30,$1,$31,$20,$11,$14,$partWidth,$partHeight,0);
   break;
  }
  case 0:  {
   $23 = HEAP32[$refPic>>2]|0;
   _h264bsdFillBlock($23,$1,$17,$20,$11,$14,$partWidth,$partHeight,16);
   break;
  }
  case 2:  {
   $26 = HEAP32[$refPic>>2]|0;
   $27 = (($20) + -2)|0;
   _h264bsdInterpolateVerHalf($26,$1,$17,$27,$11,$14,$partWidth,$partHeight);
   break;
  }
  case 5:  {
   $32 = HEAP32[$refPic>>2]|0;
   $33 = (($17) + -2)|0;
   $34 = (($20) + -2)|0;
   _h264bsdInterpolateHorVerQuarter($32,$1,$33,$34,$11,$14,$partWidth,$partHeight,0);
   break;
  }
  default: {
   $60 = HEAP32[$refPic>>2]|0;
   $61 = (($17) + -2)|0;
   $62 = (($20) + -2)|0;
   _h264bsdInterpolateHorVerQuarter($60,$1,$61,$62,$11,$14,$partWidth,$partHeight,3);
  }
  }
 } while(0);
 $63 = $partY >>> 1;
 $64 = $63 << 3;
 $65 = $partX >>> 1;
 $$sum1 = (($65) + 256)|0;
 $$sum2 = (($$sum1) + ($64))|0;
 $66 = (($data) + ($$sum2)|0);
 $67 = HEAP32[$9>>2]|0;
 $68 = $67 << 3;
 $69 = HEAP32[$12>>2]|0;
 $70 = $69 << 3;
 $71 = $15 >>> 1;
 $72 = HEAP16[$mv>>1]|0;
 $73 = $72 << 16 >> 16;
 $74 = $73 >> 3;
 $75 = (($74) + ($71))|0;
 $76 = $18 >>> 1;
 $77 = HEAP16[$5>>1]|0;
 $78 = $77 << 16 >> 16;
 $79 = $78 >> 3;
 $80 = (($79) + ($76))|0;
 $81 = $73 & 7;
 $82 = $78 & 7;
 $83 = $partWidth >>> 1;
 $84 = $partHeight >>> 1;
 $85 = HEAP32[$refPic>>2]|0;
 $86 = $67 << 8;
 $87 = Math_imul($86, $69)|0;
 $88 = (($85) + ($87)|0);
 $89 = ($81|0)!=(0);
 $90 = ($82|0)!=(0);
 $or$cond$i = $89 & $90;
 if ($or$cond$i) {
  _h264bsdInterpolateChromaHorVer($88,$66,$75,$80,$68,$70,$81,$82,$83,$84);
  STACKTOP = sp;return;
 }
 if ($89) {
  _h264bsdInterpolateChromaHor($88,$66,$75,$80,$68,$70,$81,$83,$84);
  STACKTOP = sp;return;
 }
 if ($90) {
  _h264bsdInterpolateChromaVer($88,$66,$75,$80,$68,$70,$82,$83,$84);
  STACKTOP = sp;return;
 } else {
  _h264bsdFillBlock($88,$66,$75,$80,$68,$70,$83,$84,8);
  $91 = Math_imul($70, $68)|0;
  $$sum$i = (($91) + ($87))|0;
  $92 = (($85) + ($$sum$i)|0);
  $$sum3 = (($$sum2) + 64)|0;
  $93 = (($data) + ($$sum3)|0);
  _h264bsdFillBlock($92,$93,$75,$80,$68,$70,$83,$84,8);
  STACKTOP = sp;return;
 }
}
function _h264bsdFillRow7($ref,$fill,$left,$center,$right) {
 $ref = $ref|0;
 $fill = $fill|0;
 $left = $left|0;
 $center = $center|0;
 $right = $right|0;
 var $$0110 = 0, $$03$lcssa = 0, $$04$lcssa = 0, $$048 = 0, $$1$lcssa = 0, $$19 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep20 = 0, $scevgep21 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($left|0)==(0);
 if ($0) {
  $$03$lcssa = $fill;
 } else {
  $1 = HEAP8[$ref>>0]|0;
  _memset(($fill|0),($1|0),($left|0))|0;
  $scevgep21 = (($fill) + ($left)|0);
  $$03$lcssa = $scevgep21;
 }
 $2 = ($center|0)==(0);
 if ($2) {
  $$04$lcssa = $ref;$$1$lcssa = $$03$lcssa;
 } else {
  $scevgep = (($$03$lcssa) + ($center)|0);
  $$0110 = $center;$$048 = $ref;$$19 = $$03$lcssa;
  while(1) {
   $3 = (($$048) + 1|0);
   $4 = HEAP8[$$048>>0]|0;
   $5 = (($$19) + 1|0);
   HEAP8[$$19>>0] = $4;
   $6 = (($$0110) + -1)|0;
   $7 = ($6|0)==(0);
   if ($7) {
    break;
   } else {
    $$0110 = $6;$$048 = $3;$$19 = $5;
   }
  }
  $scevgep20 = (($ref) + ($center)|0);
  $$04$lcssa = $scevgep20;$$1$lcssa = $scevgep;
 }
 $8 = ($right|0)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = (($$04$lcssa) + -1|0);
 $10 = HEAP8[$9>>0]|0;
 _memset(($$1$lcssa|0),($10|0),($right|0))|0;
 STACKTOP = sp;return;
}
function _FillRow1($ref,$fill,$left,$center,$right) {
 $ref = $ref|0;
 $fill = $fill|0;
 $left = $left|0;
 $center = $center|0;
 $right = $right|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _H264SwDecMemcpy($fill,$ref,$center);
 STACKTOP = sp;return;
}
function _h264bsdReorderRefPicList($dpb,$order,$currFrameNum,$numRefIdxActive) {
 $dpb = $dpb|0;
 $order = $order|0;
 $currFrameNum = $currFrameNum|0;
 $numRefIdxActive = $numRefIdxActive|0;
 var $$ = 0, $$0 = 0, $$i$2$i = 0, $$off$i = 0, $$off$i1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $exitcond = 0;
 var $found$0$i = 0, $found$1$i = 0, $found$2$i = 0, $frameNumWrap$0$i = 0, $i$0$ph$i = 0, $i$01$i = 0, $i$1$ph$i = 0, $i$2$i = 0, $j$09 = 0, $j$110 = 0, $k$011 = 0, $k$1 = 0, $or$cond$i = 0, $or$cond2$i = 0, $picNum$1$ph = 0, $picNumNoWrap$0 = 0, $picNumPred$017 = 0, $picNumPred$13 = 0, $refIdx$018 = 0, $switch$i = 0;
 var $switch$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($dpb) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = HEAP32[$dpb>>2]|0;
  $4 = (($dpb) + 32|0);
  $i$01$i = 0;
  while(1) {
   $5 = ((($3) + (($i$01$i*40)|0)|0) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $$off$i = (($6) + -1)|0;
   $switch$i = ($$off$i>>>0)<(2);
   if ($switch$i) {
    $7 = ((($3) + (($i$01$i*40)|0)|0) + 12|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8>>>0)>($currFrameNum>>>0);
    if ($9) {
     $10 = HEAP32[$4>>2]|0;
     $11 = (($8) - ($10))|0;
     $frameNumWrap$0$i = $11;
    } else {
     $frameNumWrap$0$i = $8;
    }
    $12 = ((($3) + (($i$01$i*40)|0)|0) + 8|0);
    HEAP32[$12>>2] = $frameNumWrap$0$i;
   }
   $13 = (($i$01$i) + 1)|0;
   $exitcond = ($13|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $i$01$i = $13;
   }
  }
 }
 $14 = HEAP32[$order>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (($order) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17>>>0)<(3);
 if (!($18)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = (($dpb) + 32|0);
 $20 = (($dpb) + 24|0);
 $21 = (($dpb) + 4|0);
 $22 = $17;$picNumPred$017 = $currFrameNum;$refIdx$018 = 0;
 while(1) {
  $23 = ($22>>>0)<(2);
  L20: do {
   if ($23) {
    $24 = ($22|0)==(0);
    $25 = ((($order) + (($refIdx$018*12)|0)|0) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    if ($24) {
     $27 = (($picNumPred$017) - ($26))|0;
     $28 = ($27|0)<(0);
     if ($28) {
      $29 = HEAP32[$19>>2]|0;
      $30 = (($29) + ($27))|0;
      $picNumNoWrap$0 = $30;
     } else {
      $picNumNoWrap$0 = $27;
     }
    } else {
     $31 = (($26) + ($picNumPred$017))|0;
     $32 = HEAP32[$19>>2]|0;
     $33 = ($31|0)<($32|0);
     $34 = $33 ? 0 : $32;
     $$ = (($31) - ($34))|0;
     $picNumNoWrap$0 = $$;
    }
    $35 = ($picNumNoWrap$0>>>0)>($currFrameNum>>>0);
    if ($35) {
     $36 = HEAP32[$19>>2]|0;
     $37 = (($picNumNoWrap$0) - ($36))|0;
     $picNum$1$ph = $37;
    } else {
     $picNum$1$ph = $picNumNoWrap$0;
    }
    $38 = HEAP32[$20>>2]|0;
    $i$0$ph$i = 0;
    while(1) {
     $43 = ($i$0$ph$i>>>0)<($38>>>0);
     $found$0$i = 0;
     while(1) {
      $42 = ($found$0$i|0)==(0);
      $or$cond$i = $43 & $42;
      if (!($or$cond$i)) {
       $found$2$i = $found$0$i;$i$2$i = $i$0$ph$i;$picNumPred$13 = $picNumNoWrap$0;
       break L20;
      }
      $44 = HEAP32[$dpb>>2]|0;
      $45 = ((($44) + (($i$0$ph$i*40)|0)|0) + 20|0);
      $46 = HEAP32[$45>>2]|0;
      $$off$i1 = (($46) + -1)|0;
      $switch$i2 = ($$off$i1>>>0)<(2);
      if (!($switch$i2)) {
       break;
      }
      $47 = ((($44) + (($i$0$ph$i*40)|0)|0) + 8|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==($picNum$1$ph|0);
      if ($49) {
       $found$0$i = 1;
      } else {
       break;
      }
     }
     $50 = (($i$0$ph$i) + 1)|0;
     $i$0$ph$i = $50;
    }
   } else {
    $39 = ((($order) + (($refIdx$018*12)|0)|0) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = HEAP32[$20>>2]|0;
    $i$1$ph$i = 0;
    while(1) {
     $52 = ($i$1$ph$i>>>0)<($41>>>0);
     $found$1$i = 0;
     while(1) {
      $51 = ($found$1$i|0)==(0);
      $or$cond2$i = $52 & $51;
      if (!($or$cond2$i)) {
       $found$2$i = $found$1$i;$i$2$i = $i$1$ph$i;$picNumPred$13 = $picNumPred$017;
       break L20;
      }
      $53 = HEAP32[$dpb>>2]|0;
      $54 = ((($53) + (($i$1$ph$i*40)|0)|0) + 20|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ($55|0)==(3);
      if (!($56)) {
       break;
      }
      $57 = ((($53) + (($i$1$ph$i*40)|0)|0) + 8|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = ($58|0)==($40|0);
      if ($59) {
       $found$1$i = 1;
      } else {
       break;
      }
     }
     $60 = (($i$1$ph$i) + 1)|0;
     $i$1$ph$i = $60;
    }
   }
  } while(0);
  $61 = ($found$2$i|0)==(0);
  $$i$2$i = $61 ? -1 : $i$2$i;
  $62 = ($$i$2$i|0)<(0);
  if ($62) {
   $$0 = 1;
   label = 40;
   break;
  }
  $63 = HEAP32[$dpb>>2]|0;
  $64 = ((($63) + (($$i$2$i*40)|0)|0) + 20|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65>>>0)>(1);
  if (!($66)) {
   $$0 = 1;
   label = 40;
   break;
  }
  $67 = ($refIdx$018>>>0)<($numRefIdxActive>>>0);
  if ($67) {
   $j$09 = $numRefIdxActive;
   while(1) {
    $68 = (($j$09) + -1)|0;
    $69 = HEAP32[$21>>2]|0;
    $70 = (($69) + ($68<<2)|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($69) + ($j$09<<2)|0);
    HEAP32[$72>>2] = $71;
    $73 = ($68>>>0)>($refIdx$018>>>0);
    if ($73) {
     $j$09 = $68;
    } else {
     break;
    }
   }
   $$pre = HEAP32[$dpb>>2]|0;
   $75 = $$pre;
  } else {
   $75 = $63;
  }
  $74 = (($75) + (($$i$2$i*40)|0)|0);
  $76 = (($refIdx$018) + 1)|0;
  $77 = HEAP32[$21>>2]|0;
  $78 = (($77) + ($refIdx$018<<2)|0);
  HEAP32[$78>>2] = $74;
  $79 = ($76>>>0)>($numRefIdxActive>>>0);
  if (!($79)) {
   $j$110 = $76;$k$011 = $76;
   while(1) {
    $80 = HEAP32[$21>>2]|0;
    $81 = (($80) + ($j$110<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = HEAP32[$dpb>>2]|0;
    $84 = (($83) + (($$i$2$i*40)|0)|0);
    $85 = ($82|0)==($84|0);
    if ($85) {
     $k$1 = $k$011;
    } else {
     $86 = (($k$011) + 1)|0;
     $87 = (($80) + ($k$011<<2)|0);
     HEAP32[$87>>2] = $82;
     $k$1 = $86;
    }
    $88 = (($j$110) + 1)|0;
    $89 = ($88>>>0)>($numRefIdxActive>>>0);
    if ($89) {
     break;
    } else {
     $j$110 = $88;$k$011 = $k$1;
    }
   }
  }
  $90 = ((($order) + (($76*12)|0)|0) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91>>>0)<(3);
  if ($92) {
   $22 = $91;$picNumPred$017 = $picNumPred$13;$refIdx$018 = $76;
  } else {
   $$0 = 0;
   label = 40;
   break;
  }
 }
 if ((label|0) == 40) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _h264bsdMarkDecRefPic($dpb,$mark,$image,$frameNum,$picOrderCnt,$isIdr,$currentPicId,$numErrMbs) {
 $dpb = $dpb|0;
 $mark = $mark|0;
 $image = $image|0;
 $frameNum = $frameNum|0;
 $picOrderCnt = $picOrderCnt|0;
 $isIdr = $isIdr|0;
 $currentPicId = $currentPicId|0;
 $numErrMbs = $numErrMbs|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$01 = 0, $$130 = 0, $$238 = 0, $$41 = 0, $$i$2$i$i = 0, $$i$2$i$i12 = 0, $$i$2$i$i2 = 0, $$off$i = 0, $$off$i$i = 0, $$off$i$i8 = 0, $$phi$trans$insert = 0, $$picNum$0$i = 0, $$pre = 0, $$pre$i = 0, $$pre69 = 0, $$pre71 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i25 = 0, $exitcond57 = 0, $found$0$i$i = 0, $found$0$i$i6 = 0, $found$1$i$i = 0, $i$0 = 0, $i$0$index$0$i = 0, $i$0$ph$i$i = 0, $i$0$ph$i$i10 = 0, $i$01$i = 0, $i$01$i24 = 0, $i$01$i29 = 0, $i$04$i = 0, $i$05$i = 0, $i$06$i = 0, $i$1$ph$i$i = 0;
 var $index$02$i = 0, $index$1$i = 0, $markedAsLongTerm$0 = 0, $markedAsLongTerm$132 = 0, $not$ = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i7 = 0, $or$cond$i17 = 0, $or$cond$i19 = 0, $or$cond2$i$i = 0, $phitmp$i = 0, $picNum$03$i = 0, $picNum$1$i = 0, $status$2 = 0, $status$2$ph = 0, $status$239 = 0, $status$3 = 0, $switch$i = 0, $switch$i$i = 0;
 var $switch$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$image>>2]|0;
 $1 = (($dpb) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($0|0)==($3|0);
 if (!($4)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($dpb) + 52|0);
 HEAP32[$5>>2] = 0;
 $6 = (($dpb) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $not$ = ($7|0)==(0);
 $8 = $not$&1;
 $9 = ($mark|0)==(0|0);
 do {
  if ($9) {
   $10 = (($2) + 20|0);
   HEAP32[$10>>2] = 0;
   $11 = (($2) + 12|0);
   HEAP32[$11>>2] = $frameNum;
   $12 = (($2) + 8|0);
   HEAP32[$12>>2] = $frameNum;
   $13 = (($2) + 16|0);
   HEAP32[$13>>2] = $picOrderCnt;
   $14 = (($2) + 24|0);
   HEAP32[$14>>2] = $8;
   if ($not$) {
    $15 = (($dpb) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 1)|0;
    HEAP32[$15>>2] = $17;
    $status$3 = 0;
   } else {
    $status$3 = 0;
   }
  } else {
   $18 = ($isIdr|0)==(0);
   if (!($18)) {
    $19 = (($dpb) + 20|0);
    HEAP32[$19>>2] = 0;
    $20 = (($dpb) + 16|0);
    HEAP32[$20>>2] = 0;
    $21 = HEAP32[$dpb>>2]|0;
    $22 = (($dpb) + 44|0);
    $i$01$i = 0;
    while(1) {
     $23 = ((($21) + (($i$01$i*40)|0)|0) + 20|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0);
     if (!($25)) {
      HEAP32[$23>>2] = 0;
      $26 = ((($21) + (($i$01$i*40)|0)|0) + 24|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($27|0)==(0);
      if ($28) {
       $29 = HEAP32[$22>>2]|0;
       $30 = (($29) + -1)|0;
       HEAP32[$22>>2] = $30;
      }
     }
     $31 = (($i$01$i) + 1)|0;
     $exitcond$i = ($31|0)==(16);
     if ($exitcond$i) {
      break;
     } else {
      $i$01$i = $31;
     }
    }
    while(1) {
     $32 = (_OutputPicture($dpb)|0);
     $33 = ($32|0)==(0);
     if (!($33)) {
      break;
     }
    }
    $34 = (($dpb) + 40|0);
    HEAP32[$34>>2] = 0;
    $35 = (($dpb) + 36|0);
    HEAP32[$35>>2] = 65535;
    $36 = (($dpb) + 48|0);
    HEAP32[$36>>2] = 0;
    $37 = HEAP32[$mark>>2]|0;
    $38 = ($37|0)==(0);
    if ($38) {
     $39 = HEAP32[$6>>2]|0;
     $40 = ($39|0)==(0);
     if (!($40)) {
      label = 14;
     }
    } else {
     label = 14;
    }
    if ((label|0) == 14) {
     HEAP32[$20>>2] = 0;
     HEAP32[$19>>2] = 0;
    }
    $41 = (($mark) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)==(0);
    $44 = HEAP32[$1>>2]|0;
    $45 = (($44) + 20|0);
    $$ = $43 ? 2 : 3;
    $$41 = $43 ? 65535 : 0;
    HEAP32[$45>>2] = $$;
    HEAP32[$35>>2] = $$41;
    $46 = (($44) + 12|0);
    HEAP32[$46>>2] = 0;
    $47 = (($44) + 8|0);
    HEAP32[$47>>2] = 0;
    $48 = (($44) + 16|0);
    HEAP32[$48>>2] = 0;
    $49 = (($44) + 24|0);
    HEAP32[$49>>2] = $8;
    HEAP32[$22>>2] = 1;
    HEAP32[$34>>2] = 1;
    $status$3 = 0;
    break;
   }
   $50 = (($mark) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(0);
   if ($52) {
    $216 = (($dpb) + 40|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = (($dpb) + 24|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = ($217>>>0)<($219>>>0);
    if ($220) {
     $$238 = $frameNum;$239 = $217;$241 = $219;$status$239 = 0;
    } else {
     $221 = ($217|0)==(0);
     if ($221) {
      $$238 = $frameNum;$239 = 0;$241 = $219;$status$239 = 1;
     } else {
      $222 = HEAP32[$dpb>>2]|0;
      $i$04$i = 0;$index$02$i = -1;$picNum$03$i = 0;
      while(1) {
       $223 = ((($222) + (($i$04$i*40)|0)|0) + 20|0);
       $224 = HEAP32[$223>>2]|0;
       $$off$i = (($224) + -1)|0;
       $switch$i = ($$off$i>>>0)<(2);
       if ($switch$i) {
        $225 = ((($222) + (($i$04$i*40)|0)|0) + 8|0);
        $226 = HEAP32[$225>>2]|0;
        $227 = ($226|0)<($picNum$03$i|0);
        $228 = ($index$02$i|0)==(-1);
        $or$cond$i17 = $227 | $228;
        $i$0$index$0$i = $or$cond$i17 ? $i$04$i : $index$02$i;
        $$picNum$0$i = $or$cond$i17 ? $226 : $picNum$03$i;
        $index$1$i = $i$0$index$0$i;$picNum$1$i = $$picNum$0$i;
       } else {
        $index$1$i = $index$02$i;$picNum$1$i = $picNum$03$i;
       }
       $229 = (($i$04$i) + 1)|0;
       $exitcond = ($229|0)==($217|0);
       if ($exitcond) {
        break;
       } else {
        $i$04$i = $229;$index$02$i = $index$1$i;$picNum$03$i = $picNum$1$i;
       }
      }
      $230 = ($index$1$i|0)>(-1);
      if ($230) {
       $phitmp$i = (($217) + -1)|0;
       $231 = ((($222) + (($index$1$i*40)|0)|0) + 20|0);
       HEAP32[$231>>2] = 0;
       HEAP32[$216>>2] = $phitmp$i;
       $232 = ((($222) + (($index$1$i*40)|0)|0) + 24|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = (($dpb) + 44|0);
        $236 = HEAP32[$235>>2]|0;
        $237 = (($236) + -1)|0;
        HEAP32[$235>>2] = $237;
        $$238 = $frameNum;$239 = $phitmp$i;$241 = $219;$status$239 = 0;
       } else {
        $$238 = $frameNum;$239 = $phitmp$i;$241 = $219;$status$239 = 0;
       }
      } else {
       $$238 = $frameNum;$239 = $217;$241 = $219;$status$239 = 1;
      }
     }
    }
   } else {
    $53 = (($dpb) + 24|0);
    $54 = (($dpb) + 40|0);
    $55 = (($dpb) + 44|0);
    $56 = (($dpb) + 36|0);
    $57 = (($dpb) + 48|0);
    $$01 = $frameNum;$i$0 = 0;$markedAsLongTerm$0 = 0;
    L38: while(1) {
     $58 = ((($mark) + (($i$0*20)|0)|0) + 12|0);
     $59 = HEAP32[$58>>2]|0;
     switch ($59|0) {
     case 5:  {
      $166 = HEAP32[$dpb>>2]|0;
      $i$01$i24 = 0;
      while(1) {
       $167 = ((($166) + (($i$01$i24*40)|0)|0) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0);
       if (!($169)) {
        HEAP32[$167>>2] = 0;
        $170 = ((($166) + (($i$01$i24*40)|0)|0) + 24|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0);
        if ($172) {
         $173 = HEAP32[$55>>2]|0;
         $174 = (($173) + -1)|0;
         HEAP32[$55>>2] = $174;
        }
       }
       $175 = (($i$01$i24) + 1)|0;
       $exitcond$i25 = ($175|0)==(16);
       if ($exitcond$i25) {
        break;
       } else {
        $i$01$i24 = $175;
       }
      }
      while(1) {
       $176 = (_OutputPicture($dpb)|0);
       $177 = ($176|0)==(0);
       if (!($177)) {
        break;
       }
      }
      HEAP32[$54>>2] = 0;
      HEAP32[$56>>2] = 65535;
      HEAP32[$57>>2] = 0;
      HEAP32[$5>>2] = 1;
      $$130 = 0;$markedAsLongTerm$132 = $markedAsLongTerm$0;
      break;
     }
     case 2:  {
      $82 = ((($mark) + (($i$0*20)|0)|0) + 20|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = HEAP32[$53>>2]|0;
      $i$1$ph$i$i = 0;
      L52: while(1) {
       $85 = ($i$1$ph$i$i>>>0)<($84>>>0);
       $found$1$i$i = 1;
       while(1) {
        $or$cond2$i$i = $85 & $found$1$i$i;
        if (!($or$cond2$i$i)) {
         break L52;
        }
        $86 = HEAP32[$dpb>>2]|0;
        $87 = ((($86) + (($i$1$ph$i$i*40)|0)|0) + 20|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = ($88|0)==(3);
        if (!($89)) {
         break;
        }
        $90 = ((($86) + (($i$1$ph$i$i*40)|0)|0) + 8|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = ($91|0)==($83|0);
        if ($92) {
         $found$1$i$i = 0;
        } else {
         break;
        }
       }
       $93 = (($i$1$ph$i$i) + 1)|0;
       $i$1$ph$i$i = $93;
      }
      $$i$2$i$i2 = $found$1$i$i ? -1 : $i$1$ph$i$i;
      $94 = ($$i$2$i$i2|0)<(0);
      if ($94) {
       $status$2 = 1;
       break L38;
      }
      $95 = HEAP32[$dpb>>2]|0;
      $96 = ((($95) + (($$i$2$i$i2*40)|0)|0) + 20|0);
      HEAP32[$96>>2] = 0;
      $97 = HEAP32[$54>>2]|0;
      $98 = (($97) + -1)|0;
      HEAP32[$54>>2] = $98;
      $99 = ((($95) + (($$i$2$i$i2*40)|0)|0) + 24|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0);
      if ($101) {
       $102 = HEAP32[$55>>2]|0;
       $103 = (($102) + -1)|0;
       HEAP32[$55>>2] = $103;
       $$130 = $$01;$markedAsLongTerm$132 = $markedAsLongTerm$0;
      } else {
       $$130 = $$01;$markedAsLongTerm$132 = $markedAsLongTerm$0;
      }
      break;
     }
     case 6:  {
      $178 = ((($mark) + (($i$0*20)|0)|0) + 24|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = HEAP32[$56>>2]|0;
      $181 = ($180|0)==(65535);
      $182 = ($180>>>0)<($179>>>0);
      $or$cond$i19 = $181 | $182;
      if ($or$cond$i19) {
       $status$2$ph = 1;
       label = 90;
       break L38;
      }
      $183 = HEAP32[$53>>2]|0;
      $184 = ($183|0)==(0);
      L64: do {
       if ($184) {
        $282 = 0;
        label = 77;
       } else {
        $185 = HEAP32[$dpb>>2]|0;
        $i$05$i = 0;
        while(1) {
         $186 = ((($185) + (($i$05$i*40)|0)|0) + 20|0);
         $187 = HEAP32[$186>>2]|0;
         $188 = ($187|0)==(3);
         if ($188) {
          $189 = ((($185) + (($i$05$i*40)|0)|0) + 8|0);
          $190 = HEAP32[$189>>2]|0;
          $191 = ($190|0)==($179|0);
          if ($191) {
           break;
          }
         }
         $199 = (($i$05$i) + 1)|0;
         $200 = ($199>>>0)<($183>>>0);
         if ($200) {
          $i$05$i = $199;
         } else {
          $282 = $183;
          label = 77;
          break L64;
         }
        }
        HEAP32[$186>>2] = 0;
        $192 = HEAP32[$54>>2]|0;
        $193 = (($192) + -1)|0;
        HEAP32[$54>>2] = $193;
        $194 = ((($185) + (($i$05$i*40)|0)|0) + 24|0);
        $195 = HEAP32[$194>>2]|0;
        $196 = ($195|0)==(0);
        if ($196) {
         $197 = HEAP32[$55>>2]|0;
         $198 = (($197) + -1)|0;
         HEAP32[$55>>2] = $198;
         $201 = $193;$203 = $183;
        } else {
         $201 = $193;$203 = $183;
        }
       }
      } while(0);
      if ((label|0) == 77) {
       label = 0;
       $$pre$i = HEAP32[$54>>2]|0;
       $201 = $$pre$i;$203 = $282;
      }
      $202 = ($201>>>0)<($203>>>0);
      if (!($202)) {
       $status$2$ph = 1;
       label = 90;
       break L38;
      }
      $204 = HEAP32[$1>>2]|0;
      $205 = (($204) + 12|0);
      HEAP32[$205>>2] = $$01;
      $206 = (($204) + 8|0);
      HEAP32[$206>>2] = $179;
      $207 = (($204) + 16|0);
      HEAP32[$207>>2] = $picOrderCnt;
      $208 = (($204) + 20|0);
      HEAP32[$208>>2] = 3;
      $209 = HEAP32[$6>>2]|0;
      $210 = ($209|0)==(0);
      $211 = (($204) + 24|0);
      $$$i = $210&1;
      HEAP32[$211>>2] = $$$i;
      $212 = (($201) + 1)|0;
      HEAP32[$54>>2] = $212;
      $213 = HEAP32[$55>>2]|0;
      $214 = (($213) + 1)|0;
      HEAP32[$55>>2] = $214;
      $$130 = $$01;$markedAsLongTerm$132 = 1;
      break;
     }
     case 1:  {
      $60 = ((($mark) + (($i$0*20)|0)|0) + 16|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (($$01) - ($61))|0;
      $63 = HEAP32[$53>>2]|0;
      $i$0$ph$i$i = 0;
      L78: while(1) {
       $64 = ($i$0$ph$i$i>>>0)<($63>>>0);
       $found$0$i$i = 1;
       while(1) {
        $or$cond$i$i = $64 & $found$0$i$i;
        if (!($or$cond$i$i)) {
         break L78;
        }
        $65 = HEAP32[$dpb>>2]|0;
        $66 = ((($65) + (($i$0$ph$i$i*40)|0)|0) + 20|0);
        $67 = HEAP32[$66>>2]|0;
        $$off$i$i = (($67) + -1)|0;
        $switch$i$i = ($$off$i$i>>>0)<(2);
        if (!($switch$i$i)) {
         break;
        }
        $68 = ((($65) + (($i$0$ph$i$i*40)|0)|0) + 8|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($69|0)==($62|0);
        if ($70) {
         $found$0$i$i = 0;
        } else {
         break;
        }
       }
       $71 = (($i$0$ph$i$i) + 1)|0;
       $i$0$ph$i$i = $71;
      }
      $$i$2$i$i = $found$0$i$i ? -1 : $i$0$ph$i$i;
      $72 = ($$i$2$i$i|0)<(0);
      if ($72) {
       $status$2 = 1;
       break L38;
      }
      $73 = HEAP32[$dpb>>2]|0;
      $74 = ((($73) + (($$i$2$i$i*40)|0)|0) + 20|0);
      HEAP32[$74>>2] = 0;
      $75 = HEAP32[$54>>2]|0;
      $76 = (($75) + -1)|0;
      HEAP32[$54>>2] = $76;
      $77 = ((($73) + (($$i$2$i$i*40)|0)|0) + 24|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($78|0)==(0);
      if ($79) {
       $80 = HEAP32[$55>>2]|0;
       $81 = (($80) + -1)|0;
       HEAP32[$55>>2] = $81;
       $$130 = $$01;$markedAsLongTerm$132 = $markedAsLongTerm$0;
      } else {
       $$130 = $$01;$markedAsLongTerm$132 = $markedAsLongTerm$0;
      }
      break;
     }
     case 4:  {
      $145 = ((($mark) + (($i$0*20)|0)|0) + 28|0);
      $146 = HEAP32[$145>>2]|0;
      HEAP32[$56>>2] = $146;
      $147 = HEAP32[$53>>2]|0;
      $148 = ($147|0)==(0);
      if ($148) {
       $$130 = $$01;$markedAsLongTerm$132 = $markedAsLongTerm$0;
      } else {
       $149 = HEAP32[$dpb>>2]|0;
       $156 = $146;$i$01$i29 = 0;
       while(1) {
        $150 = ((($149) + (($i$01$i29*40)|0)|0) + 20|0);
        $151 = HEAP32[$150>>2]|0;
        $152 = ($151|0)==(3);
        do {
         if ($152) {
          $153 = ((($149) + (($i$01$i29*40)|0)|0) + 8|0);
          $154 = HEAP32[$153>>2]|0;
          $155 = ($154>>>0)>($146>>>0);
          if ($155) {
           $281 = $156;
          } else {
           $157 = ($156|0)==(65535);
           if ($157) {
            $281 = 65535;
           } else {
            $280 = $156;
            break;
           }
          }
          HEAP32[$150>>2] = 0;
          $158 = HEAP32[$54>>2]|0;
          $159 = (($158) + -1)|0;
          HEAP32[$54>>2] = $159;
          $160 = ((($149) + (($i$01$i29*40)|0)|0) + 24|0);
          $161 = HEAP32[$160>>2]|0;
          $162 = ($161|0)==(0);
          if ($162) {
           $163 = HEAP32[$55>>2]|0;
           $164 = (($163) + -1)|0;
           HEAP32[$55>>2] = $164;
           $280 = $281;
          } else {
           $280 = $281;
          }
         } else {
          $280 = $156;
         }
        } while(0);
        $165 = (($i$01$i29) + 1)|0;
        $exitcond57 = ($165|0)==($147|0);
        if ($exitcond57) {
         $$130 = $$01;$markedAsLongTerm$132 = $markedAsLongTerm$0;
         break;
        } else {
         $156 = $280;$i$01$i29 = $165;
        }
       }
      }
      break;
     }
     case 3:  {
      $104 = ((($mark) + (($i$0*20)|0)|0) + 16|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ((($mark) + (($i$0*20)|0)|0) + 24|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = HEAP32[$56>>2]|0;
      $109 = ($108|0)==(65535);
      $110 = ($108>>>0)<($107>>>0);
      $or$cond$i = $109 | $110;
      if ($or$cond$i) {
       $status$2 = 1;
       break L38;
      }
      $111 = HEAP32[$53>>2]|0;
      $112 = ($111|0)==(0);
      L101: do {
       if ($112) {
        $138 = 0;
       } else {
        $113 = HEAP32[$dpb>>2]|0;
        $i$06$i = 0;
        while(1) {
         $114 = ((($113) + (($i$06$i*40)|0)|0) + 20|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = ($115|0)==(3);
         if ($116) {
          $117 = ((($113) + (($i$06$i*40)|0)|0) + 8|0);
          $118 = HEAP32[$117>>2]|0;
          $119 = ($118|0)==($107|0);
          if ($119) {
           break;
          }
         }
         $127 = (($i$06$i) + 1)|0;
         $128 = ($127>>>0)<($111>>>0);
         if ($128) {
          $i$06$i = $127;
         } else {
          $138 = $111;
          break L101;
         }
        }
        HEAP32[$114>>2] = 0;
        $120 = HEAP32[$54>>2]|0;
        $121 = (($120) + -1)|0;
        HEAP32[$54>>2] = $121;
        $122 = ((($113) + (($i$06$i*40)|0)|0) + 24|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = ($123|0)==(0);
        if ($124) {
         $125 = HEAP32[$55>>2]|0;
         $126 = (($125) + -1)|0;
         HEAP32[$55>>2] = $126;
         $138 = $111;
        } else {
         $138 = $111;
        }
       }
      } while(0);
      $129 = (($$01) - ($105))|0;
      $i$0$ph$i$i10 = 0;
      L111: while(1) {
       $130 = ($i$0$ph$i$i10>>>0)<($138>>>0);
       $found$0$i$i6 = 1;
       while(1) {
        $or$cond$i$i7 = $130 & $found$0$i$i6;
        if (!($or$cond$i$i7)) {
         break L111;
        }
        $131 = HEAP32[$dpb>>2]|0;
        $132 = ((($131) + (($i$0$ph$i$i10*40)|0)|0) + 20|0);
        $133 = HEAP32[$132>>2]|0;
        $$off$i$i8 = (($133) + -1)|0;
        $switch$i$i9 = ($$off$i$i8>>>0)<(2);
        if (!($switch$i$i9)) {
         break;
        }
        $134 = ((($131) + (($i$0$ph$i$i10*40)|0)|0) + 8|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==($129|0);
        if ($136) {
         $found$0$i$i6 = 0;
        } else {
         break;
        }
       }
       $137 = (($i$0$ph$i$i10) + 1)|0;
       $i$0$ph$i$i10 = $137;
      }
      $$i$2$i$i12 = $found$0$i$i6 ? -1 : $i$0$ph$i$i10;
      $139 = ($$i$2$i$i12|0)<(0);
      if ($139) {
       $status$2 = 1;
       break L38;
      }
      $140 = HEAP32[$dpb>>2]|0;
      $141 = ((($140) + (($$i$2$i$i12*40)|0)|0) + 20|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($142>>>0)>(1);
      if (!($143)) {
       $status$2 = 1;
       break L38;
      }
      HEAP32[$141>>2] = 3;
      $144 = ((($140) + (($$i$2$i$i12*40)|0)|0) + 8|0);
      HEAP32[$144>>2] = $107;
      $$130 = $$01;$markedAsLongTerm$132 = $markedAsLongTerm$0;
      break;
     }
     case 0:  {
      $status$2$ph = 0;
      label = 90;
      break L38;
      break;
     }
     default: {
      $status$2 = 1;
      break L38;
     }
     }
     $215 = (($i$0) + 1)|0;
     $$01 = $$130;$i$0 = $215;$markedAsLongTerm$0 = $markedAsLongTerm$132;
    }
    if ((label|0) == 90) {
     $status$2 = $status$2$ph;
    }
    $238 = ($markedAsLongTerm$0|0)==(0);
    if (!($238)) {
     $status$3 = $status$2;
     break;
    }
    $$pre69 = HEAP32[$54>>2]|0;
    $$pre71 = HEAP32[$53>>2]|0;
    $$238 = $$01;$239 = $$pre69;$241 = $$pre71;$status$239 = $status$2;
   }
   $240 = ($239>>>0)<($241>>>0);
   if ($240) {
    $242 = (($dpb) + 40|0);
    $243 = HEAP32[$1>>2]|0;
    $244 = (($243) + 12|0);
    HEAP32[$244>>2] = $$238;
    $245 = (($243) + 8|0);
    HEAP32[$245>>2] = $$238;
    $246 = (($243) + 16|0);
    HEAP32[$246>>2] = $picOrderCnt;
    $247 = (($243) + 20|0);
    HEAP32[$247>>2] = 2;
    $248 = (($243) + 24|0);
    HEAP32[$248>>2] = $8;
    $249 = (($dpb) + 44|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = (($250) + 1)|0;
    HEAP32[$249>>2] = $251;
    $252 = (($239) + 1)|0;
    HEAP32[$242>>2] = $252;
    $status$3 = $status$239;
   } else {
    $status$3 = 1;
   }
  }
 } while(0);
 $253 = HEAP32[$1>>2]|0;
 $254 = (($253) + 36|0);
 HEAP32[$254>>2] = $isIdr;
 $255 = (($253) + 28|0);
 HEAP32[$255>>2] = $currentPicId;
 $256 = (($253) + 32|0);
 HEAP32[$256>>2] = $numErrMbs;
 $257 = HEAP32[$6>>2]|0;
 $258 = ($257|0)==(0);
 if ($258) {
  $259 = (($dpb) + 44|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = (($dpb) + 28|0);
  $262 = HEAP32[$261>>2]|0;
  $263 = ($260>>>0)>($262>>>0);
  if ($263) {
   while(1) {
    (_OutputPicture($dpb)|0);
    $274 = HEAP32[$259>>2]|0;
    $275 = HEAP32[$261>>2]|0;
    $276 = ($274>>>0)>($275>>>0);
    if (!($276)) {
     $279 = $275;
     break;
    }
   }
  } else {
   $279 = $262;
  }
 } else {
  $264 = HEAP32[$253>>2]|0;
  $265 = (($dpb) + 16|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = (($dpb) + 12|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = (($268) + ($266<<4)|0);
  HEAP32[$269>>2] = $264;
  $270 = ((($268) + ($266<<4)|0) + 12|0);
  HEAP32[$270>>2] = $isIdr;
  $271 = ((($268) + ($266<<4)|0) + 4|0);
  HEAP32[$271>>2] = $currentPicId;
  $272 = ((($268) + ($266<<4)|0) + 8|0);
  HEAP32[$272>>2] = $numErrMbs;
  $273 = (($266) + 1)|0;
  HEAP32[$265>>2] = $273;
  $$phi$trans$insert = (($dpb) + 28|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $279 = $$pre;
 }
 $277 = HEAP32[$dpb>>2]|0;
 $278 = (($279) + 1)|0;
 _ShellSort($277,$278);
 $$0 = $status$3;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdGetRefPicData($dpb,$index) {
 $dpb = $dpb|0;
 $index = $index|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($index>>>0)>(16);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (($dpb) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($2) + ($index<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   $6 = (($4) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)>(1);
   if ($8) {
    $9 = HEAP32[$4>>2]|0;
    $$0 = $9;
   } else {
    $$0 = 0;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdAllocateDpbImage($dpb) {
 $dpb = $dpb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$dpb>>2]|0;
 $1 = (($dpb) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + (($2*40)|0)|0);
 $4 = (($dpb) + 8|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _h264bsdInitDpb($dpb,$picSizeInMbs,$dpbSize,$maxRefFrames,$maxFrameNum,$noReordering) {
 $dpb = $dpb|0;
 $picSizeInMbs = $picSizeInMbs|0;
 $dpbSize = $dpbSize|0;
 $maxRefFrames = $maxRefFrames|0;
 $maxFrameNum = $maxFrameNum|0;
 $noReordering = $noReordering|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $dpbSize$ = 0, $i$01 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($dpb) + 36|0);
 HEAP32[$0>>2] = 65535;
 $1 = ($maxRefFrames>>>0)>(1);
 $2 = $1 ? $maxRefFrames : 1;
 $3 = (($dpb) + 24|0);
 HEAP32[$3>>2] = $2;
 $4 = ($noReordering|0)==(0);
 $5 = (($dpb) + 28|0);
 $dpbSize$ = $4 ? $dpbSize : $2;
 HEAP32[$5>>2] = $dpbSize$;
 $6 = (($dpb) + 32|0);
 HEAP32[$6>>2] = $maxFrameNum;
 $7 = (($dpb) + 56|0);
 HEAP32[$7>>2] = $noReordering;
 $8 = (($dpb) + 44|0);
 HEAP32[$8>>2] = 0;
 $9 = (($dpb) + 40|0);
 HEAP32[$9>>2] = 0;
 $10 = (($dpb) + 48|0);
 HEAP32[$10>>2] = 0;
 $11 = (_H264SwDecMalloc(680)|0);
 HEAP32[$dpb>>2] = $11;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$0 = 65535;
  STACKTOP = sp;return ($$0|0);
 }
 _H264SwDecMemset($11,0,680);
 $13 = HEAP32[$5>>2]|0;
 $14 = ($13|0)==(-1);
 L4: do {
  if (!($14)) {
   $15 = ($picSizeInMbs*384)|0;
   $16 = $15 | 47;
   $i$01 = 0;
   while(1) {
    $17 = (_H264SwDecMalloc($16)|0);
    $18 = HEAP32[$dpb>>2]|0;
    $19 = ((($18) + (($i$01*40)|0)|0) + 4|0);
    HEAP32[$19>>2] = $17;
    $20 = ($17|0)==(0|0);
    if ($20) {
     $$0 = 65535;
     break;
    }
    $21 = $17;
    $22 = (0 - ($21))|0;
    $23 = $22 & 15;
    $24 = (($17) + ($23)|0);
    $25 = (($18) + (($i$01*40)|0)|0);
    HEAP32[$25>>2] = $24;
    $26 = (($i$01) + 1)|0;
    $27 = HEAP32[$5>>2]|0;
    $28 = (($27) + 1)|0;
    $29 = ($26>>>0)<($28>>>0);
    if ($29) {
     $i$01 = $26;
    } else {
     break L4;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $30 = (_H264SwDecMalloc(68)|0);
 $31 = (($dpb) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = HEAP32[$5>>2]|0;
 $33 = $32 << 4;
 $34 = (($33) + 16)|0;
 $35 = (_H264SwDecMalloc($34)|0);
 $36 = (($dpb) + 12|0);
 HEAP32[$36>>2] = $35;
 $37 = HEAP32[$31>>2]|0;
 $38 = ($37|0)==(0|0);
 $39 = ($35|0)==(0|0);
 $or$cond = $38 | $39;
 if ($or$cond) {
  $$0 = 65535;
  STACKTOP = sp;return ($$0|0);
 }
 _H264SwDecMemset($37,0,68);
 $40 = (($dpb) + 20|0);
 HEAP32[$40>>2] = 0;
 $41 = (($dpb) + 16|0);
 HEAP32[$41>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdResetDpb($dpb,$picSizeInMbs,$dpbSize,$maxRefFrames,$maxFrameNum,$noReordering) {
 $dpb = $dpb|0;
 $picSizeInMbs = $picSizeInMbs|0;
 $dpbSize = $dpbSize|0;
 $maxRefFrames = $maxRefFrames|0;
 $maxFrameNum = $maxFrameNum|0;
 $noReordering = $noReordering|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _h264bsdFreeDpb($dpb);
 $0 = (_h264bsdInitDpb($dpb,$picSizeInMbs,$dpbSize,$maxRefFrames,$maxFrameNum,$noReordering)|0);
 STACKTOP = sp;return ($0|0);
}
function _h264bsdFreeDpb($dpb) {
 $dpb = $dpb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$dpb>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $14 = 0;
 } else {
  $2 = (($dpb) + 28|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(-1);
  if ($4) {
   $14 = $0;
  } else {
   $6 = $0;$i$01 = 0;
   while(1) {
    $5 = ((($6) + (($i$01*40)|0)|0) + 4|0);
    $7 = HEAP32[$5>>2]|0;
    _H264SwDecFree($7);
    $8 = HEAP32[$dpb>>2]|0;
    $9 = ((($8) + (($i$01*40)|0)|0) + 4|0);
    HEAP32[$9>>2] = 0;
    $10 = (($i$01) + 1)|0;
    $11 = HEAP32[$2>>2]|0;
    $12 = (($11) + 1)|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $6 = $8;$i$01 = $10;
    } else {
     $14 = $8;
     break;
    }
   }
  }
 }
 _H264SwDecFree($14);
 HEAP32[$dpb>>2] = 0;
 $15 = (($dpb) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 _H264SwDecFree($16);
 HEAP32[$15>>2] = 0;
 $17 = (($dpb) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 _H264SwDecFree($18);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function _h264bsdInitRefPicList($dpb) {
 $dpb = $dpb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($dpb) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($dpb) + 4|0);
 $i$01 = 0;
 while(1) {
  $4 = HEAP32[$dpb>>2]|0;
  $5 = (($4) + (($i$01*40)|0)|0);
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($i$01<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = (($i$01) + 1)|0;
  $9 = ($8>>>0)<($1>>>0);
  if ($9) {
   $i$01 = $8;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdCheckGapsInFrameNum($dpb,$frameNum,$isRefPic,$gapsAllowed) {
 $dpb = $dpb|0;
 $frameNum = $frameNum|0;
 $isRefPic = $isRefPic|0;
 $gapsAllowed = $gapsAllowed|0;
 var $$ = 0, $$0 = 0, $$off$i = 0, $$off$i2 = 0, $$picNum$0$i = 0, $$pre = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $exitcond20 = 0, $i$0$index$0$i = 0, $i$01$i = 0, $i$011 = 0, $i$04$i = 0, $i$18 = 0, $index$02$i = 0, $index$1$i = 0, $or$cond$i = 0, $phitmp$i = 0, $picNum$03$i = 0;
 var $picNum$1$i = 0, $switch$i = 0, $switch$i3 = 0, $unUsedShortTermFrameNum$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($dpb) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = (($dpb) + 20|0);
 HEAP32[$1>>2] = 0;
 $2 = ($gapsAllowed|0)==(0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($dpb) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($frameNum|0);
 L4: do {
  if ($5) {
   label = 31;
  } else {
   $6 = (($4) + 1)|0;
   $7 = (($dpb) + 32|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6>>>0) % ($8>>>0))&-1;
   $10 = ($9|0)==($frameNum|0);
   if ($10) {
    label = 31;
   } else {
    $11 = (($dpb) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$dpb>>2]|0;
    $14 = (($13) + (($12*40)|0)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($dpb) + 40|0);
    $17 = (($dpb) + 24|0);
    $18 = (($dpb) + 44|0);
    $27 = $8;$unUsedShortTermFrameNum$0 = $9;
    while(1) {
     $19 = HEAP32[$16>>2]|0;
     $20 = ($19|0)==(0);
     if ($20) {
      $32 = 0;
     } else {
      $21 = HEAP32[$dpb>>2]|0;
      $i$01$i = 0;
      while(1) {
       $22 = ((($21) + (($i$01$i*40)|0)|0) + 20|0);
       $23 = HEAP32[$22>>2]|0;
       $$off$i = (($23) + -1)|0;
       $switch$i = ($$off$i>>>0)<(2);
       if ($switch$i) {
        $24 = ((($21) + (($i$01$i*40)|0)|0) + 12|0);
        $25 = HEAP32[$24>>2]|0;
        $26 = ($25>>>0)>($unUsedShortTermFrameNum$0>>>0);
        $28 = $26 ? $27 : 0;
        $$ = (($25) - ($28))|0;
        $29 = ((($21) + (($i$01$i*40)|0)|0) + 8|0);
        HEAP32[$29>>2] = $$;
       }
       $30 = (($i$01$i) + 1)|0;
       $exitcond = ($30|0)==($19|0);
       if ($exitcond) {
        $32 = $19;
        break;
       } else {
        $i$01$i = $30;
       }
      }
     }
     $31 = HEAP32[$17>>2]|0;
     $33 = ($32>>>0)<($31>>>0);
     if ($33) {
      $99 = $32;
     } else {
      $34 = ($32|0)==(0);
      if ($34) {
       $$0 = 1;
       label = 38;
       break;
      }
      $35 = HEAP32[$dpb>>2]|0;
      $i$04$i = 0;$index$02$i = -1;$picNum$03$i = 0;
      while(1) {
       $36 = ((($35) + (($i$04$i*40)|0)|0) + 20|0);
       $37 = HEAP32[$36>>2]|0;
       $$off$i2 = (($37) + -1)|0;
       $switch$i3 = ($$off$i2>>>0)<(2);
       if ($switch$i3) {
        $38 = ((($35) + (($i$04$i*40)|0)|0) + 8|0);
        $39 = HEAP32[$38>>2]|0;
        $40 = ($39|0)<($picNum$03$i|0);
        $41 = ($index$02$i|0)==(-1);
        $or$cond$i = $40 | $41;
        $i$0$index$0$i = $or$cond$i ? $i$04$i : $index$02$i;
        $$picNum$0$i = $or$cond$i ? $39 : $picNum$03$i;
        $index$1$i = $i$0$index$0$i;$picNum$1$i = $$picNum$0$i;
       } else {
        $index$1$i = $index$02$i;$picNum$1$i = $picNum$03$i;
       }
       $42 = (($i$04$i) + 1)|0;
       $exitcond20 = ($42|0)==($32|0);
       if ($exitcond20) {
        break;
       } else {
        $i$04$i = $42;$index$02$i = $index$1$i;$picNum$03$i = $picNum$1$i;
       }
      }
      $43 = ($index$1$i|0)>(-1);
      if (!($43)) {
       $$0 = 1;
       label = 38;
       break;
      }
      $phitmp$i = (($32) + -1)|0;
      $44 = ((($35) + (($index$1$i*40)|0)|0) + 20|0);
      HEAP32[$44>>2] = 0;
      HEAP32[$16>>2] = $phitmp$i;
      $45 = ((($35) + (($index$1$i*40)|0)|0) + 24|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ($46|0)==(0);
      if ($47) {
       $48 = HEAP32[$18>>2]|0;
       $49 = (($48) + -1)|0;
       HEAP32[$18>>2] = $49;
       $99 = $phitmp$i;
      } else {
       $99 = $phitmp$i;
      }
     }
     $50 = HEAP32[$18>>2]|0;
     $51 = HEAP32[$11>>2]|0;
     $52 = ($50>>>0)<($51>>>0);
     if ($52) {
      $58 = $51;$64 = $50;$66 = $99;
     } else {
      while(1) {
       (_OutputPicture($dpb)|0);
       $53 = HEAP32[$18>>2]|0;
       $54 = HEAP32[$11>>2]|0;
       $55 = ($53>>>0)<($54>>>0);
       if ($55) {
        break;
       }
      }
      $$pre22 = HEAP32[$16>>2]|0;
      $58 = $54;$64 = $53;$66 = $$pre22;
     }
     $56 = HEAP32[$dpb>>2]|0;
     $57 = ((($56) + (($58*40)|0)|0) + 20|0);
     HEAP32[$57>>2] = 1;
     $59 = ((($56) + (($58*40)|0)|0) + 12|0);
     HEAP32[$59>>2] = $unUsedShortTermFrameNum$0;
     $60 = ((($56) + (($58*40)|0)|0) + 8|0);
     HEAP32[$60>>2] = $unUsedShortTermFrameNum$0;
     $61 = ((($56) + (($58*40)|0)|0) + 16|0);
     HEAP32[$61>>2] = 0;
     $62 = ((($56) + (($58*40)|0)|0) + 24|0);
     HEAP32[$62>>2] = 0;
     $63 = (($64) + 1)|0;
     HEAP32[$18>>2] = $63;
     $65 = (($66) + 1)|0;
     HEAP32[$16>>2] = $65;
     $67 = (($58) + 1)|0;
     _ShellSort($56,$67);
     $68 = (($unUsedShortTermFrameNum$0) + 1)|0;
     $69 = HEAP32[$7>>2]|0;
     $70 = (($68>>>0) % ($69>>>0))&-1;
     $71 = ($70|0)==($frameNum|0);
     if ($71) {
      label = 23;
      break;
     } else {
      $27 = $69;$unUsedShortTermFrameNum$0 = $70;
     }
    }
    if ((label|0) == 23) {
     $72 = HEAP32[$0>>2]|0;
     $73 = ($72|0)==(0);
     if ($73) {
      label = 33;
      break;
     }
     $74 = (($dpb) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = HEAP32[$11>>2]|0;
     $77 = HEAP32[$dpb>>2]|0;
     $78 = (($77) + (($76*40)|0)|0);
     $79 = HEAP32[$78>>2]|0;
     $i$011 = 0;
     while(1) {
      $82 = (($75) + ($i$011<<4)|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($83|0)==($79|0);
      $80 = (($i$011) + 1)|0;
      if ($84) {
       break;
      }
      $81 = ($80>>>0)<($72>>>0);
      if ($81) {
       $i$011 = $80;
      } else {
       label = 33;
       break L4;
      }
     }
     $85 = ($76|0)==(0);
     if ($85) {
      label = 33;
      break;
     } else {
      $i$18 = 0;
     }
     while(1) {
      $88 = (($77) + (($i$18*40)|0)|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = ($89|0)==($15|0);
      $86 = (($i$18) + 1)|0;
      if ($90) {
       break;
      }
      $87 = ($86>>>0)<($76>>>0);
      if ($87) {
       $i$18 = $86;
      } else {
       label = 33;
       break L4;
      }
     }
     HEAP32[$88>>2] = $79;
     HEAP32[$78>>2] = $15;
     label = 33;
     break;
    }
    else if ((label|0) == 38) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 31) {
  $cond = ($isRefPic|0)==(0);
  if ($cond) {
   $92 = $4;
  } else {
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    label = 33;
   }
  }
 }
 do {
  if ((label|0) == 33) {
   $91 = ($isRefPic|0)==(0);
   if ($91) {
    $$pre = HEAP32[$3>>2]|0;
    $92 = $$pre;
    break;
   }
   HEAP32[$3>>2] = $frameNum;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $93 = ($92|0)==($frameNum|0);
 if ($93) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $94 = (($dpb) + 32|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($frameNum) + -1)|0;
 $97 = (($96) + ($95))|0;
 $98 = (($97>>>0) % ($95>>>0))&-1;
 HEAP32[$3>>2] = $98;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDpbOutputPicture($dpb) {
 $dpb = $dpb|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($dpb) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($dpb) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($dpb) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + 1)|0;
 HEAP32[$0>>2] = $7;
 $8 = (($6) + ($1<<4)|0);
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdFlushDpb($dpb) {
 $dpb = $dpb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$dpb>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($dpb) + 60|0);
 HEAP32[$2>>2] = 1;
 while(1) {
  $3 = (_OutputPicture($dpb)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _OutputPicture($dpb) {
 $dpb = $dpb|0;
 var $$0 = 0, $$picOrderCnt$0$i = 0, $$tmp$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$01$i = 0, $picOrderCnt$02$i = 0, $picOrderCnt$1$i = 0, $tmp$03$i = 0, $tmp$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($dpb) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($dpb) + 28|0);
 $4 = HEAP32[$dpb>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 $i$01$i = 0;$picOrderCnt$02$i = 2147483647;$tmp$03$i = 0;
 while(1) {
  $6 = ((($4) + (($i$01$i*40)|0)|0) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $picOrderCnt$1$i = $picOrderCnt$02$i;$tmp$1$i = $tmp$03$i;
  } else {
   $9 = (($4) + (($i$01$i*40)|0)|0);
   $10 = ((($4) + (($i$01$i*40)|0)|0) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)<($picOrderCnt$02$i|0);
   $$picOrderCnt$0$i = $12 ? $11 : $picOrderCnt$02$i;
   $$tmp$0$i = $12 ? $9 : $tmp$03$i;
   $picOrderCnt$1$i = $$picOrderCnt$0$i;$tmp$1$i = $$tmp$0$i;
  }
  $13 = (($i$01$i) + 1)|0;
  $14 = ($13>>>0)>($5>>>0);
  if ($14) {
   break;
  } else {
   $i$01$i = $13;$picOrderCnt$02$i = $picOrderCnt$1$i;$tmp$03$i = $tmp$1$i;
  }
 }
 $15 = ($tmp$1$i|0)==(0|0);
 if ($15) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = HEAP32[$tmp$1$i>>2]|0;
 $17 = (($dpb) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($dpb) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($18<<4)|0);
 HEAP32[$21>>2] = $16;
 $22 = (($tmp$1$i) + 36|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($20) + ($18<<4)|0) + 12|0);
 HEAP32[$24>>2] = $23;
 $25 = (($tmp$1$i) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($20) + ($18<<4)|0) + 4|0);
 HEAP32[$27>>2] = $26;
 $28 = (($tmp$1$i) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($20) + ($18<<4)|0) + 8|0);
 HEAP32[$30>>2] = $29;
 $31 = (($18) + 1)|0;
 HEAP32[$17>>2] = $31;
 $32 = (($tmp$1$i) + 24|0);
 HEAP32[$32>>2] = 0;
 $33 = (($tmp$1$i) + 20|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0);
 if (!($35)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $36 = (($dpb) + 44|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + -1)|0;
 HEAP32[$36>>2] = $38;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _ShellSort($pPic,$num) {
 $pPic = $pPic|0;
 $num = $num|0;
 var $$not = 0, $$off$i = 0, $$off12$i = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $brmerge = 0, $exitcond = 0, $i$09 = 0, $j$0$lcssa = 0;
 var $j$07 = 0, $phitmp$i = 0, $step$011 = 0, $switch3$i = 0, $switch5$i = 0, $tmpPic$sroa$6 = 0, $tmpPic$sroa$8 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $tmpPic$sroa$6 = sp + 16|0;
 $tmpPic$sroa$8 = sp;
 $step$011 = 7;
 while(1) {
  $0 = ($step$011>>>0)<($num>>>0);
  if ($0) {
   $i$09 = $step$011;
   while(1) {
    $1 = (($pPic) + (($i$09*40)|0)|0);
    $2 = $1;
    $3 = $2;
    $4 = HEAP32[$3>>2]|0;
    $5 = (($2) + 4)|0;
    $6 = $5;
    $7 = HEAP32[$6>>2]|0;
    $8 = ((($pPic) + (($i$09*40)|0)|0) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($pPic) + (($i$09*40)|0)|0) + 12|0);
    $11 = $10;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = (($11) + 4)|0;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $17 = $tmpPic$sroa$6;
    $18 = $17;
    HEAP32[$18>>2] = $13;
    $19 = (($17) + 4)|0;
    $20 = $19;
    HEAP32[$20>>2] = $16;
    $21 = ((($pPic) + (($i$09*40)|0)|0) + 20|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($pPic) + (($i$09*40)|0)|0) + 24|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($pPic) + (($i$09*40)|0)|0) + 28|0);
    ;HEAP32[$tmpPic$sroa$8+0>>2]=HEAP32[$25+0>>2]|0;HEAP32[$tmpPic$sroa$8+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$tmpPic$sroa$8+8>>2]=HEAP32[$25+8>>2]|0;
    $26 = ($i$09>>>0)<($step$011>>>0);
    L6: do {
     if ($26) {
      $j$0$lcssa = $i$09;
      label = 5;
     } else {
      $27 = ($22|0)==(0);
      $phitmp$i = ($24|0)==(0);
      $$off$i = (($22) + -1)|0;
      $switch5$i = ($$off$i>>>0)<(2);
      $j$07 = $i$09;
      L8: while(1) {
       $$sum = (($j$07) - ($step$011))|0;
       $29 = ((($pPic) + (($$sum*40)|0)|0) + 20|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = ($30|0)==(0);
       do {
        if ($31) {
         if ($27) {
          $32 = ((($pPic) + (($$sum*40)|0)|0) + 24|0);
          $33 = HEAP32[$32>>2]|0;
          $$not = ($33|0)!=(0);
          $brmerge = $$not | $phitmp$i;
          if ($brmerge) {
           break L8;
          } else {
           label = 16;
          }
         } else {
          label = 16;
         }
        } else {
         if ($27) {
          break L8;
         }
         $$off12$i = (($30) + -1)|0;
         $34 = $$off12$i | $$off$i;
         $35 = ($34>>>0)<(2);
         if ($35) {
          $36 = ((($pPic) + (($$sum*40)|0)|0) + 8|0);
          $37 = HEAP32[$36>>2]|0;
          $38 = ($37|0)>($9|0);
          if ($38) {
           break L8;
          }
          $44 = ($37|0)<($9|0);
          $45 = (($pPic) + (($j$07*40)|0)|0);
          if ($44) {
           $47 = $45;
           break;
          } else {
           $49 = $45;
           break L6;
          }
         }
         $switch3$i = ($$off12$i>>>0)<(2);
         if ($switch3$i) {
          break L8;
         }
         if ($switch5$i) {
          label = 16;
         } else {
          $39 = ((($pPic) + (($$sum*40)|0)|0) + 8|0);
          $40 = HEAP32[$39>>2]|0;
          $41 = ($40|0)>($9|0);
          if ($41) {
           label = 16;
          } else {
           break L8;
          }
         }
        }
       } while(0);
       if ((label|0) == 16) {
        label = 0;
        $43 = (($pPic) + (($j$07*40)|0)|0);
        $47 = $43;
       }
       $46 = (($pPic) + (($$sum*40)|0)|0);
       dest=$47+0|0; src=$46+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
       $48 = ($$sum>>>0)<($step$011>>>0);
       if ($48) {
        $j$0$lcssa = $$sum;
        label = 5;
        break L6;
       } else {
        $j$07 = $$sum;
       }
      }
      $42 = (($pPic) + (($j$07*40)|0)|0);
      $49 = $42;
     }
    } while(0);
    if ((label|0) == 5) {
     label = 0;
     $28 = (($pPic) + (($j$0$lcssa*40)|0)|0);
     $49 = $28;
    }
    $50 = $49;
    $51 = $50;
    HEAP32[$51>>2] = $4;
    $52 = (($50) + 4)|0;
    $53 = $52;
    HEAP32[$53>>2] = $7;
    $54 = (($49) + 8|0);
    HEAP32[$54>>2] = $9;
    $55 = (($49) + 12|0);
    $56 = $tmpPic$sroa$6;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    $59 = (($56) + 4)|0;
    $60 = $59;
    $61 = HEAP32[$60>>2]|0;
    $62 = $55;
    $63 = $62;
    HEAP32[$63>>2] = $58;
    $64 = (($62) + 4)|0;
    $65 = $64;
    HEAP32[$65>>2] = $61;
    $66 = (($49) + 20|0);
    HEAP32[$66>>2] = $22;
    $67 = (($49) + 24|0);
    HEAP32[$67>>2] = $24;
    $68 = (($49) + 28|0);
    ;HEAP32[$68+0>>2]=HEAP32[$tmpPic$sroa$8+0>>2]|0;HEAP32[$68+4>>2]=HEAP32[$tmpPic$sroa$8+4>>2]|0;HEAP32[$68+8>>2]=HEAP32[$tmpPic$sroa$8+8>>2]|0;
    $69 = (($i$09) + 1)|0;
    $exitcond = ($69|0)==($num|0);
    if ($exitcond) {
     break;
    } else {
     $i$09 = $69;
    }
   }
  }
  $70 = $step$011 >>> 1;
  $71 = ($70|0)==(0);
  if ($71) {
   break;
  } else {
   $step$011 = $70;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdWriteMacroblock($image,$data) {
 $image = $image|0;
 $data = $data|0;
 var $$sum = 0, $$sum14 = 0, $$sum1516 = 0, $$sum17 = 0, $$sum1819 = 0, $$sum20 = 0, $$sum2122 = 0, $$sum23 = 0, $$sum2425 = 0, $$sum26 = 0, $$sum2728 = 0, $$sum29 = 0, $$sum30 = 0, $$sum3132 = 0, $$sum33 = 0, $$sum3435 = 0, $$sum36 = 0, $$sum3738 = 0, $$sum39 = 0, $$sum4041 = 0;
 var $$sum42 = 0, $$sum4344 = 0, $$sum45 = 0, $$sum4647 = 0, $$sum48 = 0, $$sum49 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $i$07 = 0, $lum$08 = 0, $ptr$09 = 0, $scevgep = 0, $scevgep12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($image) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($image) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($image) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($image) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1 << 2;
 $scevgep12 = (($data) + 256|0);
 $i$07 = 16;$lum$08 = $3;$ptr$09 = $data;
 while(1) {
  $9 = (($ptr$09) + 4|0);
  $10 = HEAP32[$ptr$09>>2]|0;
  $11 = (($ptr$09) + 8|0);
  $12 = HEAP32[$9>>2]|0;
  $13 = (($lum$08) + 4|0);
  HEAP32[$lum$08>>2] = $10;
  $14 = (($lum$08) + 8|0);
  HEAP32[$13>>2] = $12;
  $15 = (($ptr$09) + 12|0);
  $16 = HEAP32[$11>>2]|0;
  $17 = (($ptr$09) + 16|0);
  $18 = HEAP32[$15>>2]|0;
  $19 = (($lum$08) + 12|0);
  HEAP32[$14>>2] = $16;
  HEAP32[$19>>2] = $18;
  $20 = (($lum$08) + ($8<<2)|0);
  $21 = (($i$07) + -1)|0;
  $22 = ($21|0)==(0);
  if ($22) {
   break;
  } else {
   $i$07 = $21;$lum$08 = $20;$ptr$09 = $17;
  }
 }
 $23 = $1 << 1;
 $24 = $23 & 2147483646;
 $scevgep = (($data) + 320|0);
 $25 = (($data) + 260|0);
 $26 = HEAP32[$scevgep12>>2]|0;
 $27 = (($data) + 264|0);
 $28 = HEAP32[$25>>2]|0;
 $29 = (($5) + 4|0);
 HEAP32[$5>>2] = $26;
 HEAP32[$29>>2] = $28;
 $30 = (($5) + ($24<<2)|0);
 $31 = (($data) + 268|0);
 $32 = HEAP32[$27>>2]|0;
 $33 = (($data) + 272|0);
 $34 = HEAP32[$31>>2]|0;
 $$sum14 = $24 | 1;
 $35 = (($5) + ($$sum14<<2)|0);
 HEAP32[$30>>2] = $32;
 HEAP32[$35>>2] = $34;
 $$sum = $1 << 2;
 $36 = (($5) + ($$sum<<2)|0);
 $37 = (($data) + 276|0);
 $38 = HEAP32[$33>>2]|0;
 $39 = (($data) + 280|0);
 $40 = HEAP32[$37>>2]|0;
 $$sum1516 = $$sum | 1;
 $41 = (($5) + ($$sum1516<<2)|0);
 HEAP32[$36>>2] = $38;
 HEAP32[$41>>2] = $40;
 $$sum17 = (($$sum) + ($24))|0;
 $42 = (($5) + ($$sum17<<2)|0);
 $43 = (($data) + 284|0);
 $44 = HEAP32[$39>>2]|0;
 $45 = (($data) + 288|0);
 $46 = HEAP32[$43>>2]|0;
 $$sum1819 = $$sum17 | 1;
 $47 = (($5) + ($$sum1819<<2)|0);
 HEAP32[$42>>2] = $44;
 HEAP32[$47>>2] = $46;
 $$sum20 = (($$sum17) + ($24))|0;
 $48 = (($5) + ($$sum20<<2)|0);
 $49 = (($data) + 292|0);
 $50 = HEAP32[$45>>2]|0;
 $51 = (($data) + 296|0);
 $52 = HEAP32[$49>>2]|0;
 $$sum2122 = $$sum20 | 1;
 $53 = (($5) + ($$sum2122<<2)|0);
 HEAP32[$48>>2] = $50;
 HEAP32[$53>>2] = $52;
 $$sum23 = (($$sum20) + ($24))|0;
 $54 = (($5) + ($$sum23<<2)|0);
 $55 = (($data) + 300|0);
 $56 = HEAP32[$51>>2]|0;
 $57 = (($data) + 304|0);
 $58 = HEAP32[$55>>2]|0;
 $$sum2425 = $$sum23 | 1;
 $59 = (($5) + ($$sum2425<<2)|0);
 HEAP32[$54>>2] = $56;
 HEAP32[$59>>2] = $58;
 $$sum26 = (($$sum23) + ($24))|0;
 $60 = (($5) + ($$sum26<<2)|0);
 $61 = (($data) + 308|0);
 $62 = HEAP32[$57>>2]|0;
 $63 = (($data) + 312|0);
 $64 = HEAP32[$61>>2]|0;
 $$sum2728 = $$sum26 | 1;
 $65 = (($5) + ($$sum2728<<2)|0);
 HEAP32[$60>>2] = $62;
 HEAP32[$65>>2] = $64;
 $$sum29 = (($$sum26) + ($24))|0;
 $66 = (($5) + ($$sum29<<2)|0);
 $67 = (($data) + 316|0);
 $68 = HEAP32[$63>>2]|0;
 $69 = HEAP32[$67>>2]|0;
 $$sum30 = $$sum29 | 1;
 $70 = (($5) + ($$sum30<<2)|0);
 HEAP32[$66>>2] = $68;
 HEAP32[$70>>2] = $69;
 $71 = (($data) + 324|0);
 $72 = HEAP32[$scevgep>>2]|0;
 $73 = (($data) + 328|0);
 $74 = HEAP32[$71>>2]|0;
 $75 = (($7) + 4|0);
 HEAP32[$7>>2] = $72;
 HEAP32[$75>>2] = $74;
 $76 = (($7) + ($24<<2)|0);
 $77 = (($data) + 332|0);
 $78 = HEAP32[$73>>2]|0;
 $79 = (($data) + 336|0);
 $80 = HEAP32[$77>>2]|0;
 $$sum3132 = $24 | 1;
 $81 = (($7) + ($$sum3132<<2)|0);
 HEAP32[$76>>2] = $78;
 HEAP32[$81>>2] = $80;
 $$sum33 = $1 << 2;
 $82 = (($7) + ($$sum33<<2)|0);
 $83 = (($data) + 340|0);
 $84 = HEAP32[$79>>2]|0;
 $85 = (($data) + 344|0);
 $86 = HEAP32[$83>>2]|0;
 $$sum3435 = $$sum33 | 1;
 $87 = (($7) + ($$sum3435<<2)|0);
 HEAP32[$82>>2] = $84;
 HEAP32[$87>>2] = $86;
 $$sum36 = (($$sum33) + ($24))|0;
 $88 = (($7) + ($$sum36<<2)|0);
 $89 = (($data) + 348|0);
 $90 = HEAP32[$85>>2]|0;
 $91 = (($data) + 352|0);
 $92 = HEAP32[$89>>2]|0;
 $$sum3738 = $$sum36 | 1;
 $93 = (($7) + ($$sum3738<<2)|0);
 HEAP32[$88>>2] = $90;
 HEAP32[$93>>2] = $92;
 $$sum39 = (($$sum36) + ($24))|0;
 $94 = (($7) + ($$sum39<<2)|0);
 $95 = (($data) + 356|0);
 $96 = HEAP32[$91>>2]|0;
 $97 = (($data) + 360|0);
 $98 = HEAP32[$95>>2]|0;
 $$sum4041 = $$sum39 | 1;
 $99 = (($7) + ($$sum4041<<2)|0);
 HEAP32[$94>>2] = $96;
 HEAP32[$99>>2] = $98;
 $$sum42 = (($$sum39) + ($24))|0;
 $100 = (($7) + ($$sum42<<2)|0);
 $101 = (($data) + 364|0);
 $102 = HEAP32[$97>>2]|0;
 $103 = (($data) + 368|0);
 $104 = HEAP32[$101>>2]|0;
 $$sum4344 = $$sum42 | 1;
 $105 = (($7) + ($$sum4344<<2)|0);
 HEAP32[$100>>2] = $102;
 HEAP32[$105>>2] = $104;
 $$sum45 = (($$sum42) + ($24))|0;
 $106 = (($7) + ($$sum45<<2)|0);
 $107 = (($data) + 372|0);
 $108 = HEAP32[$103>>2]|0;
 $109 = (($data) + 376|0);
 $110 = HEAP32[$107>>2]|0;
 $$sum4647 = $$sum45 | 1;
 $111 = (($7) + ($$sum4647<<2)|0);
 HEAP32[$106>>2] = $108;
 HEAP32[$111>>2] = $110;
 $$sum48 = (($$sum45) + ($24))|0;
 $112 = (($7) + ($$sum48<<2)|0);
 $113 = (($data) + 380|0);
 $114 = HEAP32[$109>>2]|0;
 $115 = HEAP32[$113>>2]|0;
 $$sum49 = $$sum48 | 1;
 $116 = (($7) + ($$sum49<<2)|0);
 HEAP32[$112>>2] = $114;
 HEAP32[$116>>2] = $115;
 STACKTOP = sp;return;
}
function _h264bsdWriteOutputBlocks($image,$mbNum,$data,$residual) {
 $image = $image|0;
 $mbNum = $mbNum|0;
 $data = $data|0;
 $residual = $residual|0;
 var $$ = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum16$1 = 0, $$sum16$2 = 0, $$sum16$3 = 0, $$sum17 = 0, $$sum17$1 = 0, $$sum17$2 = 0, $$sum17$3 = 0, $$sum18 = 0, $$sum18$1 = 0, $$sum18$2 = 0;
 var $$sum18$3 = 0, $$sum19 = 0, $$sum19$1 = 0, $$sum19$2 = 0, $$sum19$3 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum3 = 0, $$sum3$$sum2 = 0, $$sum4 = 0, $$sum4$1 = 0, $$sum4$2 = 0, $$sum4$3 = 0, $$sum40 = 0, $$sum41 = 0, $$sum42 = 0;
 var $$sum43 = 0, $$sum44 = 0, $$sum45 = 0, $$sum46 = 0, $$sum47 = 0, $$sum48 = 0, $$sum49 = 0, $$sum5 = 0, $$sum5$1 = 0, $$sum5$2 = 0, $$sum5$3 = 0, $$sum50 = 0, $$sum51 = 0, $$sum52 = 0, $$sum53 = 0, $$sum54 = 0, $$sum55 = 0, $$sum56 = 0, $$sum57 = 0, $$sum58 = 0;
 var $$sum59 = 0, $$sum6 = 0, $$sum6$1 = 0, $$sum6$2 = 0, $$sum6$3 = 0, $$sum60 = 0, $$sum61 = 0, $$sum62 = 0, $$sum63 = 0, $$sum64 = 0, $$sum65 = 0, $$sum66 = 0, $$sum67 = 0, $$sum68 = 0, $$sum69 = 0, $$sum7 = 0, $$sum7$1 = 0, $$sum7$2 = 0, $$sum7$3 = 0, $$sum70 = 0;
 var $$sum71 = 0, $$sum72 = 0, $$sum73 = 0, $$sum74 = 0, $$sum75 = 0, $$sum76 = 0, $$sum77 = 0, $$sum78 = 0, $$sum79 = 0, $$sum8 = 0, $$sum80 = 0, $$sum81 = 0, $$sum82 = 0, $$sum83 = 0, $$sum84 = 0, $$sum85 = 0, $$sum86 = 0, $$sum87 = 0, $$sum88 = 0, $$sum89 = 0;
 var $$sum9 = 0, $$sum90 = 0, $$sum91 = 0, $$sum92 = 0, $$sum93 = 0, $$sum94 = 0, $$sum95 = 0, $$sum96 = 0, $$sum97 = 0, $$sum98 = 0, $$sum99 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $block$036 = 0, $block$129 = 0, $exitcond = 0, $exitcond39 = 0, $imageBlock$1$sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($image) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($image) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $1)|0;
 $5 = (($mbNum>>>0) % ($1>>>0))&-1;
 $6 = HEAP32[$image>>2]|0;
 $7 = (($mbNum) - ($5))|0;
 $8 = $7 << 8;
 $9 = $5 << 4;
 $$sum = (($8) + ($9))|0;
 $10 = $4 << 8;
 $11 = $5 << 3;
 $12 = $1 << 4;
 $13 = $1 << 2;
 $14 = $13 & 1073741820;
 $$sum22 = $14 << 1;
 $$sum24 = (($$sum22) + ($14))|0;
 $block$036 = 0;
 while(1) {
  $15 = (3344 + ($block$036<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (3408 + ($block$036<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($residual) + ($block$036<<6)|0);
  $20 = $18 << 4;
  $$sum13 = (($20) + ($16))|0;
  $21 = (($data) + ($$sum13)|0);
  $22 = Math_imul($18, $12)|0;
  $$sum14 = (($$sum) + ($16))|0;
  $$sum15 = (($$sum14) + ($22))|0;
  $23 = (($6) + ($$sum15)|0);
  $24 = HEAP32[$19>>2]|0;
  $25 = ($24|0)==(16777215);
  if ($25) {
   $166 = HEAP32[$21>>2]|0;
   $$sum20 = (($$sum13) + 16)|0;
   $167 = (($data) + ($$sum20)|0);
   $168 = HEAP32[$167>>2]|0;
   $$sum21 = (($$sum13) + 32)|0;
   $169 = (($data) + ($$sum21)|0);
   HEAP32[$23>>2] = $166;
   $170 = (($23) + ($14<<2)|0);
   HEAP32[$170>>2] = $168;
   $171 = (($23) + ($$sum22<<2)|0);
   $172 = HEAP32[$169>>2]|0;
   $$sum23 = (($$sum13) + 48)|0;
   $173 = (($data) + ($$sum23)|0);
   $174 = HEAP32[$173>>2]|0;
   HEAP32[$171>>2] = $172;
   $175 = (($23) + ($$sum24<<2)|0);
   HEAP32[$175>>2] = $174;
  } else {
   $26 = HEAP8[$21>>0]|0;
   $27 = $26&255;
   $28 = ((($residual) + ($block$036<<6)|0) + 4|0);
   $$sum40 = (($$sum13) + 1)|0;
   $29 = (($data) + ($$sum40)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = (($24) + 512)|0;
   $$sum16 = (($32) + ($27))|0;
   $33 = (3472 + ($$sum16)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = ((($residual) + ($block$036<<6)|0) + 8|0);
   $36 = HEAP32[$28>>2]|0;
   HEAP8[$23>>0] = $34;
   $37 = $31 | 512;
   $$sum17 = (($37) + ($36))|0;
   $38 = (3472 + ($$sum17)|0);
   $39 = HEAP8[$38>>0]|0;
   $$sum41 = (($$sum13) + 2)|0;
   $40 = (($data) + ($$sum41)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = ((($residual) + ($block$036<<6)|0) + 12|0);
   $44 = HEAP32[$35>>2]|0;
   $$sum42 = (($$sum15) + 1)|0;
   $45 = (($6) + ($$sum42)|0);
   HEAP8[$45>>0] = $39;
   $46 = (($44) + 512)|0;
   $$sum18 = (($46) + ($42))|0;
   $47 = (3472 + ($$sum18)|0);
   $48 = HEAP8[$47>>0]|0;
   $$sum43 = (($$sum13) + 3)|0;
   $49 = (($data) + ($$sum43)|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = ((($residual) + ($block$036<<6)|0) + 16|0);
   $53 = HEAP32[$43>>2]|0;
   $$sum44 = (($$sum15) + 2)|0;
   $54 = (($6) + ($$sum44)|0);
   HEAP8[$54>>0] = $48;
   $55 = (($53) + 512)|0;
   $$sum19 = (($55) + ($51))|0;
   $56 = (3472 + ($$sum19)|0);
   $57 = HEAP8[$56>>0]|0;
   $$sum45 = (($$sum13) + 16)|0;
   $58 = (($data) + ($$sum45)|0);
   $$sum46 = (($$sum15) + 3)|0;
   $59 = (($6) + ($$sum46)|0);
   HEAP8[$59>>0] = $57;
   $$sum47 = (($$sum15) + ($12))|0;
   $60 = (($6) + ($$sum47)|0);
   $61 = HEAP8[$58>>0]|0;
   $62 = $61&255;
   $63 = ((($residual) + ($block$036<<6)|0) + 20|0);
   $64 = HEAP32[$52>>2]|0;
   $$sum48 = (($$sum13) + 17)|0;
   $65 = (($data) + ($$sum48)|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&255;
   $68 = (($64) + 512)|0;
   $$sum16$1 = (($68) + ($62))|0;
   $69 = (3472 + ($$sum16$1)|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = ((($residual) + ($block$036<<6)|0) + 24|0);
   $72 = HEAP32[$63>>2]|0;
   HEAP8[$60>>0] = $70;
   $73 = $67 | 512;
   $$sum17$1 = (($73) + ($72))|0;
   $74 = (3472 + ($$sum17$1)|0);
   $75 = HEAP8[$74>>0]|0;
   $$sum49 = (($$sum13) + 18)|0;
   $76 = (($data) + ($$sum49)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77&255;
   $79 = ((($residual) + ($block$036<<6)|0) + 28|0);
   $80 = HEAP32[$71>>2]|0;
   $$sum50 = (($$sum47) + 1)|0;
   $81 = (($6) + ($$sum50)|0);
   HEAP8[$81>>0] = $75;
   $82 = (($80) + 512)|0;
   $$sum18$1 = (($82) + ($78))|0;
   $83 = (3472 + ($$sum18$1)|0);
   $84 = HEAP8[$83>>0]|0;
   $$sum51 = (($$sum13) + 19)|0;
   $85 = (($data) + ($$sum51)|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&255;
   $88 = ((($residual) + ($block$036<<6)|0) + 32|0);
   $89 = HEAP32[$79>>2]|0;
   $$sum52 = (($$sum47) + 2)|0;
   $90 = (($6) + ($$sum52)|0);
   HEAP8[$90>>0] = $84;
   $91 = (($89) + 512)|0;
   $$sum19$1 = (($91) + ($87))|0;
   $92 = (3472 + ($$sum19$1)|0);
   $93 = HEAP8[$92>>0]|0;
   $$sum53 = (($$sum13) + 32)|0;
   $94 = (($data) + ($$sum53)|0);
   $$sum54 = (($$sum47) + 3)|0;
   $95 = (($6) + ($$sum54)|0);
   HEAP8[$95>>0] = $93;
   $$sum55 = (($$sum47) + ($12))|0;
   $96 = (($6) + ($$sum55)|0);
   $97 = HEAP8[$94>>0]|0;
   $98 = $97&255;
   $99 = ((($residual) + ($block$036<<6)|0) + 36|0);
   $100 = HEAP32[$88>>2]|0;
   $$sum56 = (($$sum13) + 33)|0;
   $101 = (($data) + ($$sum56)|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   $104 = (($100) + 512)|0;
   $$sum16$2 = (($104) + ($98))|0;
   $105 = (3472 + ($$sum16$2)|0);
   $106 = HEAP8[$105>>0]|0;
   $107 = ((($residual) + ($block$036<<6)|0) + 40|0);
   $108 = HEAP32[$99>>2]|0;
   HEAP8[$96>>0] = $106;
   $109 = $103 | 512;
   $$sum17$2 = (($109) + ($108))|0;
   $110 = (3472 + ($$sum17$2)|0);
   $111 = HEAP8[$110>>0]|0;
   $$sum57 = (($$sum13) + 34)|0;
   $112 = (($data) + ($$sum57)|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = $113&255;
   $115 = ((($residual) + ($block$036<<6)|0) + 44|0);
   $116 = HEAP32[$107>>2]|0;
   $$sum58 = (($$sum55) + 1)|0;
   $117 = (($6) + ($$sum58)|0);
   HEAP8[$117>>0] = $111;
   $118 = (($116) + 512)|0;
   $$sum18$2 = (($118) + ($114))|0;
   $119 = (3472 + ($$sum18$2)|0);
   $120 = HEAP8[$119>>0]|0;
   $$sum59 = (($$sum13) + 35)|0;
   $121 = (($data) + ($$sum59)|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = $122&255;
   $124 = ((($residual) + ($block$036<<6)|0) + 48|0);
   $125 = HEAP32[$115>>2]|0;
   $$sum60 = (($$sum55) + 2)|0;
   $126 = (($6) + ($$sum60)|0);
   HEAP8[$126>>0] = $120;
   $127 = (($125) + 512)|0;
   $$sum19$2 = (($127) + ($123))|0;
   $128 = (3472 + ($$sum19$2)|0);
   $129 = HEAP8[$128>>0]|0;
   $$sum61 = (($$sum13) + 48)|0;
   $130 = (($data) + ($$sum61)|0);
   $$sum62 = (($$sum55) + 3)|0;
   $131 = (($6) + ($$sum62)|0);
   HEAP8[$131>>0] = $129;
   $$sum63 = (($$sum55) + ($12))|0;
   $132 = (($6) + ($$sum63)|0);
   $133 = HEAP8[$130>>0]|0;
   $134 = $133&255;
   $135 = ((($residual) + ($block$036<<6)|0) + 52|0);
   $136 = HEAP32[$124>>2]|0;
   $$sum64 = (($$sum13) + 49)|0;
   $137 = (($data) + ($$sum64)|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = (($136) + 512)|0;
   $$sum16$3 = (($140) + ($134))|0;
   $141 = (3472 + ($$sum16$3)|0);
   $142 = HEAP8[$141>>0]|0;
   $143 = ((($residual) + ($block$036<<6)|0) + 56|0);
   $144 = HEAP32[$135>>2]|0;
   HEAP8[$132>>0] = $142;
   $145 = $139 | 512;
   $$sum17$3 = (($145) + ($144))|0;
   $146 = (3472 + ($$sum17$3)|0);
   $147 = HEAP8[$146>>0]|0;
   $$sum65 = (($$sum13) + 50)|0;
   $148 = (($data) + ($$sum65)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = ((($residual) + ($block$036<<6)|0) + 60|0);
   $152 = HEAP32[$143>>2]|0;
   $$sum66 = (($$sum63) + 1)|0;
   $153 = (($6) + ($$sum66)|0);
   HEAP8[$153>>0] = $147;
   $154 = (($152) + 512)|0;
   $$sum18$3 = (($154) + ($150))|0;
   $155 = (3472 + ($$sum18$3)|0);
   $156 = HEAP8[$155>>0]|0;
   $$sum67 = (($$sum13) + 51)|0;
   $157 = (($data) + ($$sum67)|0);
   $158 = HEAP8[$157>>0]|0;
   $159 = $158&255;
   $160 = HEAP32[$151>>2]|0;
   $$sum68 = (($$sum63) + 2)|0;
   $161 = (($6) + ($$sum68)|0);
   HEAP8[$161>>0] = $156;
   $162 = (($160) + 512)|0;
   $$sum19$3 = (($162) + ($159))|0;
   $163 = (3472 + ($$sum19$3)|0);
   $164 = HEAP8[$163>>0]|0;
   $$sum69 = (($$sum63) + 3)|0;
   $165 = (($6) + ($$sum69)|0);
   HEAP8[$165>>0] = $164;
  }
  $176 = (($block$036) + 1)|0;
  $exitcond39 = ($176|0)==(16);
  if ($exitcond39) {
   break;
  } else {
   $block$036 = $176;
  }
 }
 $177 = $7 << 6;
 $178 = $4 << 6;
 $179 = $1 << 3;
 $180 = $179 & 2147483640;
 $181 = (($data) + 256|0);
 $182 = (($data) + 320|0);
 $183 = (($11) + ($10))|0;
 $$sum1 = (($183) + ($177))|0;
 $184 = $180 >>> 2;
 $$sum10 = $180 >>> 1;
 $$sum12 = (($$sum10) + ($184))|0;
 $block$129 = 16;
 while(1) {
  $185 = $block$129 & 3;
  $186 = (3344 + ($185<<2)|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = (3408 + ($185<<2)|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = (($residual) + ($block$129<<6)|0);
  $191 = ($block$129>>>0)>(19);
  $$ = $191 ? $182 : $181;
  $$sum3 = $191 ? $178 : 0;
  $192 = $189 << 3;
  $193 = (($192) + ($187))|0;
  $194 = (($$) + ($193)|0);
  $195 = Math_imul($189, $180)|0;
  $$sum2 = (($$sum1) + ($$sum3))|0;
  $$sum3$$sum2 = (($$sum2) + ($187))|0;
  $imageBlock$1$sum = (($$sum3$$sum2) + ($195))|0;
  $196 = (($6) + ($imageBlock$1$sum)|0);
  $197 = HEAP32[$190>>2]|0;
  $198 = ($197|0)==(16777215);
  if ($198) {
   $339 = HEAP32[$194>>2]|0;
   $$sum8 = (($193) + 8)|0;
   $340 = (($$) + ($$sum8)|0);
   $341 = HEAP32[$340>>2]|0;
   $$sum9 = (($193) + 16)|0;
   $342 = (($$) + ($$sum9)|0);
   HEAP32[$196>>2] = $339;
   $343 = (($196) + ($184<<2)|0);
   HEAP32[$343>>2] = $341;
   $344 = (($196) + ($$sum10<<2)|0);
   $345 = HEAP32[$342>>2]|0;
   $$sum11 = (($193) + 24)|0;
   $346 = (($$) + ($$sum11)|0);
   $347 = HEAP32[$346>>2]|0;
   HEAP32[$344>>2] = $345;
   $348 = (($196) + ($$sum12<<2)|0);
   HEAP32[$348>>2] = $347;
  } else {
   $199 = HEAP8[$194>>0]|0;
   $200 = $199&255;
   $201 = ((($residual) + ($block$129<<6)|0) + 4|0);
   $$sum70 = (($193) + 1)|0;
   $202 = (($$) + ($$sum70)|0);
   $203 = HEAP8[$202>>0]|0;
   $204 = $203&255;
   $205 = (($197) + 512)|0;
   $$sum4 = (($205) + ($200))|0;
   $206 = (3472 + ($$sum4)|0);
   $207 = HEAP8[$206>>0]|0;
   $208 = ((($residual) + ($block$129<<6)|0) + 8|0);
   $209 = HEAP32[$201>>2]|0;
   HEAP8[$196>>0] = $207;
   $210 = $204 | 512;
   $$sum5 = (($210) + ($209))|0;
   $211 = (3472 + ($$sum5)|0);
   $212 = HEAP8[$211>>0]|0;
   $$sum71 = (($193) + 2)|0;
   $213 = (($$) + ($$sum71)|0);
   $214 = HEAP8[$213>>0]|0;
   $215 = $214&255;
   $216 = ((($residual) + ($block$129<<6)|0) + 12|0);
   $217 = HEAP32[$208>>2]|0;
   $$sum72 = (($imageBlock$1$sum) + 1)|0;
   $218 = (($6) + ($$sum72)|0);
   HEAP8[$218>>0] = $212;
   $219 = (($217) + 512)|0;
   $$sum6 = (($219) + ($215))|0;
   $220 = (3472 + ($$sum6)|0);
   $221 = HEAP8[$220>>0]|0;
   $$sum73 = (($193) + 3)|0;
   $222 = (($$) + ($$sum73)|0);
   $223 = HEAP8[$222>>0]|0;
   $224 = $223&255;
   $225 = ((($residual) + ($block$129<<6)|0) + 16|0);
   $226 = HEAP32[$216>>2]|0;
   $$sum74 = (($imageBlock$1$sum) + 2)|0;
   $227 = (($6) + ($$sum74)|0);
   HEAP8[$227>>0] = $221;
   $228 = (($226) + 512)|0;
   $$sum7 = (($228) + ($224))|0;
   $229 = (3472 + ($$sum7)|0);
   $230 = HEAP8[$229>>0]|0;
   $$sum75 = (($193) + 8)|0;
   $231 = (($$) + ($$sum75)|0);
   $$sum76 = (($imageBlock$1$sum) + 3)|0;
   $232 = (($6) + ($$sum76)|0);
   HEAP8[$232>>0] = $230;
   $$sum77 = (($imageBlock$1$sum) + ($180))|0;
   $233 = (($6) + ($$sum77)|0);
   $234 = HEAP8[$231>>0]|0;
   $235 = $234&255;
   $236 = ((($residual) + ($block$129<<6)|0) + 20|0);
   $237 = HEAP32[$225>>2]|0;
   $$sum78 = (($193) + 9)|0;
   $238 = (($$) + ($$sum78)|0);
   $239 = HEAP8[$238>>0]|0;
   $240 = $239&255;
   $241 = (($237) + 512)|0;
   $$sum4$1 = (($241) + ($235))|0;
   $242 = (3472 + ($$sum4$1)|0);
   $243 = HEAP8[$242>>0]|0;
   $244 = ((($residual) + ($block$129<<6)|0) + 24|0);
   $245 = HEAP32[$236>>2]|0;
   HEAP8[$233>>0] = $243;
   $246 = $240 | 512;
   $$sum5$1 = (($246) + ($245))|0;
   $247 = (3472 + ($$sum5$1)|0);
   $248 = HEAP8[$247>>0]|0;
   $$sum79 = (($193) + 10)|0;
   $249 = (($$) + ($$sum79)|0);
   $250 = HEAP8[$249>>0]|0;
   $251 = $250&255;
   $252 = ((($residual) + ($block$129<<6)|0) + 28|0);
   $253 = HEAP32[$244>>2]|0;
   $$sum80 = (($$sum77) + 1)|0;
   $254 = (($6) + ($$sum80)|0);
   HEAP8[$254>>0] = $248;
   $255 = (($253) + 512)|0;
   $$sum6$1 = (($255) + ($251))|0;
   $256 = (3472 + ($$sum6$1)|0);
   $257 = HEAP8[$256>>0]|0;
   $$sum81 = (($193) + 11)|0;
   $258 = (($$) + ($$sum81)|0);
   $259 = HEAP8[$258>>0]|0;
   $260 = $259&255;
   $261 = ((($residual) + ($block$129<<6)|0) + 32|0);
   $262 = HEAP32[$252>>2]|0;
   $$sum82 = (($$sum77) + 2)|0;
   $263 = (($6) + ($$sum82)|0);
   HEAP8[$263>>0] = $257;
   $264 = (($262) + 512)|0;
   $$sum7$1 = (($264) + ($260))|0;
   $265 = (3472 + ($$sum7$1)|0);
   $266 = HEAP8[$265>>0]|0;
   $$sum83 = (($193) + 16)|0;
   $267 = (($$) + ($$sum83)|0);
   $$sum84 = (($$sum77) + 3)|0;
   $268 = (($6) + ($$sum84)|0);
   HEAP8[$268>>0] = $266;
   $$sum85 = (($$sum77) + ($180))|0;
   $269 = (($6) + ($$sum85)|0);
   $270 = HEAP8[$267>>0]|0;
   $271 = $270&255;
   $272 = ((($residual) + ($block$129<<6)|0) + 36|0);
   $273 = HEAP32[$261>>2]|0;
   $$sum86 = (($193) + 17)|0;
   $274 = (($$) + ($$sum86)|0);
   $275 = HEAP8[$274>>0]|0;
   $276 = $275&255;
   $277 = (($273) + 512)|0;
   $$sum4$2 = (($277) + ($271))|0;
   $278 = (3472 + ($$sum4$2)|0);
   $279 = HEAP8[$278>>0]|0;
   $280 = ((($residual) + ($block$129<<6)|0) + 40|0);
   $281 = HEAP32[$272>>2]|0;
   HEAP8[$269>>0] = $279;
   $282 = $276 | 512;
   $$sum5$2 = (($282) + ($281))|0;
   $283 = (3472 + ($$sum5$2)|0);
   $284 = HEAP8[$283>>0]|0;
   $$sum87 = (($193) + 18)|0;
   $285 = (($$) + ($$sum87)|0);
   $286 = HEAP8[$285>>0]|0;
   $287 = $286&255;
   $288 = ((($residual) + ($block$129<<6)|0) + 44|0);
   $289 = HEAP32[$280>>2]|0;
   $$sum88 = (($$sum85) + 1)|0;
   $290 = (($6) + ($$sum88)|0);
   HEAP8[$290>>0] = $284;
   $291 = (($289) + 512)|0;
   $$sum6$2 = (($291) + ($287))|0;
   $292 = (3472 + ($$sum6$2)|0);
   $293 = HEAP8[$292>>0]|0;
   $$sum89 = (($193) + 19)|0;
   $294 = (($$) + ($$sum89)|0);
   $295 = HEAP8[$294>>0]|0;
   $296 = $295&255;
   $297 = ((($residual) + ($block$129<<6)|0) + 48|0);
   $298 = HEAP32[$288>>2]|0;
   $$sum90 = (($$sum85) + 2)|0;
   $299 = (($6) + ($$sum90)|0);
   HEAP8[$299>>0] = $293;
   $300 = (($298) + 512)|0;
   $$sum7$2 = (($300) + ($296))|0;
   $301 = (3472 + ($$sum7$2)|0);
   $302 = HEAP8[$301>>0]|0;
   $$sum91 = (($193) + 24)|0;
   $303 = (($$) + ($$sum91)|0);
   $$sum92 = (($$sum85) + 3)|0;
   $304 = (($6) + ($$sum92)|0);
   HEAP8[$304>>0] = $302;
   $$sum93 = (($$sum85) + ($180))|0;
   $305 = (($6) + ($$sum93)|0);
   $306 = HEAP8[$303>>0]|0;
   $307 = $306&255;
   $308 = ((($residual) + ($block$129<<6)|0) + 52|0);
   $309 = HEAP32[$297>>2]|0;
   $$sum94 = (($193) + 25)|0;
   $310 = (($$) + ($$sum94)|0);
   $311 = HEAP8[$310>>0]|0;
   $312 = $311&255;
   $313 = (($309) + 512)|0;
   $$sum4$3 = (($313) + ($307))|0;
   $314 = (3472 + ($$sum4$3)|0);
   $315 = HEAP8[$314>>0]|0;
   $316 = ((($residual) + ($block$129<<6)|0) + 56|0);
   $317 = HEAP32[$308>>2]|0;
   HEAP8[$305>>0] = $315;
   $318 = $312 | 512;
   $$sum5$3 = (($318) + ($317))|0;
   $319 = (3472 + ($$sum5$3)|0);
   $320 = HEAP8[$319>>0]|0;
   $$sum95 = (($193) + 26)|0;
   $321 = (($$) + ($$sum95)|0);
   $322 = HEAP8[$321>>0]|0;
   $323 = $322&255;
   $324 = ((($residual) + ($block$129<<6)|0) + 60|0);
   $325 = HEAP32[$316>>2]|0;
   $$sum96 = (($$sum93) + 1)|0;
   $326 = (($6) + ($$sum96)|0);
   HEAP8[$326>>0] = $320;
   $327 = (($325) + 512)|0;
   $$sum6$3 = (($327) + ($323))|0;
   $328 = (3472 + ($$sum6$3)|0);
   $329 = HEAP8[$328>>0]|0;
   $$sum97 = (($193) + 27)|0;
   $330 = (($$) + ($$sum97)|0);
   $331 = HEAP8[$330>>0]|0;
   $332 = $331&255;
   $333 = HEAP32[$324>>2]|0;
   $$sum98 = (($$sum93) + 2)|0;
   $334 = (($6) + ($$sum98)|0);
   HEAP8[$334>>0] = $329;
   $335 = (($333) + 512)|0;
   $$sum7$3 = (($335) + ($332))|0;
   $336 = (3472 + ($$sum7$3)|0);
   $337 = HEAP8[$336>>0]|0;
   $$sum99 = (($$sum93) + 3)|0;
   $338 = (($6) + ($$sum99)|0);
   HEAP8[$338>>0] = $337;
  }
  $349 = (($block$129) + 1)|0;
  $exitcond = ($349|0)==(24);
  if ($exitcond) {
   break;
  } else {
   $block$129 = $349;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdFilterPicture($image,$mb) {
 $image = $image|0;
 $mb = $mb|0;
 var $$ = 0, $$$i = 0, $$$i$i = 0, $$$i122$i = 0, $$$i170$i = 0, $$$i178$i = 0, $$$i186$i = 0, $$$i194$i = 0, $$$i234$i = 0, $$$i242$i = 0, $$$i250$i = 0, $$$i258$i = 0, $$$i266$i = 0, $$$i274$i = 0, $$$i282$i = 0, $$$i290$i = 0, $$$i297$i = 0, $$$i304$i = 0, $$$i311$i = 0, $$$i318$i = 0;
 var $$$i325$i = 0, $$$i332$i = 0, $$$i339$i = 0, $$$i50$i = 0, $$$i74$i = 0, $$$i98$i = 0, $$013$i = 0, $$024$i$i = 0, $$05$i = 0, $$128$i$i = 0, $$342$i = 0, $$343$i = 0, $$344$i = 0, $$345$i = 0, $$346$i = 0, $$347$i = 0, $$348$i = 0, $$349$i = 0, $$350$i = 0, $$351$i = 0;
 var $$352$i = 0, $$353$i = 0, $$354$i = 0, $$355$i = 0, $$356$i = 0, $$362$i = 0, $$363$i = 0, $$mbRow$0 = 0, $$pre$i = 0, $$pre$i10 = 0, $$pre$i4 = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i14 = 0, $$sum1 = 0, $$sum19$i$i = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bS = 0, $exitcond$i = 0, $flags$0$i = 0, $flags$1$i$ph = 0, $i$023$i$i = 0;
 var $i$127$i$i = 0, $ispos$i$i = 0, $ispos$i$i5 = 0, $ispos$i101$i = 0, $ispos$i109$i = 0, $ispos$i117$i = 0, $ispos$i125$i = 0, $ispos$i133$i = 0, $ispos$i141$i = 0, $ispos$i149$i = 0, $ispos$i157$i = 0, $ispos$i165$i = 0, $ispos$i173$i = 0, $ispos$i181$i = 0, $ispos$i189$i = 0, $ispos$i197$i = 0, $ispos$i205$i = 0, $ispos$i213$i = 0, $ispos$i221$i = 0, $ispos$i229$i = 0;
 var $ispos$i237$i = 0, $ispos$i245$i = 0, $ispos$i253$i = 0, $ispos$i261$i = 0, $ispos$i269$i = 0, $ispos$i277$i = 0, $ispos$i285$i = 0, $ispos$i293$i = 0, $ispos$i300$i = 0, $ispos$i307$i = 0, $ispos$i314$i = 0, $ispos$i321$i = 0, $ispos$i328$i = 0, $ispos$i335$i = 0, $ispos$i41$i = 0, $ispos$i45$i = 0, $ispos$i53$i = 0, $ispos$i61$i = 0, $ispos$i69$i = 0, $ispos$i77$i = 0;
 var $ispos$i85$i = 0, $ispos$i93$i = 0, $ispos1$i$i = 0, $ispos1$i$i7 = 0, $ispos1$i295$i = 0, $ispos1$i302$i = 0, $ispos1$i309$i = 0, $ispos1$i316$i = 0, $ispos1$i323$i = 0, $ispos1$i330$i = 0, $ispos1$i337$i = 0, $ispos11$i$i = 0, $ispos13$i$i = 0, $ispos15$i$i = 0, $ispos17$i$i = 0, $ispos2$i$i = 0, $ispos2$i103$i = 0, $ispos2$i111$i = 0, $ispos2$i119$i = 0, $ispos2$i127$i = 0;
 var $ispos2$i135$i = 0, $ispos2$i143$i = 0, $ispos2$i151$i = 0, $ispos2$i159$i = 0, $ispos2$i167$i = 0, $ispos2$i175$i = 0, $ispos2$i183$i = 0, $ispos2$i191$i = 0, $ispos2$i199$i = 0, $ispos2$i207$i = 0, $ispos2$i215$i = 0, $ispos2$i223$i = 0, $ispos2$i231$i = 0, $ispos2$i239$i = 0, $ispos2$i247$i = 0, $ispos2$i255$i = 0, $ispos2$i263$i = 0, $ispos2$i271$i = 0, $ispos2$i279$i = 0, $ispos2$i287$i = 0;
 var $ispos2$i47$i = 0, $ispos2$i55$i = 0, $ispos2$i63$i = 0, $ispos2$i71$i = 0, $ispos2$i79$i = 0, $ispos2$i87$i = 0, $ispos2$i95$i = 0, $ispos3$i$i = 0, $ispos5$i$i = 0, $ispos7$i$i = 0, $ispos9$i$i = 0, $mbCol$018 = 0, $mbRow$020 = 0, $neg$i$i = 0, $neg$i$i6 = 0, $neg$i102$i = 0, $neg$i110$i = 0, $neg$i118$i = 0, $neg$i126$i = 0, $neg$i134$i = 0;
 var $neg$i142$i = 0, $neg$i150$i = 0, $neg$i158$i = 0, $neg$i166$i = 0, $neg$i174$i = 0, $neg$i182$i = 0, $neg$i190$i = 0, $neg$i198$i = 0, $neg$i206$i = 0, $neg$i214$i = 0, $neg$i222$i = 0, $neg$i230$i = 0, $neg$i238$i = 0, $neg$i246$i = 0, $neg$i254$i = 0, $neg$i262$i = 0, $neg$i270$i = 0, $neg$i278$i = 0, $neg$i286$i = 0, $neg$i294$i = 0;
 var $neg$i301$i = 0, $neg$i308$i = 0, $neg$i315$i = 0, $neg$i322$i = 0, $neg$i329$i = 0, $neg$i336$i = 0, $neg$i42$i = 0, $neg$i46$i = 0, $neg$i54$i = 0, $neg$i62$i = 0, $neg$i70$i = 0, $neg$i78$i = 0, $neg$i86$i = 0, $neg$i94$i = 0, $neg10$i$i = 0, $neg12$i$i = 0, $neg14$i$i = 0, $neg16$i$i = 0, $neg18$i$i = 0, $neg2$i$i = 0;
 var $neg2$i$i8 = 0, $neg2$i296$i = 0, $neg2$i303$i = 0, $neg2$i310$i = 0, $neg2$i317$i = 0, $neg2$i324$i = 0, $neg2$i331$i = 0, $neg2$i338$i = 0, $neg3$i$i = 0, $neg3$i104$i = 0, $neg3$i112$i = 0, $neg3$i120$i = 0, $neg3$i128$i = 0, $neg3$i136$i = 0, $neg3$i144$i = 0, $neg3$i152$i = 0, $neg3$i160$i = 0, $neg3$i168$i = 0, $neg3$i176$i = 0, $neg3$i184$i = 0;
 var $neg3$i192$i = 0, $neg3$i200$i = 0, $neg3$i208$i = 0, $neg3$i216$i = 0, $neg3$i224$i = 0, $neg3$i232$i = 0, $neg3$i240$i = 0, $neg3$i248$i = 0, $neg3$i256$i = 0, $neg3$i264$i = 0, $neg3$i272$i = 0, $neg3$i280$i = 0, $neg3$i288$i = 0, $neg3$i48$i = 0, $neg3$i56$i = 0, $neg3$i64$i = 0, $neg3$i72$i = 0, $neg3$i80$i = 0, $neg3$i88$i = 0, $neg3$i96$i = 0;
 var $neg4$i$i = 0, $neg6$i$i = 0, $neg8$i$i = 0, $nonZeroBs$0$i = 0, $nonZeroBs$1$i = 0, $not$$i = 0, $not$$i$i = 0, $not$$i1$i = 0, $not$$i121$i = 0, $not$$i169$i = 0, $not$$i177$i = 0, $not$$i185$i = 0, $not$$i193$i = 0, $not$$i233$i = 0, $not$$i241$i = 0, $not$$i249$i = 0, $not$$i257$i = 0, $not$$i265$i = 0, $not$$i273$i = 0, $not$$i281$i = 0;
 var $not$$i289$i = 0, $not$$i49$i = 0, $not$$i73$i = 0, $not$$i97$i = 0, $not$364$i = 0, $offset$010$i = 0, $offset$07$i = 0, $pMb$021 = 0, $phitmp$i = 0, $phitmp1$i = 0, $phitmp10$i = 0, $phitmp11$i = 0, $phitmp12$i = 0, $phitmp13$i = 0, $phitmp14$i = 0, $phitmp15$i = 0, $phitmp16$i = 0, $phitmp17$i = 0, $phitmp18$i = 0, $phitmp19$i = 0;
 var $phitmp2$i = 0, $phitmp20$i = 0, $phitmp21$i = 0, $phitmp22$i = 0, $phitmp23$i = 0, $phitmp24$i = 0, $phitmp25$i = 0, $phitmp26$i = 0, $phitmp27$i = 0, $phitmp28$i = 0, $phitmp29$i = 0, $phitmp3$i = 0, $phitmp30$i = 0, $phitmp31$i = 0, $phitmp32$i = 0, $phitmp33$i = 0, $phitmp34$i = 0, $phitmp35$i = 0, $phitmp36$i = 0, $phitmp37$i = 0;
 var $phitmp38$i = 0, $phitmp39$i = 0, $phitmp4$i = 0, $phitmp5$i = 0, $phitmp6$i = 0, $phitmp7$i = 0, $phitmp8$i = 0, $phitmp9$i = 0, $ptr$05$i = 0, $thresholds = 0, $tmp$04$i = 0, $tmp$08$i = 0, $tmp$1$i$i = 0, $tmp$2$i$i = 0, $vblock$07$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $bS = sp + 40|0;
 $thresholds = sp;
 $0 = (($image) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($image) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $1)|0;
 $5 = ($3|0)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (($bS) + 24|0);
 $7 = (($bS) + 16|0);
 $8 = (($bS) + 8|0);
 $9 = (($bS) + 100|0);
 $10 = (($bS) + 68|0);
 $11 = (($bS) + 36|0);
 $12 = (($bS) + 4|0);
 $13 = (($bS) + 120|0);
 $14 = (($bS) + 112|0);
 $15 = (($bS) + 104|0);
 $16 = (($bS) + 96|0);
 $17 = (($bS) + 88|0);
 $18 = (($bS) + 80|0);
 $19 = (($bS) + 72|0);
 $20 = (($bS) + 64|0);
 $21 = (($bS) + 56|0);
 $22 = (($bS) + 48|0);
 $23 = (($bS) + 40|0);
 $24 = (($bS) + 32|0);
 $25 = (($bS) + 124|0);
 $26 = (($bS) + 116|0);
 $27 = (($bS) + 108|0);
 $28 = (($bS) + 92|0);
 $29 = (($bS) + 84|0);
 $30 = (($bS) + 76|0);
 $31 = (($bS) + 60|0);
 $32 = (($bS) + 52|0);
 $33 = (($bS) + 44|0);
 $34 = (($bS) + 28|0);
 $35 = (($bS) + 20|0);
 $36 = (($bS) + 12|0);
 $37 = (($thresholds) + 28|0);
 $38 = (($thresholds) + 32|0);
 $39 = (($thresholds) + 24|0);
 $40 = $1 << 4;
 $41 = (0 - ($40))|0;
 $42 = $41 << 1;
 $43 = Math_imul($1, -48)|0;
 $44 = $1 << 5;
 $45 = $41 << 2;
 $46 = ($1*48)|0;
 $47 = $1 << 6;
 $48 = (($thresholds) + 24|0);
 $49 = (($thresholds) + 12|0);
 $50 = $4 << 8;
 $51 = $4 << 6;
 $52 = $1 << 3;
 $$sum$i14 = $40 | 4;
 $53 = (($thresholds) + 16|0);
 $54 = (($thresholds) + 20|0);
 $55 = (($thresholds) + 12|0);
 $56 = (($thresholds) + 4|0);
 $57 = (($thresholds) + 8|0);
 $mbCol$018 = 0;$mbRow$020 = 0;$pMb$021 = $mb;
 while(1) {
  $58 = (($pMb$021) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(1);
  do {
   if (!($60)) {
    $61 = (($pMb$021) + 200|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)==(0|0);
    do {
     if ($63) {
      $flags$0$i = 1;
     } else {
      $64 = ($59|0)==(2);
      if ($64) {
       $65 = (($pMb$021) + 4|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($62) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $not$$i$i = ($66|0)==($68|0);
       if (!($not$$i$i)) {
        $flags$0$i = 1;
        break;
       }
      }
      $flags$0$i = 5;
     }
    } while(0);
    $69 = (($pMb$021) + 204|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    do {
     if ($71) {
      $flags$1$i$ph = $flags$0$i;
     } else {
      $72 = ($59|0)==(2);
      if ($72) {
       $73 = (($pMb$021) + 4|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (($70) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $not$$i1$i = ($74|0)==($76|0);
       if (!($not$$i1$i)) {
        $flags$1$i$ph = $flags$0$i;
        break;
       }
      }
      $77 = $flags$0$i | 2;
      $flags$1$i$ph = $77;
     }
    } while(0);
    $78 = $flags$1$i$ph & 2;
    $79 = ($78|0)==(0);
    do {
     if ($79) {
      HEAP32[$6>>2] = 0;
      HEAP32[$7>>2] = 0;
      HEAP32[$8>>2] = 0;
      HEAP32[$bS>>2] = 0;
      $nonZeroBs$0$i = 0;
     } else {
      $80 = HEAP32[$pMb$021>>2]|0;
      $81 = ($80>>>0)>(5);
      if (!($81)) {
       $82 = HEAP32[$70>>2]|0;
       $83 = ($82>>>0)>(5);
       if (!($83)) {
        $84 = (($pMb$021) + 28|0);
        $85 = HEAP16[$84>>1]|0;
        $86 = ($85<<16>>16)==(0);
        if ($86) {
         $87 = (($70) + 48|0);
         $88 = HEAP16[$87>>1]|0;
         $89 = ($88<<16>>16)==(0);
         if ($89) {
          $90 = (($pMb$021) + 116|0);
          $91 = HEAP32[$90>>2]|0;
          $92 = (($70) + 124|0);
          $93 = HEAP32[$92>>2]|0;
          $94 = ($91|0)==($93|0);
          if ($94) {
           $95 = (($pMb$021) + 132|0);
           $96 = HEAP16[$95>>1]|0;
           $97 = $96 << 16 >> 16;
           $98 = (($70) + 172|0);
           $99 = HEAP16[$98>>1]|0;
           $100 = $99 << 16 >> 16;
           $101 = (($97) - ($100))|0;
           $ispos$i$i = ($101|0)>(-1);
           $neg$i$i = (0 - ($101))|0;
           $102 = $ispos$i$i ? $101 : $neg$i$i;
           $103 = ($102|0)>(3);
           if ($103) {
            $113 = 1;
           } else {
            $104 = (($pMb$021) + 134|0);
            $105 = HEAP16[$104>>1]|0;
            $106 = $105 << 16 >> 16;
            $107 = (($70) + 174|0);
            $108 = HEAP16[$107>>1]|0;
            $109 = $108 << 16 >> 16;
            $110 = (($106) - ($109))|0;
            $ispos1$i$i = ($110|0)>(-1);
            $neg2$i$i = (0 - ($110))|0;
            $111 = $ispos1$i$i ? $110 : $neg2$i$i;
            $112 = ($111|0)>(3);
            $$$i$i = $112&1;
            $113 = $$$i$i;
           }
          } else {
           $113 = 1;
          }
         } else {
          $113 = 2;
         }
        } else {
         $113 = 2;
        }
        HEAP32[$bS>>2] = $113;
        $114 = (($pMb$021) + 30|0);
        $115 = HEAP16[$114>>1]|0;
        $116 = ($115<<16>>16)==(0);
        if ($116) {
         $117 = (($70) + 50|0);
         $118 = HEAP16[$117>>1]|0;
         $119 = ($118<<16>>16)==(0);
         if ($119) {
          $120 = (($pMb$021) + 116|0);
          $121 = HEAP32[$120>>2]|0;
          $122 = (($70) + 124|0);
          $123 = HEAP32[$122>>2]|0;
          $124 = ($121|0)==($123|0);
          if ($124) {
           $125 = (($pMb$021) + 136|0);
           $126 = HEAP16[$125>>1]|0;
           $127 = $126 << 16 >> 16;
           $128 = (($70) + 176|0);
           $129 = HEAP16[$128>>1]|0;
           $130 = $129 << 16 >> 16;
           $131 = (($127) - ($130))|0;
           $ispos$i293$i = ($131|0)>(-1);
           $neg$i294$i = (0 - ($131))|0;
           $132 = $ispos$i293$i ? $131 : $neg$i294$i;
           $133 = ($132|0)>(3);
           if ($133) {
            $143 = 1;
           } else {
            $134 = (($pMb$021) + 138|0);
            $135 = HEAP16[$134>>1]|0;
            $136 = $135 << 16 >> 16;
            $137 = (($70) + 178|0);
            $138 = HEAP16[$137>>1]|0;
            $139 = $138 << 16 >> 16;
            $140 = (($136) - ($139))|0;
            $ispos1$i295$i = ($140|0)>(-1);
            $neg2$i296$i = (0 - ($140))|0;
            $141 = $ispos1$i295$i ? $140 : $neg2$i296$i;
            $142 = ($141|0)>(3);
            $$$i297$i = $142&1;
            $143 = $$$i297$i;
           }
          } else {
           $143 = 1;
          }
         } else {
          $143 = 2;
         }
        } else {
         $143 = 2;
        }
        HEAP32[$8>>2] = $143;
        $144 = (($pMb$021) + 36|0);
        $145 = HEAP16[$144>>1]|0;
        $146 = ($145<<16>>16)==(0);
        if ($146) {
         $147 = (($70) + 56|0);
         $148 = HEAP16[$147>>1]|0;
         $149 = ($148<<16>>16)==(0);
         if ($149) {
          $150 = (($pMb$021) + 120|0);
          $151 = HEAP32[$150>>2]|0;
          $152 = (($70) + 128|0);
          $153 = HEAP32[$152>>2]|0;
          $154 = ($151|0)==($153|0);
          if ($154) {
           $155 = (($pMb$021) + 148|0);
           $156 = HEAP16[$155>>1]|0;
           $157 = $156 << 16 >> 16;
           $158 = (($70) + 188|0);
           $159 = HEAP16[$158>>1]|0;
           $160 = $159 << 16 >> 16;
           $161 = (($157) - ($160))|0;
           $ispos$i335$i = ($161|0)>(-1);
           $neg$i336$i = (0 - ($161))|0;
           $162 = $ispos$i335$i ? $161 : $neg$i336$i;
           $163 = ($162|0)>(3);
           if ($163) {
            $173 = 1;
           } else {
            $164 = (($pMb$021) + 150|0);
            $165 = HEAP16[$164>>1]|0;
            $166 = $165 << 16 >> 16;
            $167 = (($70) + 190|0);
            $168 = HEAP16[$167>>1]|0;
            $169 = $168 << 16 >> 16;
            $170 = (($166) - ($169))|0;
            $ispos1$i337$i = ($170|0)>(-1);
            $neg2$i338$i = (0 - ($170))|0;
            $171 = $ispos1$i337$i ? $170 : $neg2$i338$i;
            $172 = ($171|0)>(3);
            $$$i339$i = $172&1;
            $173 = $$$i339$i;
           }
          } else {
           $173 = 1;
          }
         } else {
          $173 = 2;
         }
        } else {
         $173 = 2;
        }
        HEAP32[$7>>2] = $173;
        $174 = (($pMb$021) + 38|0);
        $175 = HEAP16[$174>>1]|0;
        $176 = ($175<<16>>16)==(0);
        if ($176) {
         $177 = (($70) + 58|0);
         $178 = HEAP16[$177>>1]|0;
         $179 = ($178<<16>>16)==(0);
         if ($179) {
          $180 = (($pMb$021) + 120|0);
          $181 = HEAP32[$180>>2]|0;
          $182 = (($70) + 128|0);
          $183 = HEAP32[$182>>2]|0;
          $184 = ($181|0)==($183|0);
          if ($184) {
           $185 = (($pMb$021) + 152|0);
           $186 = HEAP16[$185>>1]|0;
           $187 = $186 << 16 >> 16;
           $188 = (($70) + 192|0);
           $189 = HEAP16[$188>>1]|0;
           $190 = $189 << 16 >> 16;
           $191 = (($187) - ($190))|0;
           $ispos$i328$i = ($191|0)>(-1);
           $neg$i329$i = (0 - ($191))|0;
           $192 = $ispos$i328$i ? $191 : $neg$i329$i;
           $193 = ($192|0)>(3);
           if ($193) {
            $203 = 1;
           } else {
            $194 = (($pMb$021) + 154|0);
            $195 = HEAP16[$194>>1]|0;
            $196 = $195 << 16 >> 16;
            $197 = (($70) + 194|0);
            $198 = HEAP16[$197>>1]|0;
            $199 = $198 << 16 >> 16;
            $200 = (($196) - ($199))|0;
            $ispos1$i330$i = ($200|0)>(-1);
            $neg2$i331$i = (0 - ($200))|0;
            $201 = $ispos1$i330$i ? $200 : $neg2$i331$i;
            $202 = ($201|0)>(3);
            $$$i332$i = $202&1;
            $203 = $$$i332$i;
           }
          } else {
           $203 = 1;
          }
         } else {
          $203 = 2;
         }
        } else {
         $203 = 2;
        }
        HEAP32[$6>>2] = $203;
        $204 = $143 | $113;
        $205 = $204 | $173;
        $206 = $205 | $203;
        $not$$i = ($206|0)!=(0);
        $$362$i = $not$$i&1;
        $nonZeroBs$0$i = $$362$i;
        break;
       }
      }
      HEAP32[$6>>2] = 4;
      HEAP32[$7>>2] = 4;
      HEAP32[$8>>2] = 4;
      HEAP32[$bS>>2] = 4;
      $nonZeroBs$0$i = 1;
     }
    } while(0);
    $207 = $flags$1$i$ph & 4;
    $208 = ($207|0)==(0);
    do {
     if ($208) {
      HEAP32[$9>>2] = 0;
      HEAP32[$10>>2] = 0;
      HEAP32[$11>>2] = 0;
      HEAP32[$12>>2] = 0;
      $$pre$i4 = HEAP32[$pMb$021>>2]|0;
      $337 = $$pre$i4;$nonZeroBs$1$i = $nonZeroBs$0$i;
     } else {
      $209 = HEAP32[$pMb$021>>2]|0;
      $210 = ($209>>>0)>(5);
      if (!($210)) {
       $211 = HEAP32[$62>>2]|0;
       $212 = ($211>>>0)>(5);
       if (!($212)) {
        $213 = (($pMb$021) + 28|0);
        $214 = HEAP16[$213>>1]|0;
        $215 = ($214<<16>>16)==(0);
        if ($215) {
         $216 = (($62) + 38|0);
         $217 = HEAP16[$216>>1]|0;
         $218 = ($217<<16>>16)==(0);
         if ($218) {
          $219 = (($pMb$021) + 116|0);
          $220 = HEAP32[$219>>2]|0;
          $221 = (($62) + 120|0);
          $222 = HEAP32[$221>>2]|0;
          $223 = ($220|0)==($222|0);
          if ($223) {
           $224 = (($pMb$021) + 132|0);
           $225 = HEAP16[$224>>1]|0;
           $226 = $225 << 16 >> 16;
           $227 = (($62) + 152|0);
           $228 = HEAP16[$227>>1]|0;
           $229 = $228 << 16 >> 16;
           $230 = (($226) - ($229))|0;
           $ispos$i321$i = ($230|0)>(-1);
           $neg$i322$i = (0 - ($230))|0;
           $231 = $ispos$i321$i ? $230 : $neg$i322$i;
           $232 = ($231|0)>(3);
           if ($232) {
            $242 = 1;
           } else {
            $233 = (($pMb$021) + 134|0);
            $234 = HEAP16[$233>>1]|0;
            $235 = $234 << 16 >> 16;
            $236 = (($62) + 154|0);
            $237 = HEAP16[$236>>1]|0;
            $238 = $237 << 16 >> 16;
            $239 = (($235) - ($238))|0;
            $ispos1$i323$i = ($239|0)>(-1);
            $neg2$i324$i = (0 - ($239))|0;
            $240 = $ispos1$i323$i ? $239 : $neg2$i324$i;
            $241 = ($240|0)>(3);
            $$$i325$i = $241&1;
            $242 = $$$i325$i;
           }
          } else {
           $242 = 1;
          }
         } else {
          $242 = 2;
         }
        } else {
         $242 = 2;
        }
        HEAP32[$12>>2] = $242;
        $243 = (($pMb$021) + 32|0);
        $244 = HEAP16[$243>>1]|0;
        $245 = ($244<<16>>16)==(0);
        if ($245) {
         $246 = (($62) + 42|0);
         $247 = HEAP16[$246>>1]|0;
         $248 = ($247<<16>>16)==(0);
         if ($248) {
          $249 = (($pMb$021) + 116|0);
          $250 = HEAP32[$249>>2]|0;
          $251 = (($62) + 120|0);
          $252 = HEAP32[$251>>2]|0;
          $253 = ($250|0)==($252|0);
          if ($253) {
           $254 = (($pMb$021) + 140|0);
           $255 = HEAP16[$254>>1]|0;
           $256 = $255 << 16 >> 16;
           $257 = (($62) + 160|0);
           $258 = HEAP16[$257>>1]|0;
           $259 = $258 << 16 >> 16;
           $260 = (($256) - ($259))|0;
           $ispos$i314$i = ($260|0)>(-1);
           $neg$i315$i = (0 - ($260))|0;
           $261 = $ispos$i314$i ? $260 : $neg$i315$i;
           $262 = ($261|0)>(3);
           if ($262) {
            $272 = 1;
           } else {
            $263 = (($pMb$021) + 142|0);
            $264 = HEAP16[$263>>1]|0;
            $265 = $264 << 16 >> 16;
            $266 = (($62) + 162|0);
            $267 = HEAP16[$266>>1]|0;
            $268 = $267 << 16 >> 16;
            $269 = (($265) - ($268))|0;
            $ispos1$i316$i = ($269|0)>(-1);
            $neg2$i317$i = (0 - ($269))|0;
            $270 = $ispos1$i316$i ? $269 : $neg2$i317$i;
            $271 = ($270|0)>(3);
            $$$i318$i = $271&1;
            $272 = $$$i318$i;
           }
          } else {
           $272 = 1;
          }
         } else {
          $272 = 2;
         }
        } else {
         $272 = 2;
        }
        HEAP32[$11>>2] = $272;
        $273 = (($pMb$021) + 44|0);
        $274 = HEAP16[$273>>1]|0;
        $275 = ($274<<16>>16)==(0);
        if ($275) {
         $276 = (($62) + 54|0);
         $277 = HEAP16[$276>>1]|0;
         $278 = ($277<<16>>16)==(0);
         if ($278) {
          $279 = (($pMb$021) + 124|0);
          $280 = HEAP32[$279>>2]|0;
          $281 = (($62) + 128|0);
          $282 = HEAP32[$281>>2]|0;
          $283 = ($280|0)==($282|0);
          if ($283) {
           $284 = (($pMb$021) + 164|0);
           $285 = HEAP16[$284>>1]|0;
           $286 = $285 << 16 >> 16;
           $287 = (($62) + 184|0);
           $288 = HEAP16[$287>>1]|0;
           $289 = $288 << 16 >> 16;
           $290 = (($286) - ($289))|0;
           $ispos$i307$i = ($290|0)>(-1);
           $neg$i308$i = (0 - ($290))|0;
           $291 = $ispos$i307$i ? $290 : $neg$i308$i;
           $292 = ($291|0)>(3);
           if ($292) {
            $302 = 1;
           } else {
            $293 = (($pMb$021) + 166|0);
            $294 = HEAP16[$293>>1]|0;
            $295 = $294 << 16 >> 16;
            $296 = (($62) + 186|0);
            $297 = HEAP16[$296>>1]|0;
            $298 = $297 << 16 >> 16;
            $299 = (($295) - ($298))|0;
            $ispos1$i309$i = ($299|0)>(-1);
            $neg2$i310$i = (0 - ($299))|0;
            $300 = $ispos1$i309$i ? $299 : $neg2$i310$i;
            $301 = ($300|0)>(3);
            $$$i311$i = $301&1;
            $302 = $$$i311$i;
           }
          } else {
           $302 = 1;
          }
         } else {
          $302 = 2;
         }
        } else {
         $302 = 2;
        }
        HEAP32[$10>>2] = $302;
        $303 = (($pMb$021) + 48|0);
        $304 = HEAP16[$303>>1]|0;
        $305 = ($304<<16>>16)==(0);
        if ($305) {
         $306 = (($62) + 58|0);
         $307 = HEAP16[$306>>1]|0;
         $308 = ($307<<16>>16)==(0);
         if ($308) {
          $309 = (($pMb$021) + 124|0);
          $310 = HEAP32[$309>>2]|0;
          $311 = (($62) + 128|0);
          $312 = HEAP32[$311>>2]|0;
          $313 = ($310|0)==($312|0);
          if ($313) {
           $314 = (($pMb$021) + 172|0);
           $315 = HEAP16[$314>>1]|0;
           $316 = $315 << 16 >> 16;
           $317 = (($62) + 192|0);
           $318 = HEAP16[$317>>1]|0;
           $319 = $318 << 16 >> 16;
           $320 = (($316) - ($319))|0;
           $ispos$i300$i = ($320|0)>(-1);
           $neg$i301$i = (0 - ($320))|0;
           $321 = $ispos$i300$i ? $320 : $neg$i301$i;
           $322 = ($321|0)>(3);
           if ($322) {
            $332 = 1;
           } else {
            $323 = (($pMb$021) + 174|0);
            $324 = HEAP16[$323>>1]|0;
            $325 = $324 << 16 >> 16;
            $326 = (($62) + 194|0);
            $327 = HEAP16[$326>>1]|0;
            $328 = $327 << 16 >> 16;
            $329 = (($325) - ($328))|0;
            $ispos1$i302$i = ($329|0)>(-1);
            $neg2$i303$i = (0 - ($329))|0;
            $330 = $ispos1$i302$i ? $329 : $neg2$i303$i;
            $331 = ($330|0)>(3);
            $$$i304$i = $331&1;
            $332 = $$$i304$i;
           }
          } else {
           $332 = 1;
          }
         } else {
          $332 = 2;
         }
        } else {
         $332 = 2;
        }
        HEAP32[$9>>2] = $332;
        $333 = ($nonZeroBs$0$i|0)==(0);
        if (!($333)) {
         $337 = $209;$nonZeroBs$1$i = $nonZeroBs$0$i;
         break;
        }
        $334 = $272 | $242;
        $335 = $334 | $302;
        $336 = $335 | $332;
        $not$364$i = ($336|0)!=(0);
        $$363$i = $not$364$i&1;
        $337 = $209;$nonZeroBs$1$i = $$363$i;
        break;
       }
      }
      HEAP32[$9>>2] = 4;
      HEAP32[$10>>2] = 4;
      HEAP32[$11>>2] = 4;
      HEAP32[$12>>2] = 4;
      $337 = $209;$nonZeroBs$1$i = 1;
     }
    } while(0);
    $338 = ($337>>>0)>(5);
    if ($338) {
     HEAP32[$13>>2] = 3;
     HEAP32[$14>>2] = 3;
     HEAP32[$15>>2] = 3;
     HEAP32[$16>>2] = 3;
     HEAP32[$17>>2] = 3;
     HEAP32[$18>>2] = 3;
     HEAP32[$19>>2] = 3;
     HEAP32[$20>>2] = 3;
     HEAP32[$21>>2] = 3;
     HEAP32[$22>>2] = 3;
     HEAP32[$23>>2] = 3;
     HEAP32[$24>>2] = 3;
     HEAP32[$25>>2] = 3;
     HEAP32[$26>>2] = 3;
     HEAP32[$27>>2] = 3;
     HEAP32[$28>>2] = 3;
     HEAP32[$29>>2] = 3;
     HEAP32[$30>>2] = 3;
     HEAP32[$31>>2] = 3;
     HEAP32[$32>>2] = 3;
     HEAP32[$33>>2] = 3;
     HEAP32[$34>>2] = 3;
     HEAP32[$35>>2] = 3;
     HEAP32[$36>>2] = 3;
    } else {
     $339 = (_h264bsdNumMbPart($337)|0);
     $340 = ($339|0)==(1);
     do {
      if ($340) {
       _GetBoundaryStrengthsA($pMb$021,$bS);
      } else {
       $341 = HEAP32[$pMb$021>>2]|0;
       if ((($341|0) == 2)) {
        $342 = (($pMb$021) + 28|0);
        $343 = (($pMb$021) + 32|0);
        $344 = HEAP16[$343>>1]|0;
        $345 = ($344<<16>>16)==(0);
        if ($345) {
         $346 = HEAP16[$342>>1]|0;
         $347 = ($346<<16>>16)!=(0);
         $phitmp20$i = $347 ? 2 : 0;
         $348 = $phitmp20$i;
        } else {
         $348 = 2;
        }
        HEAP32[$24>>2] = $348;
        $349 = (($pMb$021) + 34|0);
        $350 = HEAP16[$349>>1]|0;
        $351 = ($350<<16>>16)==(0);
        if ($351) {
         $352 = (($pMb$021) + 30|0);
         $353 = HEAP16[$352>>1]|0;
         $354 = ($353<<16>>16)!=(0);
         $phitmp21$i = $354 ? 2 : 0;
         $355 = $phitmp21$i;
        } else {
         $355 = 2;
        }
        HEAP32[$23>>2] = $355;
        $356 = (($pMb$021) + 40|0);
        $357 = HEAP16[$356>>1]|0;
        $358 = ($357<<16>>16)==(0);
        if ($358) {
         $359 = (($pMb$021) + 36|0);
         $360 = HEAP16[$359>>1]|0;
         $361 = ($360<<16>>16)!=(0);
         $phitmp22$i = $361 ? 2 : 0;
         $362 = $phitmp22$i;
        } else {
         $362 = 2;
        }
        HEAP32[$22>>2] = $362;
        $363 = (($pMb$021) + 42|0);
        $364 = HEAP16[$363>>1]|0;
        $365 = ($364<<16>>16)==(0);
        if ($365) {
         $366 = (($pMb$021) + 38|0);
         $367 = HEAP16[$366>>1]|0;
         $368 = ($367<<16>>16)!=(0);
         $phitmp23$i = $368 ? 2 : 0;
         $369 = $phitmp23$i;
        } else {
         $369 = 2;
        }
        HEAP32[$21>>2] = $369;
        $370 = (($pMb$021) + 48|0);
        $371 = HEAP16[$370>>1]|0;
        $372 = ($371<<16>>16)==(0);
        if ($372) {
         $373 = (($pMb$021) + 44|0);
         $374 = HEAP16[$373>>1]|0;
         $375 = ($374<<16>>16)!=(0);
         $phitmp24$i = $375 ? 2 : 0;
         $376 = $phitmp24$i;
        } else {
         $376 = 2;
        }
        HEAP32[$16>>2] = $376;
        $377 = (($pMb$021) + 50|0);
        $378 = HEAP16[$377>>1]|0;
        $379 = ($378<<16>>16)==(0);
        if ($379) {
         $380 = (($pMb$021) + 46|0);
         $381 = HEAP16[$380>>1]|0;
         $382 = ($381<<16>>16)!=(0);
         $phitmp25$i = $382 ? 2 : 0;
         $383 = $phitmp25$i;
        } else {
         $383 = 2;
        }
        HEAP32[$15>>2] = $383;
        $384 = (($pMb$021) + 56|0);
        $385 = HEAP16[$384>>1]|0;
        $386 = ($385<<16>>16)==(0);
        if ($386) {
         $387 = (($pMb$021) + 52|0);
         $388 = HEAP16[$387>>1]|0;
         $389 = ($388<<16>>16)!=(0);
         $phitmp26$i = $389 ? 2 : 0;
         $390 = $phitmp26$i;
        } else {
         $390 = 2;
        }
        HEAP32[$14>>2] = $390;
        $391 = (($pMb$021) + 58|0);
        $392 = HEAP16[$391>>1]|0;
        $393 = ($392<<16>>16)==(0);
        if ($393) {
         $394 = (($pMb$021) + 54|0);
         $395 = HEAP16[$394>>1]|0;
         $396 = ($395<<16>>16)!=(0);
         $phitmp27$i = $396 ? 2 : 0;
         $397 = $phitmp27$i;
        } else {
         $397 = 2;
        }
        HEAP32[$13>>2] = $397;
        $398 = (($pMb$021) + 44|0);
        $399 = HEAP16[$398>>1]|0;
        $400 = (($pMb$021) + 166|0);
        $401 = HEAP16[$400>>1]|0;
        $402 = $401 << 16 >> 16;
        $403 = (($pMb$021) + 142|0);
        $404 = HEAP16[$403>>1]|0;
        $405 = $404 << 16 >> 16;
        $406 = $399 | $344;
        $407 = ($406<<16>>16)==(0);
        do {
         if ($407) {
          $408 = (($pMb$021) + 140|0);
          $409 = (($pMb$021) + 164|0);
          $410 = HEAP16[$408>>1]|0;
          $411 = HEAP16[$409>>1]|0;
          $412 = $410 << 16 >> 16;
          $413 = $411 << 16 >> 16;
          $414 = (($413) - ($412))|0;
          $ispos$i285$i = ($414|0)>(-1);
          $neg$i286$i = (0 - ($414))|0;
          $415 = $ispos$i285$i ? $414 : $neg$i286$i;
          $416 = ($415|0)>(3);
          if ($416) {
           $424 = 1;
           break;
          }
          $417 = (($402) - ($405))|0;
          $ispos2$i287$i = ($417|0)>(-1);
          $neg3$i288$i = (0 - ($417))|0;
          $418 = $ispos2$i287$i ? $417 : $neg3$i288$i;
          $419 = ($418|0)>(3);
          if ($419) {
           $424 = 1;
           break;
          }
          $420 = (($pMb$021) + 124|0);
          $421 = HEAP32[$420>>2]|0;
          $422 = (($pMb$021) + 116|0);
          $423 = HEAP32[$422>>2]|0;
          $not$$i289$i = ($421|0)!=($423|0);
          $$$i290$i = $not$$i289$i&1;
          $424 = $$$i290$i;
         } else {
          $424 = 2;
         }
        } while(0);
        HEAP32[$20>>2] = $424;
        $425 = (($pMb$021) + 46|0);
        $426 = HEAP16[$425>>1]|0;
        $427 = (($pMb$021) + 170|0);
        $428 = HEAP16[$427>>1]|0;
        $429 = $428 << 16 >> 16;
        $430 = (($pMb$021) + 146|0);
        $431 = HEAP16[$430>>1]|0;
        $432 = $431 << 16 >> 16;
        $433 = $426 | $350;
        $434 = ($433<<16>>16)==(0);
        do {
         if ($434) {
          $435 = (($pMb$021) + 144|0);
          $436 = (($pMb$021) + 168|0);
          $437 = HEAP16[$435>>1]|0;
          $438 = HEAP16[$436>>1]|0;
          $439 = $437 << 16 >> 16;
          $440 = $438 << 16 >> 16;
          $441 = (($440) - ($439))|0;
          $ispos$i277$i = ($441|0)>(-1);
          $neg$i278$i = (0 - ($441))|0;
          $442 = $ispos$i277$i ? $441 : $neg$i278$i;
          $443 = ($442|0)>(3);
          if ($443) {
           $451 = 1;
           break;
          }
          $444 = (($429) - ($432))|0;
          $ispos2$i279$i = ($444|0)>(-1);
          $neg3$i280$i = (0 - ($444))|0;
          $445 = $ispos2$i279$i ? $444 : $neg3$i280$i;
          $446 = ($445|0)>(3);
          if ($446) {
           $451 = 1;
           break;
          }
          $447 = (($pMb$021) + 124|0);
          $448 = HEAP32[$447>>2]|0;
          $449 = (($pMb$021) + 116|0);
          $450 = HEAP32[$449>>2]|0;
          $not$$i281$i = ($448|0)!=($450|0);
          $$$i282$i = $not$$i281$i&1;
          $451 = $$$i282$i;
         } else {
          $451 = 2;
         }
        } while(0);
        HEAP32[$19>>2] = $451;
        $452 = (($pMb$021) + 52|0);
        $453 = HEAP16[$452>>1]|0;
        $454 = (($pMb$021) + 182|0);
        $455 = HEAP16[$454>>1]|0;
        $456 = $455 << 16 >> 16;
        $457 = (($pMb$021) + 158|0);
        $458 = HEAP16[$457>>1]|0;
        $459 = $458 << 16 >> 16;
        $460 = $453 | $357;
        $461 = ($460<<16>>16)==(0);
        do {
         if ($461) {
          $462 = (($pMb$021) + 156|0);
          $463 = (($pMb$021) + 180|0);
          $464 = HEAP16[$462>>1]|0;
          $465 = HEAP16[$463>>1]|0;
          $466 = $464 << 16 >> 16;
          $467 = $465 << 16 >> 16;
          $468 = (($467) - ($466))|0;
          $ispos$i269$i = ($468|0)>(-1);
          $neg$i270$i = (0 - ($468))|0;
          $469 = $ispos$i269$i ? $468 : $neg$i270$i;
          $470 = ($469|0)>(3);
          if ($470) {
           $478 = 1;
           break;
          }
          $471 = (($456) - ($459))|0;
          $ispos2$i271$i = ($471|0)>(-1);
          $neg3$i272$i = (0 - ($471))|0;
          $472 = $ispos2$i271$i ? $471 : $neg3$i272$i;
          $473 = ($472|0)>(3);
          if ($473) {
           $478 = 1;
           break;
          }
          $474 = (($pMb$021) + 128|0);
          $475 = HEAP32[$474>>2]|0;
          $476 = (($pMb$021) + 120|0);
          $477 = HEAP32[$476>>2]|0;
          $not$$i273$i = ($475|0)!=($477|0);
          $$$i274$i = $not$$i273$i&1;
          $478 = $$$i274$i;
         } else {
          $478 = 2;
         }
        } while(0);
        HEAP32[$18>>2] = $478;
        $479 = (($pMb$021) + 54|0);
        $480 = HEAP16[$479>>1]|0;
        $481 = (($pMb$021) + 186|0);
        $482 = HEAP16[$481>>1]|0;
        $483 = $482 << 16 >> 16;
        $484 = (($pMb$021) + 162|0);
        $485 = HEAP16[$484>>1]|0;
        $486 = $485 << 16 >> 16;
        $487 = $480 | $364;
        $488 = ($487<<16>>16)==(0);
        do {
         if ($488) {
          $489 = (($pMb$021) + 160|0);
          $490 = (($pMb$021) + 184|0);
          $491 = HEAP16[$489>>1]|0;
          $492 = HEAP16[$490>>1]|0;
          $493 = $491 << 16 >> 16;
          $494 = $492 << 16 >> 16;
          $495 = (($494) - ($493))|0;
          $ispos$i261$i = ($495|0)>(-1);
          $neg$i262$i = (0 - ($495))|0;
          $496 = $ispos$i261$i ? $495 : $neg$i262$i;
          $497 = ($496|0)>(3);
          if ($497) {
           $505 = 1;
           break;
          }
          $498 = (($483) - ($486))|0;
          $ispos2$i263$i = ($498|0)>(-1);
          $neg3$i264$i = (0 - ($498))|0;
          $499 = $ispos2$i263$i ? $498 : $neg3$i264$i;
          $500 = ($499|0)>(3);
          if ($500) {
           $505 = 1;
           break;
          }
          $501 = (($pMb$021) + 128|0);
          $502 = HEAP32[$501>>2]|0;
          $503 = (($pMb$021) + 120|0);
          $504 = HEAP32[$503>>2]|0;
          $not$$i265$i = ($502|0)!=($504|0);
          $$$i266$i = $not$$i265$i&1;
          $505 = $$$i266$i;
         } else {
          $505 = 2;
         }
        } while(0);
        HEAP32[$17>>2] = $505;
        $506 = (($pMb$021) + 30|0);
        $507 = HEAP16[$506>>1]|0;
        $508 = ($507<<16>>16)==(0);
        if ($508) {
         $509 = HEAP16[$342>>1]|0;
         $510 = ($509<<16>>16)!=(0);
         $phitmp28$i = $510 ? 2 : 0;
         $511 = $phitmp28$i;
        } else {
         $511 = 2;
        }
        HEAP32[$36>>2] = $511;
        $512 = (($pMb$021) + 36|0);
        $513 = HEAP16[$512>>1]|0;
        $514 = ($513<<16>>16)==(0);
        if ($514) {
         $515 = ($507<<16>>16)!=(0);
         $phitmp29$i = $515 ? 2 : 0;
         $516 = $phitmp29$i;
        } else {
         $516 = 2;
        }
        HEAP32[$35>>2] = $516;
        $517 = (($pMb$021) + 38|0);
        $518 = HEAP16[$517>>1]|0;
        $519 = ($518<<16>>16)==(0);
        if ($519) {
         $520 = ($513<<16>>16)!=(0);
         $phitmp30$i = $520 ? 2 : 0;
         $521 = $phitmp30$i;
        } else {
         $521 = 2;
        }
        HEAP32[$34>>2] = $521;
        if ($351) {
         $522 = ($344<<16>>16)!=(0);
         $phitmp31$i = $522 ? 2 : 0;
         $523 = $phitmp31$i;
        } else {
         $523 = 2;
        }
        HEAP32[$33>>2] = $523;
        if ($358) {
         $524 = ($350<<16>>16)!=(0);
         $phitmp32$i = $524 ? 2 : 0;
         $525 = $phitmp32$i;
        } else {
         $525 = 2;
        }
        HEAP32[$32>>2] = $525;
        if ($365) {
         $526 = ($357<<16>>16)!=(0);
         $phitmp33$i = $526 ? 2 : 0;
         $527 = $phitmp33$i;
        } else {
         $527 = 2;
        }
        HEAP32[$31>>2] = $527;
        $528 = ($426<<16>>16)==(0);
        if ($528) {
         $529 = ($399<<16>>16)!=(0);
         $phitmp34$i = $529 ? 2 : 0;
         $530 = $phitmp34$i;
        } else {
         $530 = 2;
        }
        HEAP32[$30>>2] = $530;
        $531 = ($453<<16>>16)==(0);
        if ($531) {
         $532 = ($426<<16>>16)!=(0);
         $phitmp35$i = $532 ? 2 : 0;
         $533 = $phitmp35$i;
        } else {
         $533 = 2;
        }
        HEAP32[$29>>2] = $533;
        $534 = ($480<<16>>16)==(0);
        if ($534) {
         $535 = ($453<<16>>16)!=(0);
         $phitmp36$i = $535 ? 2 : 0;
         $536 = $phitmp36$i;
        } else {
         $536 = 2;
        }
        HEAP32[$28>>2] = $536;
        if ($379) {
         $537 = ($371<<16>>16)!=(0);
         $phitmp37$i = $537 ? 2 : 0;
         $538 = $phitmp37$i;
        } else {
         $538 = 2;
        }
        HEAP32[$27>>2] = $538;
        if ($386) {
         $539 = ($378<<16>>16)!=(0);
         $phitmp38$i = $539 ? 2 : 0;
         $540 = $phitmp38$i;
        } else {
         $540 = 2;
        }
        HEAP32[$26>>2] = $540;
        if ($393) {
         $541 = ($385<<16>>16)!=(0);
         $phitmp39$i = $541 ? 2 : 0;
         $542 = $phitmp39$i;
        } else {
         $542 = 2;
        }
        HEAP32[$25>>2] = $542;
        break;
       } else if ((($341|0) == 3)) {
        $543 = (($pMb$021) + 28|0);
        $544 = (($pMb$021) + 32|0);
        $545 = HEAP16[$544>>1]|0;
        $546 = ($545<<16>>16)==(0);
        if ($546) {
         $547 = HEAP16[$543>>1]|0;
         $548 = ($547<<16>>16)!=(0);
         $phitmp$i = $548 ? 2 : 0;
         $549 = $phitmp$i;
        } else {
         $549 = 2;
        }
        HEAP32[$24>>2] = $549;
        $550 = (($pMb$021) + 34|0);
        $551 = HEAP16[$550>>1]|0;
        $552 = ($551<<16>>16)==(0);
        if ($552) {
         $553 = (($pMb$021) + 30|0);
         $554 = HEAP16[$553>>1]|0;
         $555 = ($554<<16>>16)!=(0);
         $phitmp1$i = $555 ? 2 : 0;
         $556 = $phitmp1$i;
        } else {
         $556 = 2;
        }
        HEAP32[$23>>2] = $556;
        $557 = (($pMb$021) + 40|0);
        $558 = HEAP16[$557>>1]|0;
        $559 = ($558<<16>>16)==(0);
        if ($559) {
         $560 = (($pMb$021) + 36|0);
         $561 = HEAP16[$560>>1]|0;
         $562 = ($561<<16>>16)!=(0);
         $phitmp2$i = $562 ? 2 : 0;
         $563 = $phitmp2$i;
        } else {
         $563 = 2;
        }
        HEAP32[$22>>2] = $563;
        $564 = (($pMb$021) + 42|0);
        $565 = HEAP16[$564>>1]|0;
        $566 = ($565<<16>>16)==(0);
        if ($566) {
         $567 = (($pMb$021) + 38|0);
         $568 = HEAP16[$567>>1]|0;
         $569 = ($568<<16>>16)!=(0);
         $phitmp3$i = $569 ? 2 : 0;
         $570 = $phitmp3$i;
        } else {
         $570 = 2;
        }
        HEAP32[$21>>2] = $570;
        $571 = (($pMb$021) + 44|0);
        $572 = HEAP16[$571>>1]|0;
        $573 = ($572<<16>>16)==(0);
        if ($573) {
         $574 = ($545<<16>>16)!=(0);
         $phitmp4$i = $574 ? 2 : 0;
         $575 = $phitmp4$i;
        } else {
         $575 = 2;
        }
        HEAP32[$20>>2] = $575;
        $576 = (($pMb$021) + 46|0);
        $577 = HEAP16[$576>>1]|0;
        $578 = ($577<<16>>16)==(0);
        if ($578) {
         $579 = ($551<<16>>16)!=(0);
         $phitmp5$i = $579 ? 2 : 0;
         $580 = $phitmp5$i;
        } else {
         $580 = 2;
        }
        HEAP32[$19>>2] = $580;
        $581 = (($pMb$021) + 52|0);
        $582 = HEAP16[$581>>1]|0;
        $583 = ($582<<16>>16)==(0);
        if ($583) {
         $584 = ($558<<16>>16)!=(0);
         $phitmp6$i = $584 ? 2 : 0;
         $585 = $phitmp6$i;
        } else {
         $585 = 2;
        }
        HEAP32[$18>>2] = $585;
        $586 = (($pMb$021) + 54|0);
        $587 = HEAP16[$586>>1]|0;
        $588 = ($587<<16>>16)==(0);
        if ($588) {
         $589 = ($565<<16>>16)!=(0);
         $phitmp7$i = $589 ? 2 : 0;
         $590 = $phitmp7$i;
        } else {
         $590 = 2;
        }
        HEAP32[$17>>2] = $590;
        $591 = (($pMb$021) + 48|0);
        $592 = HEAP16[$591>>1]|0;
        $593 = ($592<<16>>16)==(0);
        if ($593) {
         $594 = ($572<<16>>16)!=(0);
         $phitmp8$i = $594 ? 2 : 0;
         $595 = $phitmp8$i;
        } else {
         $595 = 2;
        }
        HEAP32[$16>>2] = $595;
        $596 = (($pMb$021) + 50|0);
        $597 = HEAP16[$596>>1]|0;
        $598 = ($597<<16>>16)==(0);
        if ($598) {
         $599 = ($577<<16>>16)!=(0);
         $phitmp9$i = $599 ? 2 : 0;
         $600 = $phitmp9$i;
        } else {
         $600 = 2;
        }
        HEAP32[$15>>2] = $600;
        $601 = (($pMb$021) + 56|0);
        $602 = HEAP16[$601>>1]|0;
        $603 = ($602<<16>>16)==(0);
        if ($603) {
         $604 = ($582<<16>>16)!=(0);
         $phitmp10$i = $604 ? 2 : 0;
         $605 = $phitmp10$i;
        } else {
         $605 = 2;
        }
        HEAP32[$14>>2] = $605;
        $606 = (($pMb$021) + 58|0);
        $607 = HEAP16[$606>>1]|0;
        $608 = ($607<<16>>16)==(0);
        if ($608) {
         $609 = ($587<<16>>16)!=(0);
         $phitmp11$i = $609 ? 2 : 0;
         $610 = $phitmp11$i;
        } else {
         $610 = 2;
        }
        HEAP32[$13>>2] = $610;
        $611 = (($pMb$021) + 30|0);
        $612 = HEAP16[$611>>1]|0;
        $613 = ($612<<16>>16)==(0);
        if ($613) {
         $614 = HEAP16[$543>>1]|0;
         $615 = ($614<<16>>16)!=(0);
         $phitmp12$i = $615 ? 2 : 0;
         $616 = $phitmp12$i;
        } else {
         $616 = 2;
        }
        HEAP32[$36>>2] = $616;
        $617 = (($pMb$021) + 38|0);
        $618 = HEAP16[$617>>1]|0;
        $619 = ($618<<16>>16)==(0);
        if ($619) {
         $620 = (($pMb$021) + 36|0);
         $621 = HEAP16[$620>>1]|0;
         $622 = ($621<<16>>16)!=(0);
         $phitmp13$i = $622 ? 2 : 0;
         $623 = $phitmp13$i;
        } else {
         $623 = 2;
        }
        HEAP32[$34>>2] = $623;
        if ($552) {
         $624 = ($545<<16>>16)!=(0);
         $phitmp14$i = $624 ? 2 : 0;
         $625 = $phitmp14$i;
        } else {
         $625 = 2;
        }
        HEAP32[$33>>2] = $625;
        if ($566) {
         $626 = ($558<<16>>16)!=(0);
         $phitmp15$i = $626 ? 2 : 0;
         $627 = $phitmp15$i;
        } else {
         $627 = 2;
        }
        HEAP32[$31>>2] = $627;
        if ($578) {
         $628 = ($572<<16>>16)!=(0);
         $phitmp16$i = $628 ? 2 : 0;
         $629 = $phitmp16$i;
        } else {
         $629 = 2;
        }
        HEAP32[$30>>2] = $629;
        if ($588) {
         $630 = ($582<<16>>16)!=(0);
         $phitmp17$i = $630 ? 2 : 0;
         $631 = $phitmp17$i;
        } else {
         $631 = 2;
        }
        HEAP32[$28>>2] = $631;
        if ($598) {
         $632 = ($592<<16>>16)!=(0);
         $phitmp18$i = $632 ? 2 : 0;
         $633 = $phitmp18$i;
        } else {
         $633 = 2;
        }
        HEAP32[$27>>2] = $633;
        if ($608) {
         $634 = ($602<<16>>16)!=(0);
         $phitmp19$i = $634 ? 2 : 0;
         $635 = $phitmp19$i;
        } else {
         $635 = 2;
        }
        HEAP32[$25>>2] = $635;
        $636 = (($pMb$021) + 36|0);
        $637 = HEAP16[$636>>1]|0;
        $638 = (($pMb$021) + 150|0);
        $639 = HEAP16[$638>>1]|0;
        $640 = $639 << 16 >> 16;
        $641 = (($pMb$021) + 138|0);
        $642 = HEAP16[$641>>1]|0;
        $643 = $642 << 16 >> 16;
        $644 = $637 | $612;
        $645 = ($644<<16>>16)==(0);
        do {
         if ($645) {
          $646 = (($pMb$021) + 136|0);
          $647 = (($pMb$021) + 148|0);
          $648 = HEAP16[$646>>1]|0;
          $649 = HEAP16[$647>>1]|0;
          $650 = $648 << 16 >> 16;
          $651 = $649 << 16 >> 16;
          $652 = (($651) - ($650))|0;
          $ispos$i253$i = ($652|0)>(-1);
          $neg$i254$i = (0 - ($652))|0;
          $653 = $ispos$i253$i ? $652 : $neg$i254$i;
          $654 = ($653|0)>(3);
          if ($654) {
           $662 = 1;
           break;
          }
          $655 = (($640) - ($643))|0;
          $ispos2$i255$i = ($655|0)>(-1);
          $neg3$i256$i = (0 - ($655))|0;
          $656 = $ispos2$i255$i ? $655 : $neg3$i256$i;
          $657 = ($656|0)>(3);
          if ($657) {
           $662 = 1;
           break;
          }
          $658 = (($pMb$021) + 120|0);
          $659 = HEAP32[$658>>2]|0;
          $660 = (($pMb$021) + 116|0);
          $661 = HEAP32[$660>>2]|0;
          $not$$i257$i = ($659|0)!=($661|0);
          $$$i258$i = $not$$i257$i&1;
          $662 = $$$i258$i;
         } else {
          $662 = 2;
         }
        } while(0);
        HEAP32[$35>>2] = $662;
        $663 = (($pMb$021) + 158|0);
        $664 = HEAP16[$663>>1]|0;
        $665 = $664 << 16 >> 16;
        $666 = (($pMb$021) + 146|0);
        $667 = HEAP16[$666>>1]|0;
        $668 = $667 << 16 >> 16;
        $669 = $558 | $551;
        $670 = ($669<<16>>16)==(0);
        do {
         if ($670) {
          $671 = (($pMb$021) + 144|0);
          $672 = (($pMb$021) + 156|0);
          $673 = HEAP16[$671>>1]|0;
          $674 = HEAP16[$672>>1]|0;
          $675 = $673 << 16 >> 16;
          $676 = $674 << 16 >> 16;
          $677 = (($676) - ($675))|0;
          $ispos$i245$i = ($677|0)>(-1);
          $neg$i246$i = (0 - ($677))|0;
          $678 = $ispos$i245$i ? $677 : $neg$i246$i;
          $679 = ($678|0)>(3);
          if ($679) {
           $687 = 1;
           break;
          }
          $680 = (($665) - ($668))|0;
          $ispos2$i247$i = ($680|0)>(-1);
          $neg3$i248$i = (0 - ($680))|0;
          $681 = $ispos2$i247$i ? $680 : $neg3$i248$i;
          $682 = ($681|0)>(3);
          if ($682) {
           $687 = 1;
           break;
          }
          $683 = (($pMb$021) + 120|0);
          $684 = HEAP32[$683>>2]|0;
          $685 = (($pMb$021) + 116|0);
          $686 = HEAP32[$685>>2]|0;
          $not$$i249$i = ($684|0)!=($686|0);
          $$$i250$i = $not$$i249$i&1;
          $687 = $$$i250$i;
         } else {
          $687 = 2;
         }
        } while(0);
        HEAP32[$32>>2] = $687;
        $688 = (($pMb$021) + 182|0);
        $689 = HEAP16[$688>>1]|0;
        $690 = $689 << 16 >> 16;
        $691 = (($pMb$021) + 170|0);
        $692 = HEAP16[$691>>1]|0;
        $693 = $692 << 16 >> 16;
        $694 = $582 | $577;
        $695 = ($694<<16>>16)==(0);
        do {
         if ($695) {
          $696 = (($pMb$021) + 168|0);
          $697 = (($pMb$021) + 180|0);
          $698 = HEAP16[$696>>1]|0;
          $699 = HEAP16[$697>>1]|0;
          $700 = $698 << 16 >> 16;
          $701 = $699 << 16 >> 16;
          $702 = (($701) - ($700))|0;
          $ispos$i237$i = ($702|0)>(-1);
          $neg$i238$i = (0 - ($702))|0;
          $703 = $ispos$i237$i ? $702 : $neg$i238$i;
          $704 = ($703|0)>(3);
          if ($704) {
           $712 = 1;
           break;
          }
          $705 = (($690) - ($693))|0;
          $ispos2$i239$i = ($705|0)>(-1);
          $neg3$i240$i = (0 - ($705))|0;
          $706 = $ispos2$i239$i ? $705 : $neg3$i240$i;
          $707 = ($706|0)>(3);
          if ($707) {
           $712 = 1;
           break;
          }
          $708 = (($pMb$021) + 128|0);
          $709 = HEAP32[$708>>2]|0;
          $710 = (($pMb$021) + 124|0);
          $711 = HEAP32[$710>>2]|0;
          $not$$i241$i = ($709|0)!=($711|0);
          $$$i242$i = $not$$i241$i&1;
          $712 = $$$i242$i;
         } else {
          $712 = 2;
         }
        } while(0);
        HEAP32[$29>>2] = $712;
        $713 = (($pMb$021) + 190|0);
        $714 = HEAP16[$713>>1]|0;
        $715 = $714 << 16 >> 16;
        $716 = (($pMb$021) + 178|0);
        $717 = HEAP16[$716>>1]|0;
        $718 = $717 << 16 >> 16;
        $719 = $602 | $597;
        $720 = ($719<<16>>16)==(0);
        do {
         if ($720) {
          $721 = (($pMb$021) + 176|0);
          $722 = (($pMb$021) + 188|0);
          $723 = HEAP16[$721>>1]|0;
          $724 = HEAP16[$722>>1]|0;
          $725 = $723 << 16 >> 16;
          $726 = $724 << 16 >> 16;
          $727 = (($726) - ($725))|0;
          $ispos$i229$i = ($727|0)>(-1);
          $neg$i230$i = (0 - ($727))|0;
          $728 = $ispos$i229$i ? $727 : $neg$i230$i;
          $729 = ($728|0)>(3);
          if ($729) {
           $737 = 1;
           break;
          }
          $730 = (($715) - ($718))|0;
          $ispos2$i231$i = ($730|0)>(-1);
          $neg3$i232$i = (0 - ($730))|0;
          $731 = $ispos2$i231$i ? $730 : $neg3$i232$i;
          $732 = ($731|0)>(3);
          if ($732) {
           $737 = 1;
           break;
          }
          $733 = (($pMb$021) + 128|0);
          $734 = HEAP32[$733>>2]|0;
          $735 = (($pMb$021) + 124|0);
          $736 = HEAP32[$735>>2]|0;
          $not$$i233$i = ($734|0)!=($736|0);
          $$$i234$i = $not$$i233$i&1;
          $737 = $$$i234$i;
         } else {
          $737 = 2;
         }
        } while(0);
        HEAP32[$26>>2] = $737;
        break;
       } else {
        $738 = (($pMb$021) + 32|0);
        $739 = HEAP16[$738>>1]|0;
        $740 = (($pMb$021) + 28|0);
        $741 = HEAP16[$740>>1]|0;
        $742 = (($pMb$021) + 142|0);
        $743 = HEAP16[$742>>1]|0;
        $744 = $743 << 16 >> 16;
        $745 = (($pMb$021) + 134|0);
        $746 = HEAP16[$745>>1]|0;
        $747 = $746 << 16 >> 16;
        $748 = $741 | $739;
        $749 = ($748<<16>>16)==(0);
        if ($749) {
         $750 = (($pMb$021) + 132|0);
         $751 = (($pMb$021) + 140|0);
         $752 = HEAP16[$750>>1]|0;
         $753 = HEAP16[$751>>1]|0;
         $754 = $752 << 16 >> 16;
         $755 = $753 << 16 >> 16;
         $756 = (($755) - ($754))|0;
         $ispos$i221$i = ($756|0)>(-1);
         $neg$i222$i = (0 - ($756))|0;
         $757 = $ispos$i221$i ? $756 : $neg$i222$i;
         $758 = ($757|0)>(3);
         if ($758) {
          $762 = 1;
         } else {
          $759 = (($744) - ($747))|0;
          $ispos2$i223$i = ($759|0)>(-1);
          $neg3$i224$i = (0 - ($759))|0;
          $760 = $ispos2$i223$i ? $759 : $neg3$i224$i;
          $761 = ($760|0)>(3);
          $$$i = $761&1;
          $762 = $$$i;
         }
        } else {
         $762 = 2;
        }
        HEAP32[$24>>2] = $762;
        $763 = (($pMb$021) + 34|0);
        $764 = HEAP16[$763>>1]|0;
        $765 = (($pMb$021) + 30|0);
        $766 = HEAP16[$765>>1]|0;
        $767 = (($pMb$021) + 146|0);
        $768 = HEAP16[$767>>1]|0;
        $769 = $768 << 16 >> 16;
        $770 = (($pMb$021) + 138|0);
        $771 = HEAP16[$770>>1]|0;
        $772 = $771 << 16 >> 16;
        $773 = $766 | $764;
        $774 = ($773<<16>>16)==(0);
        if ($774) {
         $775 = (($pMb$021) + 136|0);
         $776 = (($pMb$021) + 144|0);
         $777 = HEAP16[$775>>1]|0;
         $778 = HEAP16[$776>>1]|0;
         $779 = $777 << 16 >> 16;
         $780 = $778 << 16 >> 16;
         $781 = (($780) - ($779))|0;
         $ispos$i213$i = ($781|0)>(-1);
         $neg$i214$i = (0 - ($781))|0;
         $782 = $ispos$i213$i ? $781 : $neg$i214$i;
         $783 = ($782|0)>(3);
         if ($783) {
          $787 = 1;
         } else {
          $784 = (($769) - ($772))|0;
          $ispos2$i215$i = ($784|0)>(-1);
          $neg3$i216$i = (0 - ($784))|0;
          $785 = $ispos2$i215$i ? $784 : $neg3$i216$i;
          $786 = ($785|0)>(3);
          $$342$i = $786&1;
          $787 = $$342$i;
         }
        } else {
         $787 = 2;
        }
        HEAP32[$23>>2] = $787;
        $788 = (($pMb$021) + 40|0);
        $789 = HEAP16[$788>>1]|0;
        $790 = (($pMb$021) + 36|0);
        $791 = HEAP16[$790>>1]|0;
        $792 = (($pMb$021) + 158|0);
        $793 = HEAP16[$792>>1]|0;
        $794 = $793 << 16 >> 16;
        $795 = (($pMb$021) + 150|0);
        $796 = HEAP16[$795>>1]|0;
        $797 = $796 << 16 >> 16;
        $798 = $791 | $789;
        $799 = ($798<<16>>16)==(0);
        if ($799) {
         $800 = (($pMb$021) + 148|0);
         $801 = (($pMb$021) + 156|0);
         $802 = HEAP16[$800>>1]|0;
         $803 = HEAP16[$801>>1]|0;
         $804 = $802 << 16 >> 16;
         $805 = $803 << 16 >> 16;
         $806 = (($805) - ($804))|0;
         $ispos$i205$i = ($806|0)>(-1);
         $neg$i206$i = (0 - ($806))|0;
         $807 = $ispos$i205$i ? $806 : $neg$i206$i;
         $808 = ($807|0)>(3);
         if ($808) {
          $812 = 1;
         } else {
          $809 = (($794) - ($797))|0;
          $ispos2$i207$i = ($809|0)>(-1);
          $neg3$i208$i = (0 - ($809))|0;
          $810 = $ispos2$i207$i ? $809 : $neg3$i208$i;
          $811 = ($810|0)>(3);
          $$343$i = $811&1;
          $812 = $$343$i;
         }
        } else {
         $812 = 2;
        }
        HEAP32[$22>>2] = $812;
        $813 = (($pMb$021) + 42|0);
        $814 = HEAP16[$813>>1]|0;
        $815 = (($pMb$021) + 38|0);
        $816 = HEAP16[$815>>1]|0;
        $817 = (($pMb$021) + 162|0);
        $818 = HEAP16[$817>>1]|0;
        $819 = $818 << 16 >> 16;
        $820 = (($pMb$021) + 154|0);
        $821 = HEAP16[$820>>1]|0;
        $822 = $821 << 16 >> 16;
        $823 = $816 | $814;
        $824 = ($823<<16>>16)==(0);
        if ($824) {
         $825 = (($pMb$021) + 152|0);
         $826 = (($pMb$021) + 160|0);
         $827 = HEAP16[$825>>1]|0;
         $828 = HEAP16[$826>>1]|0;
         $829 = $827 << 16 >> 16;
         $830 = $828 << 16 >> 16;
         $831 = (($830) - ($829))|0;
         $ispos$i197$i = ($831|0)>(-1);
         $neg$i198$i = (0 - ($831))|0;
         $832 = $ispos$i197$i ? $831 : $neg$i198$i;
         $833 = ($832|0)>(3);
         if ($833) {
          $837 = 1;
         } else {
          $834 = (($819) - ($822))|0;
          $ispos2$i199$i = ($834|0)>(-1);
          $neg3$i200$i = (0 - ($834))|0;
          $835 = $ispos2$i199$i ? $834 : $neg3$i200$i;
          $836 = ($835|0)>(3);
          $$344$i = $836&1;
          $837 = $$344$i;
         }
        } else {
         $837 = 2;
        }
        HEAP32[$21>>2] = $837;
        $838 = (($pMb$021) + 44|0);
        $839 = HEAP16[$838>>1]|0;
        $840 = (($pMb$021) + 166|0);
        $841 = HEAP16[$840>>1]|0;
        $842 = $841 << 16 >> 16;
        $843 = $839 | $739;
        $844 = ($843<<16>>16)==(0);
        do {
         if ($844) {
          $845 = (($pMb$021) + 140|0);
          $846 = (($pMb$021) + 164|0);
          $847 = HEAP16[$845>>1]|0;
          $848 = HEAP16[$846>>1]|0;
          $849 = $847 << 16 >> 16;
          $850 = $848 << 16 >> 16;
          $851 = (($850) - ($849))|0;
          $ispos$i189$i = ($851|0)>(-1);
          $neg$i190$i = (0 - ($851))|0;
          $852 = $ispos$i189$i ? $851 : $neg$i190$i;
          $853 = ($852|0)>(3);
          if ($853) {
           $861 = 1;
          } else {
           $854 = (($842) - ($744))|0;
           $ispos2$i191$i = ($854|0)>(-1);
           $neg3$i192$i = (0 - ($854))|0;
           $855 = $ispos2$i191$i ? $854 : $neg3$i192$i;
           $856 = ($855|0)>(3);
           if ($856) {
            $861 = 1;
            break;
           }
           $857 = (($pMb$021) + 124|0);
           $858 = HEAP32[$857>>2]|0;
           $859 = (($pMb$021) + 116|0);
           $860 = HEAP32[$859>>2]|0;
           $not$$i193$i = ($858|0)!=($860|0);
           $$$i194$i = $not$$i193$i&1;
           $861 = $$$i194$i;
          }
         } else {
          $861 = 2;
         }
        } while(0);
        HEAP32[$20>>2] = $861;
        $862 = (($pMb$021) + 46|0);
        $863 = HEAP16[$862>>1]|0;
        $864 = (($pMb$021) + 170|0);
        $865 = HEAP16[$864>>1]|0;
        $866 = $865 << 16 >> 16;
        $867 = $863 | $764;
        $868 = ($867<<16>>16)==(0);
        do {
         if ($868) {
          $869 = (($pMb$021) + 144|0);
          $870 = (($pMb$021) + 168|0);
          $871 = HEAP16[$869>>1]|0;
          $872 = HEAP16[$870>>1]|0;
          $873 = $871 << 16 >> 16;
          $874 = $872 << 16 >> 16;
          $875 = (($874) - ($873))|0;
          $ispos$i181$i = ($875|0)>(-1);
          $neg$i182$i = (0 - ($875))|0;
          $876 = $ispos$i181$i ? $875 : $neg$i182$i;
          $877 = ($876|0)>(3);
          if ($877) {
           $885 = 1;
           break;
          }
          $878 = (($866) - ($769))|0;
          $ispos2$i183$i = ($878|0)>(-1);
          $neg3$i184$i = (0 - ($878))|0;
          $879 = $ispos2$i183$i ? $878 : $neg3$i184$i;
          $880 = ($879|0)>(3);
          if ($880) {
           $885 = 1;
           break;
          }
          $881 = (($pMb$021) + 124|0);
          $882 = HEAP32[$881>>2]|0;
          $883 = (($pMb$021) + 116|0);
          $884 = HEAP32[$883>>2]|0;
          $not$$i185$i = ($882|0)!=($884|0);
          $$$i186$i = $not$$i185$i&1;
          $885 = $$$i186$i;
         } else {
          $885 = 2;
         }
        } while(0);
        HEAP32[$19>>2] = $885;
        $886 = (($pMb$021) + 52|0);
        $887 = HEAP16[$886>>1]|0;
        $888 = (($pMb$021) + 182|0);
        $889 = HEAP16[$888>>1]|0;
        $890 = $889 << 16 >> 16;
        $891 = $887 | $789;
        $892 = ($891<<16>>16)==(0);
        do {
         if ($892) {
          $893 = (($pMb$021) + 156|0);
          $894 = (($pMb$021) + 180|0);
          $895 = HEAP16[$893>>1]|0;
          $896 = HEAP16[$894>>1]|0;
          $897 = $895 << 16 >> 16;
          $898 = $896 << 16 >> 16;
          $899 = (($898) - ($897))|0;
          $ispos$i173$i = ($899|0)>(-1);
          $neg$i174$i = (0 - ($899))|0;
          $900 = $ispos$i173$i ? $899 : $neg$i174$i;
          $901 = ($900|0)>(3);
          if ($901) {
           $909 = 1;
           break;
          }
          $902 = (($890) - ($794))|0;
          $ispos2$i175$i = ($902|0)>(-1);
          $neg3$i176$i = (0 - ($902))|0;
          $903 = $ispos2$i175$i ? $902 : $neg3$i176$i;
          $904 = ($903|0)>(3);
          if ($904) {
           $909 = 1;
           break;
          }
          $905 = (($pMb$021) + 128|0);
          $906 = HEAP32[$905>>2]|0;
          $907 = (($pMb$021) + 120|0);
          $908 = HEAP32[$907>>2]|0;
          $not$$i177$i = ($906|0)!=($908|0);
          $$$i178$i = $not$$i177$i&1;
          $909 = $$$i178$i;
         } else {
          $909 = 2;
         }
        } while(0);
        HEAP32[$18>>2] = $909;
        $910 = (($pMb$021) + 54|0);
        $911 = HEAP16[$910>>1]|0;
        $912 = (($pMb$021) + 186|0);
        $913 = HEAP16[$912>>1]|0;
        $914 = $913 << 16 >> 16;
        $915 = $911 | $814;
        $916 = ($915<<16>>16)==(0);
        do {
         if ($916) {
          $917 = (($pMb$021) + 160|0);
          $918 = (($pMb$021) + 184|0);
          $919 = HEAP16[$917>>1]|0;
          $920 = HEAP16[$918>>1]|0;
          $921 = $919 << 16 >> 16;
          $922 = $920 << 16 >> 16;
          $923 = (($922) - ($921))|0;
          $ispos$i165$i = ($923|0)>(-1);
          $neg$i166$i = (0 - ($923))|0;
          $924 = $ispos$i165$i ? $923 : $neg$i166$i;
          $925 = ($924|0)>(3);
          if ($925) {
           $933 = 1;
           break;
          }
          $926 = (($914) - ($819))|0;
          $ispos2$i167$i = ($926|0)>(-1);
          $neg3$i168$i = (0 - ($926))|0;
          $927 = $ispos2$i167$i ? $926 : $neg3$i168$i;
          $928 = ($927|0)>(3);
          if ($928) {
           $933 = 1;
           break;
          }
          $929 = (($pMb$021) + 128|0);
          $930 = HEAP32[$929>>2]|0;
          $931 = (($pMb$021) + 120|0);
          $932 = HEAP32[$931>>2]|0;
          $not$$i169$i = ($930|0)!=($932|0);
          $$$i170$i = $not$$i169$i&1;
          $933 = $$$i170$i;
         } else {
          $933 = 2;
         }
        } while(0);
        HEAP32[$17>>2] = $933;
        $934 = (($pMb$021) + 48|0);
        $935 = HEAP16[$934>>1]|0;
        $936 = (($pMb$021) + 174|0);
        $937 = HEAP16[$936>>1]|0;
        $938 = $937 << 16 >> 16;
        $939 = $935 | $839;
        $940 = ($939<<16>>16)==(0);
        do {
         if ($940) {
          $941 = (($pMb$021) + 164|0);
          $942 = (($pMb$021) + 172|0);
          $943 = HEAP16[$941>>1]|0;
          $944 = HEAP16[$942>>1]|0;
          $945 = $943 << 16 >> 16;
          $946 = $944 << 16 >> 16;
          $947 = (($946) - ($945))|0;
          $ispos$i157$i = ($947|0)>(-1);
          $neg$i158$i = (0 - ($947))|0;
          $948 = $ispos$i157$i ? $947 : $neg$i158$i;
          $949 = ($948|0)>(3);
          if ($949) {
           $953 = 1;
           break;
          }
          $950 = (($938) - ($842))|0;
          $ispos2$i159$i = ($950|0)>(-1);
          $neg3$i160$i = (0 - ($950))|0;
          $951 = $ispos2$i159$i ? $950 : $neg3$i160$i;
          $952 = ($951|0)>(3);
          $$345$i = $952&1;
          $953 = $$345$i;
         } else {
          $953 = 2;
         }
        } while(0);
        HEAP32[$16>>2] = $953;
        $954 = (($pMb$021) + 50|0);
        $955 = HEAP16[$954>>1]|0;
        $956 = (($pMb$021) + 178|0);
        $957 = HEAP16[$956>>1]|0;
        $958 = $957 << 16 >> 16;
        $959 = $955 | $863;
        $960 = ($959<<16>>16)==(0);
        do {
         if ($960) {
          $961 = (($pMb$021) + 168|0);
          $962 = (($pMb$021) + 176|0);
          $963 = HEAP16[$961>>1]|0;
          $964 = HEAP16[$962>>1]|0;
          $965 = $963 << 16 >> 16;
          $966 = $964 << 16 >> 16;
          $967 = (($966) - ($965))|0;
          $ispos$i149$i = ($967|0)>(-1);
          $neg$i150$i = (0 - ($967))|0;
          $968 = $ispos$i149$i ? $967 : $neg$i150$i;
          $969 = ($968|0)>(3);
          if ($969) {
           $973 = 1;
           break;
          }
          $970 = (($958) - ($866))|0;
          $ispos2$i151$i = ($970|0)>(-1);
          $neg3$i152$i = (0 - ($970))|0;
          $971 = $ispos2$i151$i ? $970 : $neg3$i152$i;
          $972 = ($971|0)>(3);
          $$346$i = $972&1;
          $973 = $$346$i;
         } else {
          $973 = 2;
         }
        } while(0);
        HEAP32[$15>>2] = $973;
        $974 = (($pMb$021) + 56|0);
        $975 = HEAP16[$974>>1]|0;
        $976 = (($pMb$021) + 190|0);
        $977 = HEAP16[$976>>1]|0;
        $978 = $977 << 16 >> 16;
        $979 = $975 | $887;
        $980 = ($979<<16>>16)==(0);
        do {
         if ($980) {
          $981 = (($pMb$021) + 180|0);
          $982 = (($pMb$021) + 188|0);
          $983 = HEAP16[$981>>1]|0;
          $984 = HEAP16[$982>>1]|0;
          $985 = $983 << 16 >> 16;
          $986 = $984 << 16 >> 16;
          $987 = (($986) - ($985))|0;
          $ispos$i141$i = ($987|0)>(-1);
          $neg$i142$i = (0 - ($987))|0;
          $988 = $ispos$i141$i ? $987 : $neg$i142$i;
          $989 = ($988|0)>(3);
          if ($989) {
           $993 = 1;
           break;
          }
          $990 = (($978) - ($890))|0;
          $ispos2$i143$i = ($990|0)>(-1);
          $neg3$i144$i = (0 - ($990))|0;
          $991 = $ispos2$i143$i ? $990 : $neg3$i144$i;
          $992 = ($991|0)>(3);
          $$347$i = $992&1;
          $993 = $$347$i;
         } else {
          $993 = 2;
         }
        } while(0);
        HEAP32[$14>>2] = $993;
        $994 = (($pMb$021) + 58|0);
        $995 = HEAP16[$994>>1]|0;
        $996 = (($pMb$021) + 194|0);
        $997 = HEAP16[$996>>1]|0;
        $998 = $997 << 16 >> 16;
        $999 = $995 | $911;
        $1000 = ($999<<16>>16)==(0);
        do {
         if ($1000) {
          $1001 = (($pMb$021) + 184|0);
          $1002 = (($pMb$021) + 192|0);
          $1003 = HEAP16[$1001>>1]|0;
          $1004 = HEAP16[$1002>>1]|0;
          $1005 = $1003 << 16 >> 16;
          $1006 = $1004 << 16 >> 16;
          $1007 = (($1006) - ($1005))|0;
          $ispos$i133$i = ($1007|0)>(-1);
          $neg$i134$i = (0 - ($1007))|0;
          $1008 = $ispos$i133$i ? $1007 : $neg$i134$i;
          $1009 = ($1008|0)>(3);
          if ($1009) {
           $1013 = 1;
           break;
          }
          $1010 = (($998) - ($914))|0;
          $ispos2$i135$i = ($1010|0)>(-1);
          $neg3$i136$i = (0 - ($1010))|0;
          $1011 = $ispos2$i135$i ? $1010 : $neg3$i136$i;
          $1012 = ($1011|0)>(3);
          $$348$i = $1012&1;
          $1013 = $$348$i;
         } else {
          $1013 = 2;
         }
        } while(0);
        HEAP32[$13>>2] = $1013;
        $1014 = $766 | $741;
        $1015 = ($1014<<16>>16)==(0);
        do {
         if ($1015) {
          $1016 = (($pMb$021) + 132|0);
          $1017 = (($pMb$021) + 136|0);
          $1018 = HEAP16[$1016>>1]|0;
          $1019 = HEAP16[$1017>>1]|0;
          $1020 = $1018 << 16 >> 16;
          $1021 = $1019 << 16 >> 16;
          $1022 = (($1021) - ($1020))|0;
          $ispos$i125$i = ($1022|0)>(-1);
          $neg$i126$i = (0 - ($1022))|0;
          $1023 = $ispos$i125$i ? $1022 : $neg$i126$i;
          $1024 = ($1023|0)>(3);
          if ($1024) {
           $1028 = 1;
           break;
          }
          $1025 = (($772) - ($747))|0;
          $ispos2$i127$i = ($1025|0)>(-1);
          $neg3$i128$i = (0 - ($1025))|0;
          $1026 = $ispos2$i127$i ? $1025 : $neg3$i128$i;
          $1027 = ($1026|0)>(3);
          $$349$i = $1027&1;
          $1028 = $$349$i;
         } else {
          $1028 = 2;
         }
        } while(0);
        HEAP32[$36>>2] = $1028;
        $1029 = $791 | $766;
        $1030 = ($1029<<16>>16)==(0);
        do {
         if ($1030) {
          $1031 = (($pMb$021) + 136|0);
          $1032 = (($pMb$021) + 148|0);
          $1033 = HEAP16[$1031>>1]|0;
          $1034 = HEAP16[$1032>>1]|0;
          $1035 = $1033 << 16 >> 16;
          $1036 = $1034 << 16 >> 16;
          $1037 = (($1036) - ($1035))|0;
          $ispos$i117$i = ($1037|0)>(-1);
          $neg$i118$i = (0 - ($1037))|0;
          $1038 = $ispos$i117$i ? $1037 : $neg$i118$i;
          $1039 = ($1038|0)>(3);
          if ($1039) {
           $1047 = 1;
           break;
          }
          $1040 = (($797) - ($772))|0;
          $ispos2$i119$i = ($1040|0)>(-1);
          $neg3$i120$i = (0 - ($1040))|0;
          $1041 = $ispos2$i119$i ? $1040 : $neg3$i120$i;
          $1042 = ($1041|0)>(3);
          if ($1042) {
           $1047 = 1;
           break;
          }
          $1043 = (($pMb$021) + 120|0);
          $1044 = HEAP32[$1043>>2]|0;
          $1045 = (($pMb$021) + 116|0);
          $1046 = HEAP32[$1045>>2]|0;
          $not$$i121$i = ($1044|0)!=($1046|0);
          $$$i122$i = $not$$i121$i&1;
          $1047 = $$$i122$i;
         } else {
          $1047 = 2;
         }
        } while(0);
        HEAP32[$35>>2] = $1047;
        $1048 = $816 | $791;
        $1049 = ($1048<<16>>16)==(0);
        do {
         if ($1049) {
          $1050 = (($pMb$021) + 148|0);
          $1051 = (($pMb$021) + 152|0);
          $1052 = HEAP16[$1050>>1]|0;
          $1053 = HEAP16[$1051>>1]|0;
          $1054 = $1052 << 16 >> 16;
          $1055 = $1053 << 16 >> 16;
          $1056 = (($1055) - ($1054))|0;
          $ispos$i109$i = ($1056|0)>(-1);
          $neg$i110$i = (0 - ($1056))|0;
          $1057 = $ispos$i109$i ? $1056 : $neg$i110$i;
          $1058 = ($1057|0)>(3);
          if ($1058) {
           $1062 = 1;
           break;
          }
          $1059 = (($822) - ($797))|0;
          $ispos2$i111$i = ($1059|0)>(-1);
          $neg3$i112$i = (0 - ($1059))|0;
          $1060 = $ispos2$i111$i ? $1059 : $neg3$i112$i;
          $1061 = ($1060|0)>(3);
          $$350$i = $1061&1;
          $1062 = $$350$i;
         } else {
          $1062 = 2;
         }
        } while(0);
        HEAP32[$34>>2] = $1062;
        $1063 = $764 | $739;
        $1064 = ($1063<<16>>16)==(0);
        do {
         if ($1064) {
          $1065 = (($pMb$021) + 140|0);
          $1066 = (($pMb$021) + 144|0);
          $1067 = HEAP16[$1065>>1]|0;
          $1068 = HEAP16[$1066>>1]|0;
          $1069 = $1067 << 16 >> 16;
          $1070 = $1068 << 16 >> 16;
          $1071 = (($1070) - ($1069))|0;
          $ispos$i101$i = ($1071|0)>(-1);
          $neg$i102$i = (0 - ($1071))|0;
          $1072 = $ispos$i101$i ? $1071 : $neg$i102$i;
          $1073 = ($1072|0)>(3);
          if ($1073) {
           $1077 = 1;
           break;
          }
          $1074 = (($769) - ($744))|0;
          $ispos2$i103$i = ($1074|0)>(-1);
          $neg3$i104$i = (0 - ($1074))|0;
          $1075 = $ispos2$i103$i ? $1074 : $neg3$i104$i;
          $1076 = ($1075|0)>(3);
          $$351$i = $1076&1;
          $1077 = $$351$i;
         } else {
          $1077 = 2;
         }
        } while(0);
        HEAP32[$33>>2] = $1077;
        $1078 = $789 | $764;
        $1079 = ($1078<<16>>16)==(0);
        do {
         if ($1079) {
          $1080 = (($pMb$021) + 144|0);
          $1081 = (($pMb$021) + 156|0);
          $1082 = HEAP16[$1080>>1]|0;
          $1083 = HEAP16[$1081>>1]|0;
          $1084 = $1082 << 16 >> 16;
          $1085 = $1083 << 16 >> 16;
          $1086 = (($1085) - ($1084))|0;
          $ispos$i93$i = ($1086|0)>(-1);
          $neg$i94$i = (0 - ($1086))|0;
          $1087 = $ispos$i93$i ? $1086 : $neg$i94$i;
          $1088 = ($1087|0)>(3);
          if ($1088) {
           $1096 = 1;
           break;
          }
          $1089 = (($794) - ($769))|0;
          $ispos2$i95$i = ($1089|0)>(-1);
          $neg3$i96$i = (0 - ($1089))|0;
          $1090 = $ispos2$i95$i ? $1089 : $neg3$i96$i;
          $1091 = ($1090|0)>(3);
          if ($1091) {
           $1096 = 1;
           break;
          }
          $1092 = (($pMb$021) + 120|0);
          $1093 = HEAP32[$1092>>2]|0;
          $1094 = (($pMb$021) + 116|0);
          $1095 = HEAP32[$1094>>2]|0;
          $not$$i97$i = ($1093|0)!=($1095|0);
          $$$i98$i = $not$$i97$i&1;
          $1096 = $$$i98$i;
         } else {
          $1096 = 2;
         }
        } while(0);
        HEAP32[$32>>2] = $1096;
        $1097 = $814 | $789;
        $1098 = ($1097<<16>>16)==(0);
        do {
         if ($1098) {
          $1099 = (($pMb$021) + 156|0);
          $1100 = (($pMb$021) + 160|0);
          $1101 = HEAP16[$1099>>1]|0;
          $1102 = HEAP16[$1100>>1]|0;
          $1103 = $1101 << 16 >> 16;
          $1104 = $1102 << 16 >> 16;
          $1105 = (($1104) - ($1103))|0;
          $ispos$i85$i = ($1105|0)>(-1);
          $neg$i86$i = (0 - ($1105))|0;
          $1106 = $ispos$i85$i ? $1105 : $neg$i86$i;
          $1107 = ($1106|0)>(3);
          if ($1107) {
           $1111 = 1;
           break;
          }
          $1108 = (($819) - ($794))|0;
          $ispos2$i87$i = ($1108|0)>(-1);
          $neg3$i88$i = (0 - ($1108))|0;
          $1109 = $ispos2$i87$i ? $1108 : $neg3$i88$i;
          $1110 = ($1109|0)>(3);
          $$352$i = $1110&1;
          $1111 = $$352$i;
         } else {
          $1111 = 2;
         }
        } while(0);
        HEAP32[$31>>2] = $1111;
        $1112 = $863 | $839;
        $1113 = ($1112<<16>>16)==(0);
        do {
         if ($1113) {
          $1114 = (($pMb$021) + 164|0);
          $1115 = (($pMb$021) + 168|0);
          $1116 = HEAP16[$1114>>1]|0;
          $1117 = HEAP16[$1115>>1]|0;
          $1118 = $1116 << 16 >> 16;
          $1119 = $1117 << 16 >> 16;
          $1120 = (($1119) - ($1118))|0;
          $ispos$i77$i = ($1120|0)>(-1);
          $neg$i78$i = (0 - ($1120))|0;
          $1121 = $ispos$i77$i ? $1120 : $neg$i78$i;
          $1122 = ($1121|0)>(3);
          if ($1122) {
           $1126 = 1;
           break;
          }
          $1123 = (($866) - ($842))|0;
          $ispos2$i79$i = ($1123|0)>(-1);
          $neg3$i80$i = (0 - ($1123))|0;
          $1124 = $ispos2$i79$i ? $1123 : $neg3$i80$i;
          $1125 = ($1124|0)>(3);
          $$353$i = $1125&1;
          $1126 = $$353$i;
         } else {
          $1126 = 2;
         }
        } while(0);
        HEAP32[$30>>2] = $1126;
        $1127 = $887 | $863;
        $1128 = ($1127<<16>>16)==(0);
        do {
         if ($1128) {
          $1129 = (($pMb$021) + 168|0);
          $1130 = (($pMb$021) + 180|0);
          $1131 = HEAP16[$1129>>1]|0;
          $1132 = HEAP16[$1130>>1]|0;
          $1133 = $1131 << 16 >> 16;
          $1134 = $1132 << 16 >> 16;
          $1135 = (($1134) - ($1133))|0;
          $ispos$i69$i = ($1135|0)>(-1);
          $neg$i70$i = (0 - ($1135))|0;
          $1136 = $ispos$i69$i ? $1135 : $neg$i70$i;
          $1137 = ($1136|0)>(3);
          if ($1137) {
           $1145 = 1;
           break;
          }
          $1138 = (($890) - ($866))|0;
          $ispos2$i71$i = ($1138|0)>(-1);
          $neg3$i72$i = (0 - ($1138))|0;
          $1139 = $ispos2$i71$i ? $1138 : $neg3$i72$i;
          $1140 = ($1139|0)>(3);
          if ($1140) {
           $1145 = 1;
           break;
          }
          $1141 = (($pMb$021) + 128|0);
          $1142 = HEAP32[$1141>>2]|0;
          $1143 = (($pMb$021) + 124|0);
          $1144 = HEAP32[$1143>>2]|0;
          $not$$i73$i = ($1142|0)!=($1144|0);
          $$$i74$i = $not$$i73$i&1;
          $1145 = $$$i74$i;
         } else {
          $1145 = 2;
         }
        } while(0);
        HEAP32[$29>>2] = $1145;
        $1146 = $911 | $887;
        $1147 = ($1146<<16>>16)==(0);
        do {
         if ($1147) {
          $1148 = (($pMb$021) + 180|0);
          $1149 = (($pMb$021) + 184|0);
          $1150 = HEAP16[$1148>>1]|0;
          $1151 = HEAP16[$1149>>1]|0;
          $1152 = $1150 << 16 >> 16;
          $1153 = $1151 << 16 >> 16;
          $1154 = (($1153) - ($1152))|0;
          $ispos$i61$i = ($1154|0)>(-1);
          $neg$i62$i = (0 - ($1154))|0;
          $1155 = $ispos$i61$i ? $1154 : $neg$i62$i;
          $1156 = ($1155|0)>(3);
          if ($1156) {
           $1160 = 1;
           break;
          }
          $1157 = (($914) - ($890))|0;
          $ispos2$i63$i = ($1157|0)>(-1);
          $neg3$i64$i = (0 - ($1157))|0;
          $1158 = $ispos2$i63$i ? $1157 : $neg3$i64$i;
          $1159 = ($1158|0)>(3);
          $$354$i = $1159&1;
          $1160 = $$354$i;
         } else {
          $1160 = 2;
         }
        } while(0);
        HEAP32[$28>>2] = $1160;
        $1161 = $955 | $935;
        $1162 = ($1161<<16>>16)==(0);
        do {
         if ($1162) {
          $1163 = (($pMb$021) + 172|0);
          $1164 = (($pMb$021) + 176|0);
          $1165 = HEAP16[$1163>>1]|0;
          $1166 = HEAP16[$1164>>1]|0;
          $1167 = $1165 << 16 >> 16;
          $1168 = $1166 << 16 >> 16;
          $1169 = (($1168) - ($1167))|0;
          $ispos$i53$i = ($1169|0)>(-1);
          $neg$i54$i = (0 - ($1169))|0;
          $1170 = $ispos$i53$i ? $1169 : $neg$i54$i;
          $1171 = ($1170|0)>(3);
          if ($1171) {
           $1175 = 1;
           break;
          }
          $1172 = (($958) - ($938))|0;
          $ispos2$i55$i = ($1172|0)>(-1);
          $neg3$i56$i = (0 - ($1172))|0;
          $1173 = $ispos2$i55$i ? $1172 : $neg3$i56$i;
          $1174 = ($1173|0)>(3);
          $$355$i = $1174&1;
          $1175 = $$355$i;
         } else {
          $1175 = 2;
         }
        } while(0);
        HEAP32[$27>>2] = $1175;
        $1176 = $975 | $955;
        $1177 = ($1176<<16>>16)==(0);
        do {
         if ($1177) {
          $1178 = (($pMb$021) + 176|0);
          $1179 = (($pMb$021) + 188|0);
          $1180 = HEAP16[$1178>>1]|0;
          $1181 = HEAP16[$1179>>1]|0;
          $1182 = $1180 << 16 >> 16;
          $1183 = $1181 << 16 >> 16;
          $1184 = (($1183) - ($1182))|0;
          $ispos$i45$i = ($1184|0)>(-1);
          $neg$i46$i = (0 - ($1184))|0;
          $1185 = $ispos$i45$i ? $1184 : $neg$i46$i;
          $1186 = ($1185|0)>(3);
          if ($1186) {
           $1194 = 1;
           break;
          }
          $1187 = (($978) - ($958))|0;
          $ispos2$i47$i = ($1187|0)>(-1);
          $neg3$i48$i = (0 - ($1187))|0;
          $1188 = $ispos2$i47$i ? $1187 : $neg3$i48$i;
          $1189 = ($1188|0)>(3);
          if ($1189) {
           $1194 = 1;
           break;
          }
          $1190 = (($pMb$021) + 128|0);
          $1191 = HEAP32[$1190>>2]|0;
          $1192 = (($pMb$021) + 124|0);
          $1193 = HEAP32[$1192>>2]|0;
          $not$$i49$i = ($1191|0)!=($1193|0);
          $$$i50$i = $not$$i49$i&1;
          $1194 = $$$i50$i;
         } else {
          $1194 = 2;
         }
        } while(0);
        HEAP32[$26>>2] = $1194;
        $1195 = $995 | $975;
        $1196 = ($1195<<16>>16)==(0);
        do {
         if ($1196) {
          $1197 = (($pMb$021) + 188|0);
          $1198 = (($pMb$021) + 192|0);
          $1199 = HEAP16[$1197>>1]|0;
          $1200 = HEAP16[$1198>>1]|0;
          $1201 = $1199 << 16 >> 16;
          $1202 = $1200 << 16 >> 16;
          $1203 = (($1202) - ($1201))|0;
          $ispos$i41$i = ($1203|0)>(-1);
          $neg$i42$i = (0 - ($1203))|0;
          $1204 = $ispos$i41$i ? $1203 : $neg$i42$i;
          $1205 = ($1204|0)>(3);
          if ($1205) {
           $1209 = 1;
           break;
          }
          $1206 = (($998) - ($978))|0;
          $ispos2$i$i = ($1206|0)>(-1);
          $neg3$i$i = (0 - ($1206))|0;
          $1207 = $ispos2$i$i ? $1206 : $neg3$i$i;
          $1208 = ($1207|0)>(3);
          $$356$i = $1208&1;
          $1209 = $$356$i;
         } else {
          $1209 = 2;
         }
        } while(0);
        HEAP32[$25>>2] = $1209;
        break;
       }
      }
     } while(0);
     $1210 = HEAP32[$24>>2]|0;
     $1211 = $nonZeroBs$1$i | $1210;
     $1212 = HEAP32[$23>>2]|0;
     $1213 = $1211 | $1212;
     $1214 = HEAP32[$22>>2]|0;
     $1215 = $1213 | $1214;
     $1216 = HEAP32[$21>>2]|0;
     $1217 = $1215 | $1216;
     $1218 = HEAP32[$20>>2]|0;
     $1219 = $1217 | $1218;
     $1220 = HEAP32[$19>>2]|0;
     $1221 = $1219 | $1220;
     $1222 = HEAP32[$18>>2]|0;
     $1223 = $1221 | $1222;
     $1224 = HEAP32[$17>>2]|0;
     $1225 = $1223 | $1224;
     $1226 = HEAP32[$16>>2]|0;
     $1227 = $1225 | $1226;
     $1228 = HEAP32[$15>>2]|0;
     $1229 = $1227 | $1228;
     $1230 = HEAP32[$14>>2]|0;
     $1231 = $1229 | $1230;
     $1232 = HEAP32[$13>>2]|0;
     $1233 = $1231 | $1232;
     $1234 = HEAP32[$36>>2]|0;
     $1235 = $1233 | $1234;
     $1236 = HEAP32[$35>>2]|0;
     $1237 = $1235 | $1236;
     $1238 = HEAP32[$34>>2]|0;
     $1239 = $1237 | $1238;
     $1240 = HEAP32[$33>>2]|0;
     $1241 = $1239 | $1240;
     $1242 = HEAP32[$32>>2]|0;
     $1243 = $1241 | $1242;
     $1244 = HEAP32[$31>>2]|0;
     $1245 = $1243 | $1244;
     $1246 = HEAP32[$30>>2]|0;
     $1247 = $1245 | $1246;
     $1248 = HEAP32[$29>>2]|0;
     $1249 = $1247 | $1248;
     $1250 = HEAP32[$28>>2]|0;
     $1251 = $1249 | $1250;
     $1252 = HEAP32[$27>>2]|0;
     $1253 = $1251 | $1252;
     $1254 = HEAP32[$26>>2]|0;
     $1255 = $1253 | $1254;
     $1256 = HEAP32[$25>>2]|0;
     $1257 = $1255 | $1256;
     $1258 = ($1257|0)==(0);
     if ($1258) {
      break;
     }
    }
    $1259 = (($pMb$021) + 20|0);
    $1260 = HEAP32[$1259>>2]|0;
    $1261 = (($pMb$021) + 12|0);
    $1262 = HEAP32[$1261>>2]|0;
    $1263 = (($1262) + ($1260))|0;
    $1264 = (_clip(0,51,$1263)|0);
    $1265 = (($pMb$021) + 16|0);
    $1266 = HEAP32[$1265>>2]|0;
    $1267 = (($1266) + ($1260))|0;
    $1268 = (_clip(0,51,$1267)|0);
    $1269 = (6864 + ($1264)|0);
    $1270 = HEAP8[$1269>>0]|0;
    $1271 = $1270&255;
    HEAP32[$37>>2] = $1271;
    $1272 = (6920 + ($1268)|0);
    $1273 = HEAP8[$1272>>0]|0;
    $1274 = $1273&255;
    HEAP32[$38>>2] = $1274;
    $1275 = (6976 + (($1264*3)|0)|0);
    HEAP32[$39>>2] = $1275;
    do {
     if (!($79)) {
      $1276 = HEAP32[$69>>2]|0;
      $1277 = (($1276) + 20|0);
      $1278 = HEAP32[$1277>>2]|0;
      $1279 = ($1278|0)==($1260|0);
      if ($1279) {
       HEAP32[$56>>2] = $1271;
       HEAP32[$57>>2] = $1274;
       HEAP32[$thresholds>>2] = $1275;
       break;
      } else {
       $1280 = (($1260) + 1)|0;
       $1281 = (($1280) + ($1278))|0;
       $1282 = $1281 >>> 1;
       $1283 = HEAP32[$1261>>2]|0;
       $1284 = (($1283) + ($1282))|0;
       $1285 = (_clip(0,51,$1284)|0);
       $1286 = HEAP32[$1265>>2]|0;
       $1287 = (($1286) + ($1282))|0;
       $1288 = (_clip(0,51,$1287)|0);
       $1289 = (6864 + ($1285)|0);
       $1290 = HEAP8[$1289>>0]|0;
       $1291 = $1290&255;
       HEAP32[$56>>2] = $1291;
       $1292 = (6920 + ($1288)|0);
       $1293 = HEAP8[$1292>>0]|0;
       $1294 = $1293&255;
       HEAP32[$57>>2] = $1294;
       $1295 = (6976 + (($1285*3)|0)|0);
       HEAP32[$thresholds>>2] = $1295;
       break;
      }
     }
    } while(0);
    do {
     if (!($208)) {
      $1296 = HEAP32[$61>>2]|0;
      $1297 = (($1296) + 20|0);
      $1298 = HEAP32[$1297>>2]|0;
      $1299 = ($1298|0)==($1260|0);
      if ($1299) {
       $1316 = HEAP32[$37>>2]|0;
       HEAP32[$53>>2] = $1316;
       $1317 = HEAP32[$38>>2]|0;
       HEAP32[$54>>2] = $1317;
       $1318 = HEAP32[$39>>2]|0;
       HEAP32[$55>>2] = $1318;
       break;
      } else {
       $1300 = (($1260) + 1)|0;
       $1301 = (($1300) + ($1298))|0;
       $1302 = $1301 >>> 1;
       $1303 = HEAP32[$1261>>2]|0;
       $1304 = (($1303) + ($1302))|0;
       $1305 = (_clip(0,51,$1304)|0);
       $1306 = HEAP32[$1265>>2]|0;
       $1307 = (($1306) + ($1302))|0;
       $1308 = (_clip(0,51,$1307)|0);
       $1309 = (6864 + ($1305)|0);
       $1310 = HEAP8[$1309>>0]|0;
       $1311 = $1310&255;
       HEAP32[$53>>2] = $1311;
       $1312 = (6920 + ($1308)|0);
       $1313 = HEAP8[$1312>>0]|0;
       $1314 = $1313&255;
       HEAP32[$54>>2] = $1314;
       $1315 = (6976 + (($1305*3)|0)|0);
       HEAP32[$55>>2] = $1315;
       break;
      }
     }
    } while(0);
    $1319 = HEAP32[$image>>2]|0;
    $1320 = Math_imul($mbRow$020, $1)|0;
    $1321 = $1320 << 8;
    $1322 = $mbCol$018 << 4;
    $$sum = (($1321) + ($1322))|0;
    $1323 = (($1319) + ($$sum)|0);
    $1550 = 3;$offset$07$i = 0;$ptr$05$i = $1323;$tmp$04$i = $bS;
    while(1) {
     $1324 = (($tmp$04$i) + 4|0);
     $1325 = HEAP32[$1324>>2]|0;
     $1326 = ($1325|0)==(0);
     if (!($1326)) {
      _FilterVerLumaEdge($ptr$05$i,$1325,$49,$40);
     }
     $1327 = (($tmp$04$i) + 12|0);
     $1328 = HEAP32[$1327>>2]|0;
     $1329 = ($1328|0)==(0);
     if (!($1329)) {
      $1330 = (($ptr$05$i) + 4|0);
      _FilterVerLumaEdge($1330,$1328,$48,$40);
     }
     $1331 = (($tmp$04$i) + 16|0);
     $1332 = (($tmp$04$i) + 20|0);
     $1333 = HEAP32[$1332>>2]|0;
     $1334 = ($1333|0)==(0);
     if (!($1334)) {
      $1335 = (($ptr$05$i) + 8|0);
      _FilterVerLumaEdge($1335,$1333,$48,$40);
     }
     $1336 = (($tmp$04$i) + 24|0);
     $1337 = (($tmp$04$i) + 28|0);
     $1338 = HEAP32[$1337>>2]|0;
     $1339 = ($1338|0)==(0);
     if (!($1339)) {
      $1340 = (($ptr$05$i) + 12|0);
      _FilterVerLumaEdge($1340,$1338,$48,$40);
     }
     $1341 = HEAP32[$tmp$04$i>>2]|0;
     $1342 = (($tmp$04$i) + 8|0);
     $1343 = HEAP32[$1342>>2]|0;
     $1344 = ($1341|0)==($1343|0);
     L387: do {
      if ($1344) {
       $1345 = HEAP32[$1331>>2]|0;
       $1346 = ($1341|0)==($1345|0);
       if ($1346) {
        $1347 = HEAP32[$1336>>2]|0;
        $1348 = ($1341|0)==($1347|0);
        if ($1348) {
         $1349 = ($1341|0)==(0);
         if ($1349) {
          break;
         }
         $1350 = ((($thresholds) + (($offset$07$i*12)|0)|0) + 4|0);
         $1351 = HEAP32[$1350>>2]|0;
         $1352 = ((($thresholds) + (($offset$07$i*12)|0)|0) + 8|0);
         $1353 = HEAP32[$1352>>2]|0;
         $1354 = ($1341>>>0)<(4);
         if ($1354) {
          $1357 = (($1341) + -1)|0;
          $1358 = (($thresholds) + (($offset$07$i*12)|0)|0);
          $1359 = HEAP32[$1358>>2]|0;
          $1360 = (($1359) + ($1357)|0);
          $1361 = HEAP8[$1360>>0]|0;
          $1362 = $1361&255;
          $1363 = (0 - ($1362))|0;
          $1364 = (($1362) + 1)|0;
          $$024$i$i = $ptr$05$i;$i$023$i$i = 16;
          while(1) {
           $1365 = (($$024$i$i) + ($42)|0);
           $1366 = HEAP8[$1365>>0]|0;
           $1367 = $1366&255;
           $1368 = (($$024$i$i) + ($41)|0);
           $1369 = HEAP8[$1368>>0]|0;
           $1370 = $1369&255;
           $1371 = HEAP8[$$024$i$i>>0]|0;
           $1372 = $1371&255;
           $1373 = (($$024$i$i) + ($40)|0);
           $1374 = HEAP8[$1373>>0]|0;
           $1375 = $1374&255;
           $1376 = (($1370) - ($1372))|0;
           $ispos9$i$i = ($1376|0)>(-1);
           $neg10$i$i = (0 - ($1376))|0;
           $1377 = $ispos9$i$i ? $1376 : $neg10$i$i;
           $1378 = ($1377>>>0)<($1351>>>0);
           do {
            if ($1378) {
             $1379 = (($1367) - ($1370))|0;
             $ispos11$i$i = ($1379|0)>(-1);
             $neg12$i$i = (0 - ($1379))|0;
             $1380 = $ispos11$i$i ? $1379 : $neg12$i$i;
             $1381 = ($1380>>>0)<($1353>>>0);
             if (!($1381)) {
              break;
             }
             $1382 = (($1375) - ($1372))|0;
             $ispos13$i$i = ($1382|0)>(-1);
             $neg14$i$i = (0 - ($1382))|0;
             $1383 = $ispos13$i$i ? $1382 : $neg14$i$i;
             $1384 = ($1383>>>0)<($1353>>>0);
             if (!($1384)) {
              break;
             }
             $1385 = (($$024$i$i) + ($43)|0);
             $1386 = HEAP8[$1385>>0]|0;
             $1387 = $1386&255;
             $1388 = (($1387) - ($1370))|0;
             $ispos15$i$i = ($1388|0)>(-1);
             $neg16$i$i = (0 - ($1388))|0;
             $1389 = $ispos15$i$i ? $1388 : $neg16$i$i;
             $1390 = ($1389>>>0)<($1353>>>0);
             if ($1390) {
              $1391 = (($1370) + 1)|0;
              $1392 = (($1391) + ($1372))|0;
              $1393 = $1392 >>> 1;
              $1394 = $1367 << 1;
              $1395 = (($1393) - ($1394))|0;
              $1396 = (($1395) + ($1387))|0;
              $1397 = $1396 >> 1;
              $1398 = (_clip($1363,$1362,$1397)|0);
              $1399 = (($1398) + ($1367))|0;
              $1400 = $1399&255;
              HEAP8[$1365>>0] = $1400;
              $tmp$1$i$i = $1364;
             } else {
              $tmp$1$i$i = $1362;
             }
             $1401 = (($$024$i$i) + ($44)|0);
             $1402 = HEAP8[$1401>>0]|0;
             $1403 = $1402&255;
             $1404 = (($1403) - ($1372))|0;
             $ispos17$i$i = ($1404|0)>(-1);
             $neg18$i$i = (0 - ($1404))|0;
             $1405 = $ispos17$i$i ? $1404 : $neg18$i$i;
             $1406 = ($1405>>>0)<($1353>>>0);
             if ($1406) {
              $1407 = (($1370) + 1)|0;
              $1408 = (($1407) + ($1372))|0;
              $1409 = $1408 >>> 1;
              $1410 = $1375 << 1;
              $1411 = (($1409) - ($1410))|0;
              $1412 = (($1411) + ($1403))|0;
              $1413 = $1412 >> 1;
              $1414 = (_clip($1363,$1362,$1413)|0);
              $1415 = (($1414) + ($1375))|0;
              $1416 = $1415&255;
              HEAP8[$1373>>0] = $1416;
              $1417 = (($tmp$1$i$i) + 1)|0;
              $tmp$2$i$i = $1417;
             } else {
              $tmp$2$i$i = $tmp$1$i$i;
             }
             $1418 = (($1372) - ($1370))|0;
             $1419 = $1418 << 2;
             $1420 = (($1367) + 4)|0;
             $1421 = (($1420) - ($1375))|0;
             $1422 = (($1421) + ($1419))|0;
             $1423 = $1422 >> 3;
             $1424 = (0 - ($tmp$2$i$i))|0;
             $1425 = (_clip($1424,$tmp$2$i$i,$1423)|0);
             $1426 = $1370 | 512;
             $$sum$i$i = (($1425) + ($1426))|0;
             $1427 = (3472 + ($$sum$i$i)|0);
             $1428 = HEAP8[$1427>>0]|0;
             $1429 = $1372 | 512;
             $$sum19$i$i = (($1429) - ($1425))|0;
             $1430 = (3472 + ($$sum19$i$i)|0);
             $1431 = HEAP8[$1430>>0]|0;
             HEAP8[$1368>>0] = $1428;
             HEAP8[$$024$i$i>>0] = $1431;
            }
           } while(0);
           $1432 = (($i$023$i$i) + -1)|0;
           $1433 = (($$024$i$i) + 1|0);
           $1434 = ($1432|0)==(0);
           if ($1434) {
            break L387;
           } else {
            $$024$i$i = $1433;$i$023$i$i = $1432;
           }
          }
         }
         $1355 = $1351 >>> 2;
         $1356 = (($1355) + 2)|0;
         $$128$i$i = $ptr$05$i;$i$127$i$i = 16;
         while(1) {
          $1435 = (($$128$i$i) + ($42)|0);
          $1436 = HEAP8[$1435>>0]|0;
          $1437 = $1436&255;
          $1438 = (($$128$i$i) + ($41)|0);
          $1439 = HEAP8[$1438>>0]|0;
          $1440 = $1439&255;
          $1441 = HEAP8[$$128$i$i>>0]|0;
          $1442 = $1441&255;
          $1443 = (($$128$i$i) + ($40)|0);
          $1444 = HEAP8[$1443>>0]|0;
          $1445 = $1444&255;
          $1446 = (($1440) - ($1442))|0;
          $ispos$i$i5 = ($1446|0)>(-1);
          $neg$i$i6 = (0 - ($1446))|0;
          $1447 = $ispos$i$i5 ? $1446 : $neg$i$i6;
          $1448 = ($1447>>>0)<($1351>>>0);
          L410: do {
           if ($1448) {
            $1449 = (($1437) - ($1440))|0;
            $ispos1$i$i7 = ($1449|0)>(-1);
            $neg2$i$i8 = (0 - ($1449))|0;
            $1450 = $ispos1$i$i7 ? $1449 : $neg2$i$i8;
            $1451 = ($1450>>>0)<($1353>>>0);
            if (!($1451)) {
             break;
            }
            $1452 = (($1445) - ($1442))|0;
            $ispos3$i$i = ($1452|0)>(-1);
            $neg4$i$i = (0 - ($1452))|0;
            $1453 = $ispos3$i$i ? $1452 : $neg4$i$i;
            $1454 = ($1453>>>0)<($1353>>>0);
            if (!($1454)) {
             break;
            }
            $1455 = ($1447>>>0)<($1356>>>0);
            $1456 = (($$128$i$i) + ($43)|0);
            $1457 = HEAP8[$1456>>0]|0;
            $1458 = $1457&255;
            $1459 = (($$128$i$i) + ($44)|0);
            $1460 = HEAP8[$1459>>0]|0;
            $1461 = $1460&255;
            do {
             if ($1455) {
              $1462 = (($1458) - ($1440))|0;
              $ispos7$i$i = ($1462|0)>(-1);
              $neg8$i$i = (0 - ($1462))|0;
              $1463 = $ispos7$i$i ? $1462 : $neg8$i$i;
              $1464 = ($1463>>>0)<($1353>>>0);
              if ($1464) {
               $1465 = (($1440) + ($1437))|0;
               $1466 = (($1465) + ($1442))|0;
               $1467 = $1466 << 1;
               $1468 = (($1445) + 4)|0;
               $1469 = (($1468) + ($1467))|0;
               $1470 = (($1469) + ($1458))|0;
               $1471 = $1470 >>> 3;
               $1472 = $1471&255;
               HEAP8[$1438>>0] = $1472;
               $1473 = (($1466) + 2)|0;
               $1474 = (($1473) + ($1458))|0;
               $1475 = $1474 >>> 2;
               $1476 = $1475&255;
               HEAP8[$1435>>0] = $1476;
               $1477 = (($$128$i$i) + ($45)|0);
               $1478 = HEAP8[$1477>>0]|0;
               $1479 = $1478&255;
               $1480 = $1479 << 1;
               $1481 = ($1458*3)|0;
               $1482 = (($1466) + 4)|0;
               $1483 = (($1482) + ($1481))|0;
               $1484 = (($1483) + ($1480))|0;
               $1485 = $1484 >>> 3;
               $1486 = $1485&255;
               HEAP8[$1456>>0] = $1486;
              } else {
               $1487 = $1437 << 1;
               $1488 = (($1440) + 2)|0;
               $1489 = (($1488) + ($1487))|0;
               $1490 = (($1489) + ($1445))|0;
               $1491 = $1490 >>> 2;
               $1492 = $1491&255;
               HEAP8[$1438>>0] = $1492;
              }
              $1493 = (($1461) - ($1442))|0;
              $ispos5$i$i = ($1493|0)>(-1);
              $neg6$i$i = (0 - ($1493))|0;
              $1494 = $ispos5$i$i ? $1493 : $neg6$i$i;
              $1495 = ($1494>>>0)<($1353>>>0);
              if (!($1495)) {
               break;
              }
              $1496 = (($1442) + ($1440))|0;
              $1497 = (($1496) + ($1445))|0;
              $1498 = $1497 << 1;
              $1499 = (($1437) + 4)|0;
              $1500 = (($1499) + ($1498))|0;
              $1501 = (($1500) + ($1461))|0;
              $1502 = $1501 >>> 3;
              $1503 = $1502&255;
              HEAP8[$$128$i$i>>0] = $1503;
              $1504 = (($1497) + 2)|0;
              $1505 = (($1504) + ($1461))|0;
              $1506 = $1505 >>> 2;
              $1507 = $1506&255;
              HEAP8[$1443>>0] = $1507;
              $1508 = (($$128$i$i) + ($46)|0);
              $1509 = HEAP8[$1508>>0]|0;
              $1510 = $1509&255;
              $1511 = $1510 << 1;
              $1512 = ($1461*3)|0;
              $1513 = (($1497) + 4)|0;
              $1514 = (($1513) + ($1512))|0;
              $1515 = (($1514) + ($1511))|0;
              $1516 = $1515 >>> 3;
              $1517 = $1516&255;
              HEAP8[$1459>>0] = $1517;
              break L410;
             } else {
              $1518 = $1437 << 1;
              $1519 = (($1440) + 2)|0;
              $1520 = (($1519) + ($1518))|0;
              $1521 = (($1520) + ($1445))|0;
              $1522 = $1521 >>> 2;
              $1523 = $1522&255;
              HEAP8[$1438>>0] = $1523;
             }
            } while(0);
            $1524 = $1445 << 1;
            $1525 = (($1437) + 2)|0;
            $1526 = (($1525) + ($1442))|0;
            $1527 = (($1526) + ($1524))|0;
            $1528 = $1527 >>> 2;
            $1529 = $1528&255;
            HEAP8[$$128$i$i>>0] = $1529;
           }
          } while(0);
          $1530 = (($i$127$i$i) + -1)|0;
          $1531 = (($$128$i$i) + 1|0);
          $1532 = ($1530|0)==(0);
          if ($1532) {
           break;
          } else {
           $$128$i$i = $1531;$i$127$i$i = $1530;
          }
         }
        } else {
         label = 311;
        }
       } else {
        label = 311;
       }
      } else {
       label = 311;
      }
     } while(0);
     do {
      if ((label|0) == 311) {
       label = 0;
       $1533 = ($1341|0)==(0);
       if ($1533) {
        $1535 = $1343;
       } else {
        $1534 = (($thresholds) + (($offset$07$i*12)|0)|0);
        _FilterHorLumaEdge($ptr$05$i,$1341,$1534,$40);
        $$pre$i10 = HEAP32[$1342>>2]|0;
        $1535 = $$pre$i10;
       }
       $1536 = ($1535|0)==(0);
       if (!($1536)) {
        $1537 = (($ptr$05$i) + 4|0);
        $1538 = (($thresholds) + (($offset$07$i*12)|0)|0);
        _FilterHorLumaEdge($1537,$1535,$1538,$40);
       }
       $1539 = HEAP32[$1331>>2]|0;
       $1540 = ($1539|0)==(0);
       if (!($1540)) {
        $1541 = (($ptr$05$i) + 8|0);
        $1542 = (($thresholds) + (($offset$07$i*12)|0)|0);
        _FilterHorLumaEdge($1541,$1539,$1542,$40);
       }
       $1543 = HEAP32[$1336>>2]|0;
       $1544 = ($1543|0)==(0);
       if ($1544) {
        break;
       }
       $1545 = (($ptr$05$i) + 12|0);
       $1546 = (($thresholds) + (($offset$07$i*12)|0)|0);
       _FilterHorLumaEdge($1545,$1543,$1546,$40);
      }
     } while(0);
     $1547 = (($ptr$05$i) + ($47)|0);
     $1548 = (($tmp$04$i) + 32|0);
     $1549 = (($1550) + -1)|0;
     $1551 = ($1550|0)==(0);
     if ($1551) {
      break;
     } else {
      $1550 = $1549;$offset$07$i = 2;$ptr$05$i = $1547;$tmp$04$i = $1548;
     }
    }
    $1552 = (($pMb$021) + 24|0);
    $1553 = HEAP32[$1552>>2]|0;
    $1554 = HEAP32[$1259>>2]|0;
    $1555 = (($1554) + ($1553))|0;
    $1556 = (_clip(0,51,$1555)|0);
    $1557 = (192 + ($1556<<2)|0);
    $1558 = HEAP32[$1557>>2]|0;
    $1559 = HEAP32[$1261>>2]|0;
    $1560 = (($1559) + ($1558))|0;
    $1561 = (_clip(0,51,$1560)|0);
    $1562 = HEAP32[$1265>>2]|0;
    $1563 = (($1562) + ($1558))|0;
    $1564 = (_clip(0,51,$1563)|0);
    $1565 = (6864 + ($1561)|0);
    $1566 = HEAP8[$1565>>0]|0;
    $1567 = $1566&255;
    HEAP32[$37>>2] = $1567;
    $1568 = (6920 + ($1564)|0);
    $1569 = HEAP8[$1568>>0]|0;
    $1570 = $1569&255;
    HEAP32[$38>>2] = $1570;
    $1571 = (6976 + (($1561*3)|0)|0);
    HEAP32[$39>>2] = $1571;
    do {
     if (!($79)) {
      $1572 = HEAP32[$69>>2]|0;
      $1573 = (($1572) + 20|0);
      $1574 = HEAP32[$1573>>2]|0;
      $1575 = HEAP32[$1259>>2]|0;
      $1576 = ($1574|0)==($1575|0);
      if ($1576) {
       HEAP32[$56>>2] = $1567;
       HEAP32[$57>>2] = $1570;
       HEAP32[$thresholds>>2] = $1571;
       break;
      } else {
       $1577 = (($1574) + ($1553))|0;
       $1578 = (_clip(0,51,$1577)|0);
       $1579 = (192 + ($1578<<2)|0);
       $1580 = HEAP32[$1579>>2]|0;
       $1581 = (($1558) + 1)|0;
       $1582 = (($1581) + ($1580))|0;
       $1583 = $1582 >>> 1;
       $1584 = HEAP32[$1261>>2]|0;
       $1585 = (($1583) + ($1584))|0;
       $1586 = (_clip(0,51,$1585)|0);
       $1587 = HEAP32[$1265>>2]|0;
       $1588 = (($1587) + ($1583))|0;
       $1589 = (_clip(0,51,$1588)|0);
       $1590 = (6864 + ($1586)|0);
       $1591 = HEAP8[$1590>>0]|0;
       $1592 = $1591&255;
       HEAP32[$56>>2] = $1592;
       $1593 = (6920 + ($1589)|0);
       $1594 = HEAP8[$1593>>0]|0;
       $1595 = $1594&255;
       HEAP32[$57>>2] = $1595;
       $1596 = (6976 + (($1586*3)|0)|0);
       HEAP32[$thresholds>>2] = $1596;
       break;
      }
     }
    } while(0);
    do {
     if (!($208)) {
      $1597 = HEAP32[$61>>2]|0;
      $1598 = (($1597) + 20|0);
      $1599 = HEAP32[$1598>>2]|0;
      $1600 = HEAP32[$1259>>2]|0;
      $1601 = ($1599|0)==($1600|0);
      if ($1601) {
       $1622 = HEAP32[$37>>2]|0;
       HEAP32[$53>>2] = $1622;
       $1623 = HEAP32[$38>>2]|0;
       HEAP32[$54>>2] = $1623;
       $1624 = HEAP32[$39>>2]|0;
       HEAP32[$55>>2] = $1624;
       break;
      } else {
       $1602 = (($1599) + ($1553))|0;
       $1603 = (_clip(0,51,$1602)|0);
       $1604 = (192 + ($1603<<2)|0);
       $1605 = HEAP32[$1604>>2]|0;
       $1606 = (($1558) + 1)|0;
       $1607 = (($1606) + ($1605))|0;
       $1608 = $1607 >>> 1;
       $1609 = HEAP32[$1261>>2]|0;
       $1610 = (($1608) + ($1609))|0;
       $1611 = (_clip(0,51,$1610)|0);
       $1612 = HEAP32[$1265>>2]|0;
       $1613 = (($1612) + ($1608))|0;
       $1614 = (_clip(0,51,$1613)|0);
       $1615 = (6864 + ($1611)|0);
       $1616 = HEAP8[$1615>>0]|0;
       $1617 = $1616&255;
       HEAP32[$53>>2] = $1617;
       $1618 = (6920 + ($1614)|0);
       $1619 = HEAP8[$1618>>0]|0;
       $1620 = $1619&255;
       HEAP32[$54>>2] = $1620;
       $1621 = (6976 + (($1611*3)|0)|0);
       HEAP32[$55>>2] = $1621;
       break;
      }
     }
    } while(0);
    $1625 = HEAP32[$image>>2]|0;
    $1626 = $1320 << 6;
    $1627 = $mbCol$018 << 3;
    $$sum1 = (($1627) + ($50))|0;
    $$sum2 = (($$sum1) + ($1626))|0;
    $1628 = (($1625) + ($$sum2)|0);
    $$sum3 = (($$sum2) + ($51))|0;
    $1629 = (($1625) + ($$sum3)|0);
    $$013$i = $1629;$$05$i = $1628;$offset$010$i = 0;$tmp$08$i = $bS;$vblock$07$i = 0;
    while(1) {
     $1630 = (($tmp$08$i) + 4|0);
     $1631 = HEAP32[$1630>>2]|0;
     $1632 = ($1631|0)==(0);
     if (!($1632)) {
      _FilterVerChromaEdge($$05$i,$1631,$49,$52);
      $1633 = HEAP32[$1630>>2]|0;
      _FilterVerChromaEdge($$013$i,$1633,$49,$52);
     }
     $1634 = (($tmp$08$i) + 36|0);
     $1635 = HEAP32[$1634>>2]|0;
     $1636 = ($1635|0)==(0);
     if (!($1636)) {
      $1637 = (($$05$i) + ($40)|0);
      _FilterVerChromaEdge($1637,$1635,$49,$52);
      $1638 = (($$013$i) + ($40)|0);
      $1639 = HEAP32[$1634>>2]|0;
      _FilterVerChromaEdge($1638,$1639,$49,$52);
     }
     $1640 = (($tmp$08$i) + 16|0);
     $1641 = (($tmp$08$i) + 20|0);
     $1642 = HEAP32[$1641>>2]|0;
     $1643 = ($1642|0)==(0);
     if (!($1643)) {
      $1644 = (($$05$i) + 4|0);
      _FilterVerChromaEdge($1644,$1642,$48,$52);
      $1645 = (($$013$i) + 4|0);
      $1646 = HEAP32[$1641>>2]|0;
      _FilterVerChromaEdge($1645,$1646,$48,$52);
     }
     $1647 = (($tmp$08$i) + 52|0);
     $1648 = HEAP32[$1647>>2]|0;
     $1649 = ($1648|0)==(0);
     if (!($1649)) {
      $1650 = (($$05$i) + ($$sum$i14)|0);
      _FilterVerChromaEdge($1650,$1648,$48,$52);
      $1651 = (($$013$i) + ($$sum$i14)|0);
      $1652 = HEAP32[$1647>>2]|0;
      _FilterVerChromaEdge($1651,$1652,$48,$52);
     }
     $1653 = HEAP32[$tmp$08$i>>2]|0;
     $1654 = (($tmp$08$i) + 8|0);
     $1655 = HEAP32[$1654>>2]|0;
     $1656 = ($1653|0)==($1655|0);
     do {
      if ($1656) {
       $1657 = HEAP32[$1640>>2]|0;
       $1658 = ($1653|0)==($1657|0);
       if (!($1658)) {
        label = 342;
        break;
       }
       $1659 = (($tmp$08$i) + 24|0);
       $1660 = HEAP32[$1659>>2]|0;
       $1661 = ($1653|0)==($1660|0);
       if (!($1661)) {
        label = 342;
        break;
       }
       $1662 = ($1653|0)==(0);
       if ($1662) {
        break;
       }
       $1663 = (($thresholds) + (($offset$010$i*12)|0)|0);
       _FilterHorChroma($$05$i,$1653,$1663,$52);
       $1664 = HEAP32[$tmp$08$i>>2]|0;
       _FilterHorChroma($$013$i,$1664,$1663,$52);
      } else {
       label = 342;
      }
     } while(0);
     do {
      if ((label|0) == 342) {
       label = 0;
       $1665 = ($1653|0)==(0);
       if ($1665) {
        $1668 = $1655;
       } else {
        $1666 = (($thresholds) + (($offset$010$i*12)|0)|0);
        _FilterHorChromaEdge($$05$i,$1653,$1666,$52);
        $1667 = HEAP32[$tmp$08$i>>2]|0;
        _FilterHorChromaEdge($$013$i,$1667,$1666,$52);
        $$pre$i = HEAP32[$1654>>2]|0;
        $1668 = $$pre$i;
       }
       $1669 = ($1668|0)==(0);
       if (!($1669)) {
        $1670 = (($$05$i) + 2|0);
        $1671 = (($thresholds) + (($offset$010$i*12)|0)|0);
        _FilterHorChromaEdge($1670,$1668,$1671,$52);
        $1672 = (($$013$i) + 2|0);
        $1673 = HEAP32[$1654>>2]|0;
        _FilterHorChromaEdge($1672,$1673,$1671,$52);
       }
       $1674 = HEAP32[$1640>>2]|0;
       $1675 = ($1674|0)==(0);
       if (!($1675)) {
        $1676 = (($$05$i) + 4|0);
        $1677 = (($thresholds) + (($offset$010$i*12)|0)|0);
        _FilterHorChromaEdge($1676,$1674,$1677,$52);
        $1678 = (($$013$i) + 4|0);
        $1679 = HEAP32[$1640>>2]|0;
        _FilterHorChromaEdge($1678,$1679,$1677,$52);
       }
       $1680 = (($tmp$08$i) + 24|0);
       $1681 = HEAP32[$1680>>2]|0;
       $1682 = ($1681|0)==(0);
       if ($1682) {
        break;
       }
       $1683 = (($$05$i) + 6|0);
       $1684 = (($thresholds) + (($offset$010$i*12)|0)|0);
       _FilterHorChromaEdge($1683,$1681,$1684,$52);
       $1685 = (($$013$i) + 6|0);
       $1686 = HEAP32[$1680>>2]|0;
       _FilterHorChromaEdge($1685,$1686,$1684,$52);
      }
     } while(0);
     $1687 = (($tmp$08$i) + 64|0);
     $1688 = (($$05$i) + ($44)|0);
     $1689 = (($$013$i) + ($44)|0);
     $1690 = (($vblock$07$i) + 1)|0;
     $exitcond$i = ($1690|0)==(2);
     if ($exitcond$i) {
      break;
     } else {
      $$013$i = $1689;$$05$i = $1688;$offset$010$i = 2;$tmp$08$i = $1687;$vblock$07$i = $1690;
     }
    }
   }
  } while(0);
  $1691 = (($mbCol$018) + 1)|0;
  $1692 = ($1691|0)==($1|0);
  $$ = $1692 ? 0 : $1691;
  $1693 = $1692&1;
  $$mbRow$0 = (($1693) + ($mbRow$020))|0;
  $1694 = (($pMb$021) + 216|0);
  $1695 = HEAP32[$2>>2]|0;
  $1696 = ($$mbRow$0>>>0)<($1695>>>0);
  if ($1696) {
   $mbCol$018 = $$;$mbRow$020 = $$mbRow$0;$pMb$021 = $1694;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _GetBoundaryStrengthsA($mb,$bS) {
 $mb = $mb|0;
 $bS = $bS|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp = 0, $phitmp1 = 0, $phitmp10 = 0, $phitmp11 = 0, $phitmp12 = 0, $phitmp13 = 0, $phitmp14 = 0, $phitmp15 = 0, $phitmp16 = 0, $phitmp17 = 0, $phitmp18 = 0, $phitmp19 = 0, $phitmp2 = 0, $phitmp20 = 0;
 var $phitmp21 = 0, $phitmp22 = 0, $phitmp23 = 0, $phitmp3 = 0, $phitmp4 = 0, $phitmp5 = 0, $phitmp6 = 0, $phitmp7 = 0, $phitmp8 = 0, $phitmp9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($mb) + 28|0);
 $1 = (($mb) + 32|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)==(0);
 if ($3) {
  $4 = HEAP16[$0>>1]|0;
  $5 = ($4<<16>>16)!=(0);
  $phitmp = $5 ? 2 : 0;
  $7 = $phitmp;
 } else {
  $7 = 2;
 }
 $6 = (($bS) + 32|0);
 HEAP32[$6>>2] = $7;
 $8 = (($mb) + 34|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9<<16>>16)==(0);
 if ($10) {
  $11 = (($mb) + 30|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = ($12<<16>>16)!=(0);
  $phitmp1 = $13 ? 2 : 0;
  $15 = $phitmp1;
 } else {
  $15 = 2;
 }
 $14 = (($bS) + 40|0);
 HEAP32[$14>>2] = $15;
 $16 = (($mb) + 40|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = ($17<<16>>16)==(0);
 if ($18) {
  $19 = (($mb) + 36|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = ($20<<16>>16)!=(0);
  $phitmp2 = $21 ? 2 : 0;
  $23 = $phitmp2;
 } else {
  $23 = 2;
 }
 $22 = (($bS) + 48|0);
 HEAP32[$22>>2] = $23;
 $24 = (($mb) + 42|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = ($25<<16>>16)==(0);
 if ($26) {
  $27 = (($mb) + 38|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = ($28<<16>>16)!=(0);
  $phitmp3 = $29 ? 2 : 0;
  $31 = $phitmp3;
 } else {
  $31 = 2;
 }
 $30 = (($bS) + 56|0);
 HEAP32[$30>>2] = $31;
 $32 = (($mb) + 44|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = ($33<<16>>16)==(0);
 if ($34) {
  $35 = ($2<<16>>16)!=(0);
  $phitmp4 = $35 ? 2 : 0;
  $37 = $phitmp4;
 } else {
  $37 = 2;
 }
 $36 = (($bS) + 64|0);
 HEAP32[$36>>2] = $37;
 $38 = (($mb) + 46|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = ($39<<16>>16)==(0);
 if ($40) {
  $41 = ($9<<16>>16)!=(0);
  $phitmp5 = $41 ? 2 : 0;
  $43 = $phitmp5;
 } else {
  $43 = 2;
 }
 $42 = (($bS) + 72|0);
 HEAP32[$42>>2] = $43;
 $44 = (($mb) + 52|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = ($45<<16>>16)==(0);
 if ($46) {
  $47 = ($17<<16>>16)!=(0);
  $phitmp6 = $47 ? 2 : 0;
  $49 = $phitmp6;
 } else {
  $49 = 2;
 }
 $48 = (($bS) + 80|0);
 HEAP32[$48>>2] = $49;
 $50 = (($mb) + 54|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = ($51<<16>>16)==(0);
 if ($52) {
  $53 = ($25<<16>>16)!=(0);
  $phitmp7 = $53 ? 2 : 0;
  $55 = $phitmp7;
 } else {
  $55 = 2;
 }
 $54 = (($bS) + 88|0);
 HEAP32[$54>>2] = $55;
 $56 = (($mb) + 48|0);
 $57 = HEAP16[$56>>1]|0;
 $58 = ($57<<16>>16)==(0);
 if ($58) {
  $59 = ($33<<16>>16)!=(0);
  $phitmp8 = $59 ? 2 : 0;
  $61 = $phitmp8;
 } else {
  $61 = 2;
 }
 $60 = (($bS) + 96|0);
 HEAP32[$60>>2] = $61;
 $62 = (($mb) + 50|0);
 $63 = HEAP16[$62>>1]|0;
 $64 = ($63<<16>>16)==(0);
 if ($64) {
  $65 = ($39<<16>>16)!=(0);
  $phitmp9 = $65 ? 2 : 0;
  $67 = $phitmp9;
 } else {
  $67 = 2;
 }
 $66 = (($bS) + 104|0);
 HEAP32[$66>>2] = $67;
 $68 = (($mb) + 56|0);
 $69 = HEAP16[$68>>1]|0;
 $70 = ($69<<16>>16)==(0);
 if ($70) {
  $71 = ($45<<16>>16)!=(0);
  $phitmp10 = $71 ? 2 : 0;
  $73 = $phitmp10;
 } else {
  $73 = 2;
 }
 $72 = (($bS) + 112|0);
 HEAP32[$72>>2] = $73;
 $74 = (($mb) + 58|0);
 $75 = HEAP16[$74>>1]|0;
 $76 = ($75<<16>>16)==(0);
 if ($76) {
  $77 = ($51<<16>>16)!=(0);
  $phitmp11 = $77 ? 2 : 0;
  $79 = $phitmp11;
 } else {
  $79 = 2;
 }
 $78 = (($bS) + 120|0);
 HEAP32[$78>>2] = $79;
 $80 = (($mb) + 30|0);
 $81 = HEAP16[$80>>1]|0;
 $82 = ($81<<16>>16)==(0);
 if ($82) {
  $83 = HEAP16[$0>>1]|0;
  $84 = ($83<<16>>16)!=(0);
  $phitmp12 = $84 ? 2 : 0;
  $86 = $phitmp12;
 } else {
  $86 = 2;
 }
 $85 = (($bS) + 12|0);
 HEAP32[$85>>2] = $86;
 $87 = (($mb) + 36|0);
 $88 = HEAP16[$87>>1]|0;
 $89 = ($88<<16>>16)==(0);
 if ($89) {
  $90 = ($81<<16>>16)!=(0);
  $phitmp13 = $90 ? 2 : 0;
  $92 = $phitmp13;
 } else {
  $92 = 2;
 }
 $91 = (($bS) + 20|0);
 HEAP32[$91>>2] = $92;
 $93 = (($mb) + 38|0);
 $94 = HEAP16[$93>>1]|0;
 $95 = ($94<<16>>16)==(0);
 if ($95) {
  $96 = ($88<<16>>16)!=(0);
  $phitmp14 = $96 ? 2 : 0;
  $98 = $phitmp14;
 } else {
  $98 = 2;
 }
 $97 = (($bS) + 28|0);
 HEAP32[$97>>2] = $98;
 if ($10) {
  $99 = ($2<<16>>16)!=(0);
  $phitmp15 = $99 ? 2 : 0;
  $101 = $phitmp15;
 } else {
  $101 = 2;
 }
 $100 = (($bS) + 44|0);
 HEAP32[$100>>2] = $101;
 if ($18) {
  $102 = ($9<<16>>16)!=(0);
  $phitmp16 = $102 ? 2 : 0;
  $104 = $phitmp16;
 } else {
  $104 = 2;
 }
 $103 = (($bS) + 52|0);
 HEAP32[$103>>2] = $104;
 if ($26) {
  $105 = ($17<<16>>16)!=(0);
  $phitmp17 = $105 ? 2 : 0;
  $107 = $phitmp17;
 } else {
  $107 = 2;
 }
 $106 = (($bS) + 60|0);
 HEAP32[$106>>2] = $107;
 if ($40) {
  $108 = ($33<<16>>16)!=(0);
  $phitmp18 = $108 ? 2 : 0;
  $110 = $phitmp18;
 } else {
  $110 = 2;
 }
 $109 = (($bS) + 76|0);
 HEAP32[$109>>2] = $110;
 if ($46) {
  $111 = ($39<<16>>16)!=(0);
  $phitmp19 = $111 ? 2 : 0;
  $113 = $phitmp19;
 } else {
  $113 = 2;
 }
 $112 = (($bS) + 84|0);
 HEAP32[$112>>2] = $113;
 if ($52) {
  $114 = ($45<<16>>16)!=(0);
  $phitmp20 = $114 ? 2 : 0;
  $116 = $phitmp20;
 } else {
  $116 = 2;
 }
 $115 = (($bS) + 92|0);
 HEAP32[$115>>2] = $116;
 if ($64) {
  $117 = ($57<<16>>16)!=(0);
  $phitmp21 = $117 ? 2 : 0;
  $119 = $phitmp21;
 } else {
  $119 = 2;
 }
 $118 = (($bS) + 108|0);
 HEAP32[$118>>2] = $119;
 if ($70) {
  $120 = ($63<<16>>16)!=(0);
  $phitmp22 = $120 ? 2 : 0;
  $122 = $phitmp22;
 } else {
  $122 = 2;
 }
 $121 = (($bS) + 116|0);
 HEAP32[$121>>2] = $122;
 if (!($76)) {
  $125 = 2;
  $124 = (($bS) + 124|0);
  HEAP32[$124>>2] = $125;
  STACKTOP = sp;return;
 }
 $123 = ($69<<16>>16)!=(0);
 $phitmp23 = $123 ? 2 : 0;
 $125 = $phitmp23;
 $124 = (($bS) + 124|0);
 HEAP32[$124>>2] = $125;
 STACKTOP = sp;return;
}
function _FilterVerLumaEdge($data,$bS,$thresholds,$imageWidth) {
 $data = $data|0;
 $bS = $bS|0;
 $thresholds = $thresholds|0;
 $imageWidth = $imageWidth|0;
 var $$024 = 0, $$128 = 0, $$sum = 0, $$sum19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$023 = 0, $i$127 = 0, $ispos = 0, $ispos1 = 0, $ispos11 = 0, $ispos13 = 0, $ispos15 = 0, $ispos17 = 0, $ispos3 = 0, $ispos5 = 0, $ispos7 = 0, $ispos9 = 0, $neg = 0, $neg10 = 0;
 var $neg12 = 0, $neg14 = 0, $neg16 = 0, $neg18 = 0, $neg2 = 0, $neg4 = 0, $neg6 = 0, $neg8 = 0, $tmp$1 = 0, $tmp$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($thresholds) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($thresholds) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($bS>>>0)<(4);
 if ($4) {
  $7 = (($bS) + -1)|0;
  $8 = HEAP32[$thresholds>>2]|0;
  $9 = (($8) + ($7)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = (0 - ($11))|0;
  $13 = (($11) + 1)|0;
  $$024 = $data;$i$023 = 4;
  while(1) {
   $14 = (($$024) + -2|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = (($$024) + -1|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = HEAP8[$$024>>0]|0;
   $21 = $20&255;
   $22 = (($$024) + 1|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = (($19) - ($21))|0;
   $ispos9 = ($25|0)>(-1);
   $neg10 = (0 - ($25))|0;
   $26 = $ispos9 ? $25 : $neg10;
   $27 = ($26>>>0)<($1>>>0);
   if ($27) {
    $28 = (($16) - ($19))|0;
    $ispos11 = ($28|0)>(-1);
    $neg12 = (0 - ($28))|0;
    $29 = $ispos11 ? $28 : $neg12;
    $30 = ($29>>>0)<($3>>>0);
    if ($30) {
     $31 = (($24) - ($21))|0;
     $ispos13 = ($31|0)>(-1);
     $neg14 = (0 - ($31))|0;
     $32 = $ispos13 ? $31 : $neg14;
     $33 = ($32>>>0)<($3>>>0);
     if ($33) {
      $34 = (($$024) + -3|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = $35&255;
      $37 = (($$024) + 2|0);
      $38 = HEAP8[$37>>0]|0;
      $39 = $38&255;
      $40 = (($36) - ($19))|0;
      $ispos15 = ($40|0)>(-1);
      $neg16 = (0 - ($40))|0;
      $41 = $ispos15 ? $40 : $neg16;
      $42 = ($41>>>0)<($3>>>0);
      if ($42) {
       $43 = (($19) + 1)|0;
       $44 = (($43) + ($21))|0;
       $45 = $44 >>> 1;
       $46 = $16 << 1;
       $47 = (($45) - ($46))|0;
       $48 = (($47) + ($36))|0;
       $49 = $48 >> 1;
       $50 = (_clip($12,$11,$49)|0);
       $51 = (($50) + ($16))|0;
       $52 = $51&255;
       HEAP8[$14>>0] = $52;
       $tmp$1 = $13;
      } else {
       $tmp$1 = $11;
      }
      $53 = (($39) - ($21))|0;
      $ispos17 = ($53|0)>(-1);
      $neg18 = (0 - ($53))|0;
      $54 = $ispos17 ? $53 : $neg18;
      $55 = ($54>>>0)<($3>>>0);
      if ($55) {
       $56 = (($19) + 1)|0;
       $57 = (($56) + ($21))|0;
       $58 = $57 >>> 1;
       $59 = $24 << 1;
       $60 = (($58) - ($59))|0;
       $61 = (($60) + ($39))|0;
       $62 = $61 >> 1;
       $63 = (_clip($12,$11,$62)|0);
       $64 = (($63) + ($24))|0;
       $65 = $64&255;
       HEAP8[$22>>0] = $65;
       $66 = (($tmp$1) + 1)|0;
       $tmp$2 = $66;
      } else {
       $tmp$2 = $tmp$1;
      }
      $67 = (($21) - ($19))|0;
      $68 = $67 << 2;
      $69 = (($16) + 4)|0;
      $70 = (($69) - ($24))|0;
      $71 = (($70) + ($68))|0;
      $72 = $71 >> 3;
      $73 = (0 - ($tmp$2))|0;
      $74 = (_clip($73,$tmp$2,$72)|0);
      $75 = $19 | 512;
      $$sum = (($75) + ($74))|0;
      $76 = (3472 + ($$sum)|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = $21 | 512;
      $$sum19 = (($78) - ($74))|0;
      $79 = (3472 + ($$sum19)|0);
      $80 = HEAP8[$79>>0]|0;
      HEAP8[$17>>0] = $77;
      HEAP8[$$024>>0] = $80;
     }
    }
   }
   $81 = (($i$023) + -1)|0;
   $82 = (($$024) + ($imageWidth)|0);
   $83 = ($81|0)==(0);
   if ($83) {
    break;
   } else {
    $$024 = $82;$i$023 = $81;
   }
  }
  STACKTOP = sp;return;
 }
 $5 = $1 >>> 2;
 $6 = (($5) + 2)|0;
 $$128 = $data;$i$127 = 4;
 while(1) {
  $84 = (($$128) + -2|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = (($$128) + -1|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = HEAP8[$$128>>0]|0;
  $91 = $90&255;
  $92 = (($$128) + 1|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = (($89) - ($91))|0;
  $ispos = ($95|0)>(-1);
  $neg = (0 - ($95))|0;
  $96 = $ispos ? $95 : $neg;
  $97 = ($96>>>0)<($1>>>0);
  do {
   if ($97) {
    $98 = (($86) - ($89))|0;
    $ispos1 = ($98|0)>(-1);
    $neg2 = (0 - ($98))|0;
    $99 = $ispos1 ? $98 : $neg2;
    $100 = ($99>>>0)<($3>>>0);
    if ($100) {
     $101 = (($94) - ($91))|0;
     $ispos3 = ($101|0)>(-1);
     $neg4 = (0 - ($101))|0;
     $102 = $ispos3 ? $101 : $neg4;
     $103 = ($102>>>0)<($3>>>0);
     if ($103) {
      $104 = ($96>>>0)<($6>>>0);
      $105 = (($$128) + -3|0);
      $106 = HEAP8[$105>>0]|0;
      $107 = $106&255;
      $108 = (($$128) + 2|0);
      $109 = HEAP8[$108>>0]|0;
      $110 = $109&255;
      if ($104) {
       $111 = (($107) - ($89))|0;
       $ispos7 = ($111|0)>(-1);
       $neg8 = (0 - ($111))|0;
       $112 = $ispos7 ? $111 : $neg8;
       $113 = ($112>>>0)<($3>>>0);
       if ($113) {
        $114 = (($89) + ($86))|0;
        $115 = (($114) + ($91))|0;
        $116 = $115 << 1;
        $117 = (($94) + 4)|0;
        $118 = (($117) + ($116))|0;
        $119 = (($118) + ($107))|0;
        $120 = $119 >>> 3;
        $121 = $120&255;
        HEAP8[$87>>0] = $121;
        $122 = (($115) + 2)|0;
        $123 = (($122) + ($107))|0;
        $124 = $123 >>> 2;
        $125 = $124&255;
        HEAP8[$84>>0] = $125;
        $126 = (($$128) + -4|0);
        $127 = HEAP8[$126>>0]|0;
        $128 = $127&255;
        $129 = $128 << 1;
        $130 = ($107*3)|0;
        $131 = (($115) + 4)|0;
        $132 = (($131) + ($130))|0;
        $133 = (($132) + ($129))|0;
        $134 = $133 >>> 3;
        $135 = $134&255;
        HEAP8[$105>>0] = $135;
       } else {
        $136 = $86 << 1;
        $137 = (($89) + 2)|0;
        $138 = (($137) + ($136))|0;
        $139 = (($138) + ($94))|0;
        $140 = $139 >>> 2;
        $141 = $140&255;
        HEAP8[$87>>0] = $141;
       }
       $142 = (($110) - ($91))|0;
       $ispos5 = ($142|0)>(-1);
       $neg6 = (0 - ($142))|0;
       $143 = $ispos5 ? $142 : $neg6;
       $144 = ($143>>>0)<($3>>>0);
       if ($144) {
        $145 = (($91) + ($89))|0;
        $146 = (($145) + ($94))|0;
        $147 = $146 << 1;
        $148 = (($86) + 4)|0;
        $149 = (($148) + ($147))|0;
        $150 = (($149) + ($110))|0;
        $151 = $150 >>> 3;
        $152 = $151&255;
        HEAP8[$$128>>0] = $152;
        $153 = (($146) + 2)|0;
        $154 = (($153) + ($110))|0;
        $155 = $154 >>> 2;
        $156 = $155&255;
        HEAP8[$92>>0] = $156;
        $157 = (($$128) + 3|0);
        $158 = HEAP8[$157>>0]|0;
        $159 = $158&255;
        $160 = $159 << 1;
        $161 = ($110*3)|0;
        $162 = (($146) + 4)|0;
        $163 = (($162) + ($161))|0;
        $164 = (($163) + ($160))|0;
        $165 = $164 >>> 3;
        $166 = $165&255;
        HEAP8[$108>>0] = $166;
        break;
       }
      } else {
       $167 = $86 << 1;
       $168 = (($89) + 2)|0;
       $169 = (($168) + ($167))|0;
       $170 = (($169) + ($94))|0;
       $171 = $170 >>> 2;
       $172 = $171&255;
       HEAP8[$87>>0] = $172;
      }
      $173 = $94 << 1;
      $174 = (($86) + 2)|0;
      $175 = (($174) + ($91))|0;
      $176 = (($175) + ($173))|0;
      $177 = $176 >>> 2;
      $178 = $177&255;
      HEAP8[$$128>>0] = $178;
     }
    }
   }
  } while(0);
  $179 = (($i$127) + -1)|0;
  $180 = (($$128) + ($imageWidth)|0);
  $181 = ($179|0)==(0);
  if ($181) {
   break;
  } else {
   $$128 = $180;$i$127 = $179;
  }
 }
 STACKTOP = sp;return;
}
function _FilterHorLumaEdge($data,$bS,$thresholds,$imageWidth) {
 $data = $data|0;
 $bS = $bS|0;
 $thresholds = $thresholds|0;
 $imageWidth = $imageWidth|0;
 var $$014 = 0, $$pre = 0, $$sum = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $i$013 = 0, $ispos = 0, $ispos1 = 0, $ispos3 = 0, $ispos5 = 0, $ispos7 = 0, $neg = 0, $neg2 = 0, $neg4 = 0, $neg6 = 0;
 var $neg8 = 0, $tmp$1 = 0, $tmp$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($bS) + -1)|0;
 $1 = HEAP32[$thresholds>>2]|0;
 $2 = (($1) + ($0)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (0 - ($imageWidth))|0;
 $6 = $5 << 1;
 $7 = (($thresholds) + 4|0);
 $8 = (($thresholds) + 8|0);
 $9 = Math_imul($imageWidth, -3)|0;
 $10 = (0 - ($4))|0;
 $11 = (($4) + 1)|0;
 $12 = $imageWidth << 1;
 $$014 = $data;$i$013 = 4;
 while(1) {
  $13 = (($$014) + ($6)|0);
  $14 = (($$014) + ($5)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = HEAP8[$$014>>0]|0;
  $17 = (($$014) + ($imageWidth)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $15&255;
  $20 = $16&255;
  $21 = (($19) - ($20))|0;
  $ispos = ($21|0)>(-1);
  $neg = (0 - ($21))|0;
  $22 = $ispos ? $21 : $neg;
  $23 = HEAP32[$7>>2]|0;
  $24 = ($22>>>0)<($23>>>0);
  if ($24) {
   $25 = HEAP8[$13>>0]|0;
   $26 = $25&255;
   $27 = (($26) - ($19))|0;
   $ispos1 = ($27|0)>(-1);
   $neg2 = (0 - ($27))|0;
   $28 = $ispos1 ? $27 : $neg2;
   $29 = HEAP32[$8>>2]|0;
   $30 = ($28>>>0)<($29>>>0);
   if ($30) {
    $31 = $18&255;
    $32 = (($31) - ($20))|0;
    $ispos3 = ($32|0)>(-1);
    $neg4 = (0 - ($32))|0;
    $33 = $ispos3 ? $32 : $neg4;
    $34 = ($33>>>0)<($29>>>0);
    if ($34) {
     $35 = (($$014) + ($9)|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = (($37) - ($19))|0;
     $ispos5 = ($38|0)>(-1);
     $neg6 = (0 - ($38))|0;
     $39 = $ispos5 ? $38 : $neg6;
     $40 = ($39>>>0)<($29>>>0);
     if ($40) {
      $41 = (($19) + 1)|0;
      $42 = (($41) + ($20))|0;
      $43 = $42 >>> 1;
      $44 = $26 << 1;
      $45 = (($43) - ($44))|0;
      $46 = (($45) + ($37))|0;
      $47 = $46 >> 1;
      $48 = (_clip($10,$4,$47)|0);
      $49 = (($48) + ($26))|0;
      $50 = $49&255;
      HEAP8[$13>>0] = $50;
      $$pre = HEAP32[$8>>2]|0;
      $57 = $$pre;$tmp$1 = $11;
     } else {
      $57 = $29;$tmp$1 = $4;
     }
     $51 = (($$014) + ($12)|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52&255;
     $54 = (($53) - ($20))|0;
     $ispos7 = ($54|0)>(-1);
     $neg8 = (0 - ($54))|0;
     $55 = $ispos7 ? $54 : $neg8;
     $56 = ($55>>>0)<($57>>>0);
     if ($56) {
      $58 = (($19) + 1)|0;
      $59 = (($58) + ($20))|0;
      $60 = $59 >>> 1;
      $61 = $31 << 1;
      $62 = (($60) - ($61))|0;
      $63 = (($62) + ($53))|0;
      $64 = $63 >> 1;
      $65 = (_clip($10,$4,$64)|0);
      $66 = (($65) + ($31))|0;
      $67 = $66&255;
      HEAP8[$17>>0] = $67;
      $68 = (($tmp$1) + 1)|0;
      $tmp$2 = $68;
     } else {
      $tmp$2 = $tmp$1;
     }
     $69 = (($20) - ($19))|0;
     $70 = $69 << 2;
     $71 = (4 - ($31))|0;
     $72 = (($71) + ($70))|0;
     $73 = (($72) + ($26))|0;
     $74 = $73 >> 3;
     $75 = (0 - ($tmp$2))|0;
     $76 = (_clip($75,$tmp$2,$74)|0);
     $77 = $19 | 512;
     $$sum = (($77) + ($76))|0;
     $78 = (3472 + ($$sum)|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $20 | 512;
     $$sum9 = (($80) - ($76))|0;
     $81 = (3472 + ($$sum9)|0);
     $82 = HEAP8[$81>>0]|0;
     HEAP8[$14>>0] = $79;
     HEAP8[$$014>>0] = $82;
    }
   }
  }
  $83 = (($i$013) + -1)|0;
  $84 = (($$014) + 1|0);
  $85 = ($83|0)==(0);
  if ($85) {
   break;
  } else {
   $$014 = $84;$i$013 = $83;
  }
 }
 STACKTOP = sp;return;
}
function _FilterVerChromaEdge($data,$bS,$thresholds,$width) {
 $data = $data|0;
 $bS = $bS|0;
 $thresholds = $thresholds|0;
 $width = $width|0;
 var $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum15 = 0, $$sum16 = 0, $$sum2 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ispos = 0, $ispos11 = 0, $ispos13 = 0, $ispos3 = 0, $ispos5 = 0, $ispos7 = 0, $neg = 0, $neg12 = 0, $neg14 = 0, $neg4 = 0, $neg6 = 0, $neg8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($data) + -1|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = HEAP8[$data>>0]|0;
 $3 = (($data) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $1&255;
 $6 = $2&255;
 $7 = (($5) - ($6))|0;
 $ispos = ($7|0)>(-1);
 $neg = (0 - ($7))|0;
 $8 = $ispos ? $7 : $neg;
 $9 = (($thresholds) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 do {
  if ($11) {
   $12 = (($data) + -2|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = (($14) - ($5))|0;
   $ispos11 = ($15|0)>(-1);
   $neg12 = (0 - ($15))|0;
   $16 = $ispos11 ? $15 : $neg12;
   $17 = (($thresholds) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = $4&255;
    $21 = (($20) - ($6))|0;
    $ispos13 = ($21|0)>(-1);
    $neg14 = (0 - ($21))|0;
    $22 = $ispos13 ? $21 : $neg14;
    $23 = ($22>>>0)<($18>>>0);
    if ($23) {
     $24 = ($bS>>>0)<(4);
     if ($24) {
      $25 = (($bS) + -1)|0;
      $26 = HEAP32[$thresholds>>2]|0;
      $27 = (($26) + ($25)|0);
      $28 = HEAP8[$27>>0]|0;
      $29 = $28&255;
      $30 = (($29) + 1)|0;
      $31 = $29 ^ -1;
      $32 = (($6) - ($5))|0;
      $33 = $32 << 2;
      $34 = (4 - ($20))|0;
      $35 = (($34) + ($33))|0;
      $36 = (($35) + ($14))|0;
      $37 = $36 >> 3;
      $38 = (_clip($31,$30,$37)|0);
      $39 = $5 | 512;
      $$sum15 = (($39) + ($38))|0;
      $40 = (3472 + ($$sum15)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = $6 | 512;
      $$sum16 = (($42) - ($38))|0;
      $43 = (3472 + ($$sum16)|0);
      $44 = HEAP8[$43>>0]|0;
      HEAP8[$0>>0] = $41;
      HEAP8[$data>>0] = $44;
      break;
     } else {
      $45 = $14 << 1;
      $46 = (($5) + 2)|0;
      $47 = (($46) + ($20))|0;
      $48 = (($47) + ($45))|0;
      $49 = $48 >>> 2;
      $50 = $49&255;
      HEAP8[$0>>0] = $50;
      $51 = $20 << 1;
      $52 = (($6) + 2)|0;
      $53 = (($52) + ($51))|0;
      $54 = (($53) + ($14))|0;
      $55 = $54 >>> 2;
      $56 = $55&255;
      HEAP8[$data>>0] = $56;
      break;
     }
    }
   }
  }
 } while(0);
 $57 = (($data) + ($width)|0);
 $$sum1 = (($width) + -1)|0;
 $58 = (($data) + ($$sum1)|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = HEAP8[$57>>0]|0;
 $$sum2 = (($width) + 1)|0;
 $61 = (($data) + ($$sum2)|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $59&255;
 $64 = $60&255;
 $65 = (($63) - ($64))|0;
 $ispos3 = ($65|0)>(-1);
 $neg4 = (0 - ($65))|0;
 $66 = $ispos3 ? $65 : $neg4;
 $67 = HEAP32[$9>>2]|0;
 $68 = ($66>>>0)<($67>>>0);
 if (!($68)) {
  STACKTOP = sp;return;
 }
 $$sum = (($width) + -2)|0;
 $69 = (($data) + ($$sum)|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = (($71) - ($63))|0;
 $ispos5 = ($72|0)>(-1);
 $neg6 = (0 - ($72))|0;
 $73 = $ispos5 ? $72 : $neg6;
 $74 = (($thresholds) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($73>>>0)<($75>>>0);
 if (!($76)) {
  STACKTOP = sp;return;
 }
 $77 = $62&255;
 $78 = (($77) - ($64))|0;
 $ispos7 = ($78|0)>(-1);
 $neg8 = (0 - ($78))|0;
 $79 = $ispos7 ? $78 : $neg8;
 $80 = ($79>>>0)<($75>>>0);
 if (!($80)) {
  STACKTOP = sp;return;
 }
 $81 = ($bS>>>0)<(4);
 if ($81) {
  $82 = (($bS) + -1)|0;
  $83 = HEAP32[$thresholds>>2]|0;
  $84 = (($83) + ($82)|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = (($86) + 1)|0;
  $88 = $86 ^ -1;
  $89 = (($64) - ($63))|0;
  $90 = $89 << 2;
  $91 = (4 - ($77))|0;
  $92 = (($91) + ($90))|0;
  $93 = (($92) + ($71))|0;
  $94 = $93 >> 3;
  $95 = (_clip($88,$87,$94)|0);
  $96 = $63 | 512;
  $$sum9 = (($96) + ($95))|0;
  $97 = (3472 + ($$sum9)|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $64 | 512;
  $$sum10 = (($99) - ($95))|0;
  $100 = (3472 + ($$sum10)|0);
  $101 = HEAP8[$100>>0]|0;
  HEAP8[$58>>0] = $98;
  HEAP8[$57>>0] = $101;
  STACKTOP = sp;return;
 } else {
  $102 = $71 << 1;
  $103 = (($63) + 2)|0;
  $104 = (($103) + ($77))|0;
  $105 = (($104) + ($102))|0;
  $106 = $105 >>> 2;
  $107 = $106&255;
  HEAP8[$58>>0] = $107;
  $108 = $77 << 1;
  $109 = (($64) + 2)|0;
  $110 = (($109) + ($108))|0;
  $111 = (($110) + ($71))|0;
  $112 = $111 >>> 2;
  $113 = $112&255;
  HEAP8[$57>>0] = $113;
  STACKTOP = sp;return;
 }
}
function _FilterHorChroma($data,$bS,$thresholds,$width) {
 $data = $data|0;
 $bS = $bS|0;
 $thresholds = $thresholds|0;
 $width = $width|0;
 var $$014 = 0, $$117 = 0, $$sum = 0, $$sum11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $i$013 = 0, $i$116 = 0, $ispos = 0, $ispos1 = 0, $ispos3 = 0;
 var $ispos5 = 0, $ispos7 = 0, $ispos9 = 0, $neg = 0, $neg10 = 0, $neg2 = 0, $neg4 = 0, $neg6 = 0, $neg8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bS>>>0)<(4);
 if ($0) {
  $5 = (($bS) + -1)|0;
  $6 = HEAP32[$thresholds>>2]|0;
  $7 = (($6) + ($5)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = (($9) + 1)|0;
  $11 = (0 - ($width))|0;
  $12 = (($thresholds) + 4|0);
  $13 = $11 << 1;
  $14 = (($thresholds) + 8|0);
  $15 = $9 ^ -1;
  $$014 = $data;$i$013 = 8;
  while(1) {
   $16 = (($$014) + ($11)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = HEAP8[$$014>>0]|0;
   $19 = (($$014) + ($width)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $17&255;
   $22 = $18&255;
   $23 = (($21) - ($22))|0;
   $ispos5 = ($23|0)>(-1);
   $neg6 = (0 - ($23))|0;
   $24 = $ispos5 ? $23 : $neg6;
   $25 = HEAP32[$12>>2]|0;
   $26 = ($24>>>0)<($25>>>0);
   if ($26) {
    $27 = (($$014) + ($13)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $30 = (($29) - ($21))|0;
    $ispos7 = ($30|0)>(-1);
    $neg8 = (0 - ($30))|0;
    $31 = $ispos7 ? $30 : $neg8;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($31>>>0)<($32>>>0);
    if ($33) {
     $34 = $20&255;
     $35 = (($34) - ($22))|0;
     $ispos9 = ($35|0)>(-1);
     $neg10 = (0 - ($35))|0;
     $36 = $ispos9 ? $35 : $neg10;
     $37 = ($36>>>0)<($32>>>0);
     if ($37) {
      $38 = (($22) - ($21))|0;
      $39 = $38 << 2;
      $40 = (4 - ($34))|0;
      $41 = (($40) + ($39))|0;
      $42 = (($41) + ($29))|0;
      $43 = $42 >> 3;
      $44 = (_clip($15,$10,$43)|0);
      $45 = $21 | 512;
      $$sum = (($45) + ($44))|0;
      $46 = (3472 + ($$sum)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = $22 | 512;
      $$sum11 = (($48) - ($44))|0;
      $49 = (3472 + ($$sum11)|0);
      $50 = HEAP8[$49>>0]|0;
      HEAP8[$16>>0] = $47;
      HEAP8[$$014>>0] = $50;
     }
    }
   }
   $51 = (($i$013) + -1)|0;
   $52 = (($$014) + 1|0);
   $53 = ($51|0)==(0);
   if ($53) {
    break;
   } else {
    $$014 = $52;$i$013 = $51;
   }
  }
  STACKTOP = sp;return;
 } else {
  $1 = (0 - ($width))|0;
  $2 = (($thresholds) + 4|0);
  $3 = $1 << 1;
  $4 = (($thresholds) + 8|0);
  $$117 = $data;$i$116 = 8;
  while(1) {
   $54 = (($$117) + ($1)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = HEAP8[$$117>>0]|0;
   $57 = (($$117) + ($width)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $55&255;
   $60 = $56&255;
   $61 = (($59) - ($60))|0;
   $ispos = ($61|0)>(-1);
   $neg = (0 - ($61))|0;
   $62 = $ispos ? $61 : $neg;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($$117) + ($3)|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = (($67) - ($59))|0;
    $ispos1 = ($68|0)>(-1);
    $neg2 = (0 - ($68))|0;
    $69 = $ispos1 ? $68 : $neg2;
    $70 = HEAP32[$4>>2]|0;
    $71 = ($69>>>0)<($70>>>0);
    if ($71) {
     $72 = $58&255;
     $73 = (($72) - ($60))|0;
     $ispos3 = ($73|0)>(-1);
     $neg4 = (0 - ($73))|0;
     $74 = $ispos3 ? $73 : $neg4;
     $75 = ($74>>>0)<($70>>>0);
     if ($75) {
      $76 = $67 << 1;
      $77 = (($59) + 2)|0;
      $78 = (($77) + ($72))|0;
      $79 = (($78) + ($76))|0;
      $80 = $79 >>> 2;
      $81 = $80&255;
      HEAP8[$54>>0] = $81;
      $82 = $72 << 1;
      $83 = (($60) + 2)|0;
      $84 = (($83) + ($82))|0;
      $85 = (($84) + ($67))|0;
      $86 = $85 >>> 2;
      $87 = $86&255;
      HEAP8[$$117>>0] = $87;
     }
    }
   }
   $88 = (($i$116) + -1)|0;
   $89 = (($$117) + 1|0);
   $90 = ($88|0)==(0);
   if ($90) {
    break;
   } else {
    $$117 = $89;$i$116 = $88;
   }
  }
  STACKTOP = sp;return;
 }
}
function _FilterHorChromaEdge($data,$bS,$thresholds,$width) {
 $data = $data|0;
 $bS = $bS|0;
 $thresholds = $thresholds|0;
 $width = $width|0;
 var $$pre = 0, $$sum = 0, $$sum$1 = 0, $$sum10 = 0, $$sum1112 = 0, $$sum5 = 0, $$sum5$1 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $ispos = 0, $ispos$1 = 0, $ispos1 = 0, $ispos1$1 = 0, $ispos3 = 0, $ispos3$1 = 0, $neg = 0, $neg$1 = 0, $neg2 = 0, $neg2$1 = 0;
 var $neg4 = 0, $neg4$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($bS) + -1)|0;
 $1 = HEAP32[$thresholds>>2]|0;
 $2 = (($1) + ($0)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($4) + 1)|0;
 $6 = (0 - ($width))|0;
 $7 = (($thresholds) + 4|0);
 $8 = $6 << 1;
 $9 = (($thresholds) + 8|0);
 $10 = $4 ^ -1;
 $11 = (($data) + ($6)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = HEAP8[$data>>0]|0;
 $14 = (($data) + ($width)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $12&255;
 $17 = $13&255;
 $18 = (($16) - ($17))|0;
 $ispos = ($18|0)>(-1);
 $neg = (0 - ($18))|0;
 $19 = $ispos ? $18 : $neg;
 $20 = HEAP32[$7>>2]|0;
 $21 = ($19>>>0)<($20>>>0);
 if ($21) {
  $22 = (($data) + ($8)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($24) - ($16))|0;
  $ispos1 = ($25|0)>(-1);
  $neg2 = (0 - ($25))|0;
  $26 = $ispos1 ? $25 : $neg2;
  $27 = HEAP32[$9>>2]|0;
  $28 = ($26>>>0)<($27>>>0);
  if ($28) {
   $29 = $15&255;
   $30 = (($29) - ($17))|0;
   $ispos3 = ($30|0)>(-1);
   $neg4 = (0 - ($30))|0;
   $31 = $ispos3 ? $30 : $neg4;
   $32 = ($31>>>0)<($27>>>0);
   if ($32) {
    $33 = (($17) - ($16))|0;
    $34 = $33 << 2;
    $35 = (4 - ($29))|0;
    $36 = (($35) + ($34))|0;
    $37 = (($36) + ($24))|0;
    $38 = $37 >> 3;
    $39 = (_clip($10,$5,$38)|0);
    $40 = $16 | 512;
    $$sum = (($40) + ($39))|0;
    $41 = (3472 + ($$sum)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $17 | 512;
    $$sum5 = (($43) - ($39))|0;
    $44 = (3472 + ($$sum5)|0);
    $45 = HEAP8[$44>>0]|0;
    HEAP8[$11>>0] = $42;
    HEAP8[$data>>0] = $45;
    $$pre = HEAP32[$7>>2]|0;
    $57 = $$pre;
   } else {
    $57 = $20;
   }
  } else {
   $57 = $20;
  }
 } else {
  $57 = $20;
 }
 $46 = (($data) + 1|0);
 $$sum9 = (1 - ($width))|0;
 $47 = (($data) + ($$sum9)|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = HEAP8[$46>>0]|0;
 $$sum10 = (($width) + 1)|0;
 $50 = (($data) + ($$sum10)|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $48&255;
 $53 = $49&255;
 $54 = (($52) - ($53))|0;
 $ispos$1 = ($54|0)>(-1);
 $neg$1 = (0 - ($54))|0;
 $55 = $ispos$1 ? $54 : $neg$1;
 $56 = ($55>>>0)<($57>>>0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $$sum1112 = $8 | 1;
 $58 = (($data) + ($$sum1112)|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = (($60) - ($52))|0;
 $ispos1$1 = ($61|0)>(-1);
 $neg2$1 = (0 - ($61))|0;
 $62 = $ispos1$1 ? $61 : $neg2$1;
 $63 = HEAP32[$9>>2]|0;
 $64 = ($62>>>0)<($63>>>0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 $65 = $51&255;
 $66 = (($65) - ($53))|0;
 $ispos3$1 = ($66|0)>(-1);
 $neg4$1 = (0 - ($66))|0;
 $67 = $ispos3$1 ? $66 : $neg4$1;
 $68 = ($67>>>0)<($63>>>0);
 if (!($68)) {
  STACKTOP = sp;return;
 }
 $69 = (($53) - ($52))|0;
 $70 = $69 << 2;
 $71 = (4 - ($65))|0;
 $72 = (($71) + ($70))|0;
 $73 = (($72) + ($60))|0;
 $74 = $73 >> 3;
 $75 = (_clip($10,$5,$74)|0);
 $76 = $52 | 512;
 $$sum$1 = (($76) + ($75))|0;
 $77 = (3472 + ($$sum$1)|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $53 | 512;
 $$sum5$1 = (($79) - ($75))|0;
 $80 = (3472 + ($$sum5$1)|0);
 $81 = HEAP8[$80>>0]|0;
 HEAP8[$47>>0] = $78;
 HEAP8[$46>>0] = $81;
 STACKTOP = sp;return;
}
function _h264bsdConceal($pStorage,$currImage,$sliceType) {
 $pStorage = $pStorage|0;
 $currImage = $currImage|0;
 $sliceType = $sliceType|0;
 var $$ = 0, $$in = 0, $$in50 = 0, $$old6 = 0, $$row$0 = 0, $$sum = 0, $$sum10 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $col$0$lcssa = 0, $col$029 = 0;
 var $exitcond = 0, $exitcond39 = 0, $exitcond40 = 0, $exitcond41 = 0, $i$0 = 0, $i$1$lcssa = 0, $i$130 = 0, $i$211 = 0, $i$3 = 0, $i$4 = 0, $i$4$in$ph = 0, $i$416 = 0, $i$417 = 0, $j$1 = 0, $j$123 = 0, $j$124 = 0, $j$220 = 0, $j$313 = 0, $mb$0 = 0, $or$cond3 = 0;
 var $or$cond7 = 0, $refData$0 = 0, $row$0$lcssa = 0, $row$028 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($currImage) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($currImage) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 if ((($sliceType|0) == 0) | (($sliceType|0) == 5)) {
  label = 3;
 } else {
  $4 = (($pStorage) + 3384|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $refData$0 = 0;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $7 = (($pStorage) + 1220|0);
  $i$0 = 0;
  while(1) {
   $8 = (_h264bsdGetRefPicData($7,$i$0)|0);
   $9 = (($i$0) + 1)|0;
   $10 = ($9>>>0)<(16);
   $11 = ($8|0)==(0|0);
   $or$cond3 = $10 & $11;
   if ($or$cond3) {
    $i$0 = $9;
   } else {
    $refData$0 = $8;
    break;
   }
  }
 }
 $12 = (($pStorage) + 1176|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = (($pStorage) + 1212|0);
  $16 = HEAP32[$15>>2]|0;
  $col$029 = 0;$i$130 = 0;$row$028 = 0;
  while(1) {
   $17 = ((($16) + (($i$130*216)|0)|0) + 196|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0);
   if (!($19)) {
    $col$0$lcssa = $col$029;$i$1$lcssa = $i$130;$row$0$lcssa = $row$028;
    break;
   }
   $20 = (($i$130) + 1)|0;
   $21 = (($col$029) + 1)|0;
   $22 = ($21|0)==($1|0);
   $23 = $22&1;
   $$row$0 = (($23) + ($row$028))|0;
   $$ = $22 ? 0 : $21;
   $24 = ($20>>>0)<($13>>>0);
   if ($24) {
    $col$029 = $$;$i$130 = $20;$row$028 = $$row$0;
   } else {
    $col$0$lcssa = $$;$i$1$lcssa = $20;$row$0$lcssa = $$row$0;
    break;
   }
  }
  $25 = ($i$1$lcssa|0)==($13|0);
  if (!($25)) {
   $43 = (($pStorage) + 1212|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = Math_imul($row$0$lcssa, $1)|0;
   $46 = ($col$0$lcssa|0)==(0);
   if (!($46)) {
    $47 = (($pStorage) + 1204|0);
    $$in = $col$0$lcssa;
    while(1) {
     $50 = (($$in) + -1)|0;
     $$sum10 = (($50) + ($45))|0;
     $51 = (($44) + (($$sum10*216)|0)|0);
     _ConcealMb($51,$currImage,$row$0$lcssa,$50,$sliceType,$refData$0);
     $52 = ((($44) + (($$sum10*216)|0)|0) + 196|0);
     HEAP32[$52>>2] = 1;
     $53 = HEAP32[$47>>2]|0;
     $54 = (($53) + 1)|0;
     HEAP32[$47>>2] = $54;
     $55 = ($50|0)==(0);
     if ($55) {
      break;
     } else {
      $$in = $50;
     }
    }
   }
   $j$123 = (($col$0$lcssa) + 1)|0;
   $48 = ($j$123>>>0)<($1>>>0);
   if ($48) {
    $49 = (($pStorage) + 1204|0);
    $j$124 = $j$123;
    while(1) {
     $$sum9 = (($j$124) + ($45))|0;
     $56 = ((($44) + (($$sum9*216)|0)|0) + 196|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0);
     if ($58) {
      $59 = (($44) + (($$sum9*216)|0)|0);
      _ConcealMb($59,$currImage,$row$0$lcssa,$j$124,$sliceType,$refData$0);
      HEAP32[$56>>2] = 1;
      $60 = HEAP32[$49>>2]|0;
      $61 = (($60) + 1)|0;
      HEAP32[$49>>2] = $61;
     }
     $j$1 = (($j$124) + 1)|0;
     $exitcond41 = ($j$1|0)==($1|0);
     if ($exitcond41) {
      break;
     } else {
      $j$124 = $j$1;
     }
    }
   }
   $62 = ($row$0$lcssa|0)==(0);
   if ($62) {
    $i$4$in$ph = 0;
   } else {
    $63 = ($1|0)==(0);
    if ($63) {
     $i$4$in$ph = $row$0$lcssa;
    } else {
     $64 = (($row$0$lcssa) + -1)|0;
     $65 = Math_imul($64, $1)|0;
     $66 = (($pStorage) + 1204|0);
     $67 = (0 - ($1))|0;
     $j$220 = 0;
     while(1) {
      $71 = HEAP32[$43>>2]|0;
      $$sum8 = (($j$220) + ($65))|0;
      $72 = (($71) + (($$sum8*216)|0)|0);
      $i$3 = $64;$mb$0 = $72;
      while(1) {
       _ConcealMb($mb$0,$currImage,$i$3,$j$220,$sliceType,$refData$0);
       $73 = (($mb$0) + 196|0);
       HEAP32[$73>>2] = 1;
       $74 = HEAP32[$66>>2]|0;
       $75 = (($74) + 1)|0;
       HEAP32[$66>>2] = $75;
       $76 = (($mb$0) + (($67*216)|0)|0);
       $77 = (($i$3) + -1)|0;
       $78 = ($i$3|0)==(0);
       if ($78) {
        break;
       } else {
        $i$3 = $77;$mb$0 = $76;
       }
      }
      $79 = (($j$220) + 1)|0;
      $exitcond40 = ($79|0)==($1|0);
      if ($exitcond40) {
       $i$4$in$ph = $row$0$lcssa;
       break;
      } else {
       $j$220 = $79;
      }
     }
    }
   }
   $i$416 = (($i$4$in$ph) + 1)|0;
   $68 = ($i$416>>>0)<($3>>>0);
   if (!($68)) {
    STACKTOP = sp;return 0;
   }
   $69 = ($1|0)==(0);
   $70 = (($pStorage) + 1204|0);
   $i$417 = $i$416;
   while(1) {
    $80 = HEAP32[$43>>2]|0;
    $81 = Math_imul($i$417, $1)|0;
    if (!($69)) {
     $j$313 = 0;
     while(1) {
      $$sum = (($j$313) + ($81))|0;
      $82 = ((($80) + (($$sum*216)|0)|0) + 196|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($83|0)==(0);
      if ($84) {
       $85 = (($80) + (($$sum*216)|0)|0);
       _ConcealMb($85,$currImage,$i$417,$j$313,$sliceType,$refData$0);
       HEAP32[$82>>2] = 1;
       $86 = HEAP32[$70>>2]|0;
       $87 = (($86) + 1)|0;
       HEAP32[$70>>2] = $87;
      }
      $88 = (($j$313) + 1)|0;
      $exitcond = ($88|0)==($1|0);
      if ($exitcond) {
       break;
      } else {
       $j$313 = $88;
      }
     }
    }
    $i$4 = (($i$417) + 1)|0;
    $exitcond39 = ($i$4|0)==($3|0);
    if ($exitcond39) {
     break;
    } else {
     $i$417 = $i$4;
    }
   }
   STACKTOP = sp;return 0;
  }
 }
 if ((($sliceType|0) == 2) | (($sliceType|0) == 7)) {
  $$in50 = (($pStorage) + 3384|0);
  $26 = HEAP32[$$in50>>2]|0;
  $27 = ($26|0)==(0);
  $28 = ($refData$0|0)==(0|0);
  $or$cond7 = $27 | $28;
  if ($or$cond7) {
   label = 13;
  } else {
   label = 14;
  }
 } else {
  $$old6 = ($refData$0|0)==(0|0);
  if ($$old6) {
   label = 13;
  } else {
   label = 14;
  }
 }
 if ((label|0) == 13) {
  $29 = HEAP32[$currImage>>2]|0;
  $30 = ($1*384)|0;
  $31 = Math_imul($30, $3)|0;
  _H264SwDecMemset($29,128,$31);
 }
 else if ((label|0) == 14) {
  $32 = HEAP32[$currImage>>2]|0;
  $33 = ($1*384)|0;
  $34 = Math_imul($33, $3)|0;
  _H264SwDecMemcpy($32,$refData$0,$34);
 }
 $35 = HEAP32[$12>>2]|0;
 $36 = (($pStorage) + 1204|0);
 HEAP32[$36>>2] = $35;
 $37 = ($35|0)==(0);
 if ($37) {
  STACKTOP = sp;return 0;
 }
 $38 = (($pStorage) + 1212|0);
 $39 = HEAP32[$38>>2]|0;
 $i$211 = 0;
 while(1) {
  $40 = ((($39) + (($i$211*216)|0)|0) + 8|0);
  HEAP32[$40>>2] = 1;
  $41 = (($i$211) + 1)|0;
  $42 = ($41>>>0)<($35>>>0);
  if ($42) {
   $i$211 = $41;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function _ConcealMb($pMb,$currImage,$row,$col,$sliceType,$refData) {
 $pMb = $pMb|0;
 $currImage = $currImage|0;
 $row = $row|0;
 $col = $col|0;
 $sliceType = $sliceType|0;
 $refData = $refData|0;
 var $$pTmp$0 = 0, $$pTmp$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre249 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum100 = 0, $$sum101 = 0, $$sum102103 = 0, $$sum104 = 0, $$sum105 = 0, $$sum106 = 0, $$sum107 = 0, $$sum108 = 0, $$sum109 = 0, $$sum11 = 0, $$sum110 = 0, $$sum111112 = 0;
 var $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1920 = 0, $$sum2 = 0, $$sum21 = 0, $$sum2223 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum2728 = 0, $$sum2930 = 0, $$sum3 = 0, $$sum31 = 0, $$sum3233 = 0, $$sum34 = 0;
 var $$sum35 = 0, $$sum36 = 0, $$sum3738 = 0, $$sum4 = 0, $$sum40 = 0, $$sum41 = 0, $$sum42 = 0, $$sum43 = 0, $$sum44 = 0, $$sum45 = 0, $$sum46 = 0, $$sum47 = 0, $$sum48 = 0, $$sum49 = 0, $$sum50 = 0, $$sum51 = 0, $$sum52 = 0, $$sum53 = 0, $$sum54 = 0, $$sum55 = 0;
 var $$sum56 = 0, $$sum57 = 0, $$sum58 = 0, $$sum59 = 0, $$sum60 = 0, $$sum61 = 0, $$sum62 = 0, $$sum63 = 0, $$sum64 = 0, $$sum65 = 0, $$sum66 = 0, $$sum67 = 0, $$sum68 = 0, $$sum69 = 0, $$sum7 = 0, $$sum70 = 0, $$sum71 = 0, $$sum72 = 0, $$sum73 = 0, $$sum7475 = 0;
 var $$sum76 = 0, $$sum7778 = 0, $$sum79 = 0, $$sum8 = 0, $$sum80 = 0, $$sum81 = 0, $$sum8283 = 0, $$sum84 = 0, $$sum85 = 0, $$sum86 = 0, $$sum87 = 0, $$sum88 = 0, $$sum89 = 0, $$sum9 = 0, $$sum90 = 0, $$sum9192 = 0, $$sum93 = 0, $$sum9495 = 0, $$sum96 = 0, $$sum9798 = 0;
 var $$sum99 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $B$0 = 0, $R$0127 = 0, $R$0127140 = 0, $R$0127141160 = 0, $R$0128129 = 0;
 var $a$sroa$0$0 = 0, $a$sroa$0$1231 = 0, $a$sroa$0$2 = 0, $a$sroa$16$0 = 0, $a$sroa$16$1230 = 0, $a$sroa$16$2 = 0, $a$sroa$32$0 = 0, $a$sroa$32$1229 = 0, $a$sroa$32$2 = 0, $a$sroa$48$0 = 0, $a$sroa$48$1228 = 0, $a$sroa$48$2 = 0, $b$sroa$0$0 = 0, $b$sroa$0$1235 = 0, $b$sroa$0$2 = 0, $b$sroa$16$0 = 0, $b$sroa$16$1234 = 0, $b$sroa$16$2 = 0, $b$sroa$32$0 = 0, $b$sroa$32$1233 = 0;
 var $b$sroa$32$2 = 0, $b$sroa$48$0 = 0, $b$sroa$48$1232 = 0, $b$sroa$48$2 = 0, $comp$0226 = 0, $data = 0, $exitcond = 0, $exitcond247 = 0, $exitcond248 = 0, $firstPhase = 0, $hor$0 = 0, $hor$1 = 0, $hor$2 = 0, $hor$3 = 0, $i$0244 = 0, $i$1223 = 0, $j$2 = 0, $j$3117 = 0, $j$3117150 = 0, $j$3117151155 = 0;
 var $j$3118134 = 0, $j$6 = 0, $j$7166 = 0, $j$7166194 = 0, $j$7166195199 = 0, $j$7167180 = 0, $l$sroa$0$0 = 0, $l$sroa$0$1239 = 0, $l$sroa$0$2 = 0, $l$sroa$16$0 = 0, $l$sroa$16$1238 = 0, $l$sroa$16$2 = 0, $l$sroa$32$0 = 0, $l$sroa$32$1237 = 0, $l$sroa$32$2 = 0, $l$sroa$48$0 = 0, $l$sroa$48$1236 = 0, $l$sroa$48$2 = 0, $mbPos$0227 = 0, $mv = 0;
 var $or$cond11 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $pData$0245 = 0, $pData$1224 = 0, $pTmp$0246 = 0, $pTmp$1225 = 0, $phitmp = 0, $phitmp39 = 0, $refImage = 0, $ver$0 = 0, $ver$1115 = 0, $ver$1115152154 = 0, $ver$1116135 = 0, $ver$2 = 0, $ver$3164 = 0, $ver$3164196198 = 0;
 var $ver$3165181 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $data = sp + 96|0;
 $firstPhase = sp + 32|0;
 $mv = sp + 24|0;
 $refImage = sp;
 $0 = (($currImage) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($currImage) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($1, $row)|0;
 $5 = (($4) + ($col))|0;
 _h264bsdSetCurrImageMbPointers($currImage,$5);
 $6 = HEAP32[$currImage>>2]|0;
 $7 = $row << 4;
 $8 = $row << 8;
 $9 = Math_imul($8, $1)|0;
 $10 = $col << 4;
 $$sum = (($9) + ($10))|0;
 $11 = (($pMb) + 20|0);
 HEAP32[$11>>2] = 40;
 $12 = (($pMb) + 8|0);
 HEAP32[$12>>2] = 0;
 HEAP32[$pMb>>2] = 6;
 $13 = (($pMb) + 12|0);
 HEAP32[$13>>2] = 0;
 $14 = (($pMb) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = (($pMb) + 24|0);
 HEAP32[$15>>2] = 0;
 do {
  if ((($sliceType|0) == 2) | (($sliceType|0) == 7)) {
   _H264SwDecMemset($data,0,384);
  } else {
   HEAP32[$mv>>2] = 0;
   $16 = (($refImage) + 4|0);
   HEAP32[$16>>2] = $1;
   $17 = (($refImage) + 8|0);
   HEAP32[$17>>2] = $3;
   HEAP32[$refImage>>2] = $refData;
   $18 = ($refData|0)==(0|0);
   if ($18) {
    _H264SwDecMemset($data,0,384);
    break;
   }
   _h264bsdPredictSamples($data,$mv,$refImage,$10,$7,0,0,16,16);
   _h264bsdWriteMacroblock($currImage,$data);
   STACKTOP = sp;return;
  }
 } while(0);
 _H264SwDecMemset($firstPhase,0,64);
 $19 = ($row|0)==(0);
 if ($19) {
  $a$sroa$0$0 = 0;$a$sroa$16$0 = 0;$a$sroa$32$0 = 0;$a$sroa$48$0 = 0;$hor$0 = 0;
 } else {
  $20 = (0 - ($1))|0;
  $21 = ((($pMb) + (($20*216)|0)|0) + 196|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   $a$sroa$0$0 = 0;$a$sroa$16$0 = 0;$a$sroa$32$0 = 0;$a$sroa$48$0 = 0;$hor$0 = 0;
  } else {
   $24 = $1 << 4;
   $$sum93 = (($$sum) - ($24))|0;
   $25 = (($6) + ($$sum93)|0);
   $$sum9495 = $$sum93 | 1;
   $26 = (($6) + ($$sum9495)|0);
   $27 = HEAP8[$25>>0]|0;
   $28 = $27&255;
   $$sum96 = (($$sum9495) + 1)|0;
   $29 = (($6) + ($$sum96)|0);
   $30 = HEAP8[$26>>0]|0;
   $31 = $30&255;
   $32 = (($31) + ($28))|0;
   $$sum9798 = $$sum93 | 3;
   $33 = (($6) + ($$sum9798)|0);
   $34 = HEAP8[$29>>0]|0;
   $35 = $34&255;
   $36 = (($32) + ($35))|0;
   $$sum99 = (($$sum9798) + 1)|0;
   $37 = (($6) + ($$sum99)|0);
   $38 = HEAP8[$33>>0]|0;
   $39 = $38&255;
   $40 = (($36) + ($39))|0;
   $$sum100 = (($$sum9798) + 2)|0;
   $41 = (($6) + ($$sum100)|0);
   $42 = HEAP8[$37>>0]|0;
   $43 = $42&255;
   $$sum101 = (($$sum9798) + 3)|0;
   $44 = (($6) + ($$sum101)|0);
   $45 = HEAP8[$41>>0]|0;
   $46 = $45&255;
   $47 = (($46) + ($43))|0;
   $$sum102103 = $$sum93 | 7;
   $48 = (($6) + ($$sum102103)|0);
   $49 = HEAP8[$44>>0]|0;
   $50 = $49&255;
   $51 = (($47) + ($50))|0;
   $$sum104 = (($$sum102103) + 1)|0;
   $52 = (($6) + ($$sum104)|0);
   $53 = HEAP8[$48>>0]|0;
   $54 = $53&255;
   $55 = (($51) + ($54))|0;
   $$sum105 = (($$sum102103) + 2)|0;
   $56 = (($6) + ($$sum105)|0);
   $57 = HEAP8[$52>>0]|0;
   $58 = $57&255;
   $$sum106 = (($$sum102103) + 3)|0;
   $59 = (($6) + ($$sum106)|0);
   $60 = HEAP8[$56>>0]|0;
   $61 = $60&255;
   $62 = (($61) + ($58))|0;
   $$sum107 = (($$sum102103) + 4)|0;
   $63 = (($6) + ($$sum107)|0);
   $64 = HEAP8[$59>>0]|0;
   $65 = $64&255;
   $66 = (($62) + ($65))|0;
   $$sum108 = (($$sum102103) + 5)|0;
   $67 = (($6) + ($$sum108)|0);
   $68 = HEAP8[$63>>0]|0;
   $69 = $68&255;
   $70 = (($66) + ($69))|0;
   $$sum109 = (($$sum102103) + 6)|0;
   $71 = (($6) + ($$sum109)|0);
   $72 = HEAP8[$67>>0]|0;
   $73 = $72&255;
   $$sum110 = (($$sum102103) + 7)|0;
   $74 = (($6) + ($$sum110)|0);
   $75 = HEAP8[$71>>0]|0;
   $76 = $75&255;
   $77 = (($76) + ($73))|0;
   $$sum111112 = $$sum93 | 15;
   $78 = (($6) + ($$sum111112)|0);
   $79 = HEAP8[$74>>0]|0;
   $80 = $79&255;
   $81 = (($77) + ($80))|0;
   $82 = HEAP8[$78>>0]|0;
   $83 = $82&255;
   $84 = (($81) + ($83))|0;
   $85 = (($55) + ($40))|0;
   $86 = (($70) + ($85))|0;
   $87 = HEAP32[$firstPhase>>2]|0;
   $88 = (($86) + ($87))|0;
   $89 = (($88) + ($84))|0;
   HEAP32[$firstPhase>>2] = $89;
   $90 = (($85) - ($70))|0;
   $91 = (($90) - ($84))|0;
   $92 = (($firstPhase) + 4|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($91) + ($93))|0;
   HEAP32[$92>>2] = $94;
   $a$sroa$0$0 = $40;$a$sroa$16$0 = $55;$a$sroa$32$0 = $70;$a$sroa$48$0 = $84;$hor$0 = 1;
  }
 }
 $95 = (($3) + -1)|0;
 $96 = ($95|0)==($row|0);
 if ($96) {
  $B$0 = 0;$b$sroa$0$0 = 0;$b$sroa$16$0 = 0;$b$sroa$32$0 = 0;$b$sroa$48$0 = 0;$hor$1 = $hor$0;
 } else {
  $97 = ((($pMb) + (($1*216)|0)|0) + 196|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($98|0)==(0);
  if ($99) {
   $B$0 = 0;$b$sroa$0$0 = 0;$b$sroa$16$0 = 0;$b$sroa$32$0 = 0;$b$sroa$48$0 = 0;$hor$1 = $hor$0;
  } else {
   $100 = $1 << 8;
   $$sum73 = (($$sum) + ($100))|0;
   $101 = (($6) + ($$sum73)|0);
   $$sum7475 = $$sum73 | 1;
   $102 = (($6) + ($$sum7475)|0);
   $103 = HEAP8[$101>>0]|0;
   $104 = $103&255;
   $$sum76 = (($$sum7475) + 1)|0;
   $105 = (($6) + ($$sum76)|0);
   $106 = HEAP8[$102>>0]|0;
   $107 = $106&255;
   $108 = (($107) + ($104))|0;
   $$sum7778 = $$sum73 | 3;
   $109 = (($6) + ($$sum7778)|0);
   $110 = HEAP8[$105>>0]|0;
   $111 = $110&255;
   $112 = (($108) + ($111))|0;
   $$sum79 = (($$sum7778) + 1)|0;
   $113 = (($6) + ($$sum79)|0);
   $114 = HEAP8[$109>>0]|0;
   $115 = $114&255;
   $116 = (($112) + ($115))|0;
   $$sum80 = (($$sum7778) + 2)|0;
   $117 = (($6) + ($$sum80)|0);
   $118 = HEAP8[$113>>0]|0;
   $119 = $118&255;
   $$sum81 = (($$sum7778) + 3)|0;
   $120 = (($6) + ($$sum81)|0);
   $121 = HEAP8[$117>>0]|0;
   $122 = $121&255;
   $123 = (($122) + ($119))|0;
   $$sum8283 = $$sum73 | 7;
   $124 = (($6) + ($$sum8283)|0);
   $125 = HEAP8[$120>>0]|0;
   $126 = $125&255;
   $127 = (($123) + ($126))|0;
   $$sum84 = (($$sum8283) + 1)|0;
   $128 = (($6) + ($$sum84)|0);
   $129 = HEAP8[$124>>0]|0;
   $130 = $129&255;
   $131 = (($127) + ($130))|0;
   $$sum85 = (($$sum8283) + 2)|0;
   $132 = (($6) + ($$sum85)|0);
   $133 = HEAP8[$128>>0]|0;
   $134 = $133&255;
   $$sum86 = (($$sum8283) + 3)|0;
   $135 = (($6) + ($$sum86)|0);
   $136 = HEAP8[$132>>0]|0;
   $137 = $136&255;
   $138 = (($137) + ($134))|0;
   $$sum87 = (($$sum8283) + 4)|0;
   $139 = (($6) + ($$sum87)|0);
   $140 = HEAP8[$135>>0]|0;
   $141 = $140&255;
   $142 = (($138) + ($141))|0;
   $$sum88 = (($$sum8283) + 5)|0;
   $143 = (($6) + ($$sum88)|0);
   $144 = HEAP8[$139>>0]|0;
   $145 = $144&255;
   $146 = (($142) + ($145))|0;
   $$sum89 = (($$sum8283) + 6)|0;
   $147 = (($6) + ($$sum89)|0);
   $148 = HEAP8[$143>>0]|0;
   $149 = $148&255;
   $$sum90 = (($$sum8283) + 7)|0;
   $150 = (($6) + ($$sum90)|0);
   $151 = HEAP8[$147>>0]|0;
   $152 = $151&255;
   $153 = (($152) + ($149))|0;
   $$sum9192 = $$sum73 | 15;
   $154 = (($6) + ($$sum9192)|0);
   $155 = HEAP8[$150>>0]|0;
   $156 = $155&255;
   $157 = (($153) + ($156))|0;
   $158 = HEAP8[$154>>0]|0;
   $159 = $158&255;
   $160 = (($157) + ($159))|0;
   $161 = (($hor$0) + 1)|0;
   $162 = (($131) + ($116))|0;
   $163 = (($146) + ($162))|0;
   $164 = HEAP32[$firstPhase>>2]|0;
   $165 = (($163) + ($164))|0;
   $166 = (($165) + ($160))|0;
   HEAP32[$firstPhase>>2] = $166;
   $167 = (($162) - ($146))|0;
   $168 = (($167) - ($160))|0;
   $169 = (($firstPhase) + 4|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($168) + ($170))|0;
   HEAP32[$169>>2] = $171;
   $B$0 = 1;$b$sroa$0$0 = $116;$b$sroa$16$0 = $131;$b$sroa$32$0 = $146;$b$sroa$48$0 = $160;$hor$1 = $161;
  }
 }
 $172 = ($col|0)==(0);
 if ($172) {
  $j$2 = $hor$1;$l$sroa$0$0 = 0;$l$sroa$16$0 = 0;$l$sroa$32$0 = 0;$l$sroa$48$0 = 0;$ver$0 = 0;
 } else {
  $173 = (($pMb) + -20|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = ($174|0)==(0);
  if ($175) {
   $j$2 = $hor$1;$l$sroa$0$0 = 0;$l$sroa$16$0 = 0;$l$sroa$32$0 = 0;$l$sroa$48$0 = 0;$ver$0 = 0;
  } else {
   $$sum57 = (($$sum) + -1)|0;
   $176 = (($6) + ($$sum57)|0);
   $177 = HEAP8[$176>>0]|0;
   $178 = $177&255;
   $179 = $1 << 4;
   $$sum58 = (($$sum57) + ($179))|0;
   $180 = (($6) + ($$sum58)|0);
   $181 = HEAP8[$180>>0]|0;
   $182 = $181&255;
   $183 = (($182) + ($178))|0;
   $184 = $1 << 5;
   $$sum59 = (($$sum57) + ($184))|0;
   $185 = (($6) + ($$sum59)|0);
   $186 = HEAP8[$185>>0]|0;
   $187 = $186&255;
   $188 = (($183) + ($187))|0;
   $189 = ($1*48)|0;
   $$sum60 = (($$sum57) + ($189))|0;
   $190 = (($6) + ($$sum60)|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   $193 = (($188) + ($192))|0;
   $194 = $1 << 6;
   $$sum61 = (($$sum57) + ($194))|0;
   $195 = (($6) + ($$sum61)|0);
   $196 = HEAP8[$195>>0]|0;
   $197 = $196&255;
   $$sum62 = (($$sum61) + ($179))|0;
   $198 = (($6) + ($$sum62)|0);
   $199 = HEAP8[$198>>0]|0;
   $200 = $199&255;
   $201 = (($200) + ($197))|0;
   $$sum63 = (($$sum61) + ($184))|0;
   $202 = (($6) + ($$sum63)|0);
   $203 = HEAP8[$202>>0]|0;
   $204 = $203&255;
   $205 = (($201) + ($204))|0;
   $$sum64 = (($$sum61) + ($189))|0;
   $206 = (($6) + ($$sum64)|0);
   $207 = HEAP8[$206>>0]|0;
   $208 = $207&255;
   $209 = (($205) + ($208))|0;
   $$sum65 = (($$sum61) + ($194))|0;
   $210 = (($6) + ($$sum65)|0);
   $211 = HEAP8[$210>>0]|0;
   $212 = $211&255;
   $$sum66 = (($$sum65) + ($179))|0;
   $213 = (($6) + ($$sum66)|0);
   $214 = HEAP8[$213>>0]|0;
   $215 = $214&255;
   $216 = (($215) + ($212))|0;
   $$sum67 = (($$sum65) + ($184))|0;
   $217 = (($6) + ($$sum67)|0);
   $218 = HEAP8[$217>>0]|0;
   $219 = $218&255;
   $220 = (($216) + ($219))|0;
   $$sum68 = (($$sum65) + ($189))|0;
   $221 = (($6) + ($$sum68)|0);
   $222 = HEAP8[$221>>0]|0;
   $223 = $222&255;
   $224 = (($220) + ($223))|0;
   $$sum69 = (($$sum65) + ($194))|0;
   $225 = (($6) + ($$sum69)|0);
   $226 = HEAP8[$225>>0]|0;
   $227 = $226&255;
   $$sum70 = (($$sum69) + ($179))|0;
   $228 = (($6) + ($$sum70)|0);
   $229 = HEAP8[$228>>0]|0;
   $230 = $229&255;
   $231 = (($230) + ($227))|0;
   $$sum71 = (($$sum69) + ($184))|0;
   $232 = (($6) + ($$sum71)|0);
   $233 = HEAP8[$232>>0]|0;
   $234 = $233&255;
   $235 = (($231) + ($234))|0;
   $$sum72 = (($$sum69) + ($189))|0;
   $236 = (($6) + ($$sum72)|0);
   $237 = HEAP8[$236>>0]|0;
   $238 = $237&255;
   $239 = (($235) + ($238))|0;
   $240 = (($hor$1) + 1)|0;
   $241 = (($209) + ($193))|0;
   $242 = (($224) + ($241))|0;
   $243 = HEAP32[$firstPhase>>2]|0;
   $244 = (($242) + ($243))|0;
   $245 = (($244) + ($239))|0;
   HEAP32[$firstPhase>>2] = $245;
   $246 = (($241) - ($224))|0;
   $247 = (($246) - ($239))|0;
   $248 = (($firstPhase) + 16|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = (($247) + ($249))|0;
   HEAP32[$248>>2] = $250;
   $j$2 = $240;$l$sroa$0$0 = $193;$l$sroa$16$0 = $209;$l$sroa$32$0 = $224;$l$sroa$48$0 = $239;$ver$0 = 1;
  }
 }
 $251 = (($1) + -1)|0;
 $252 = ($251|0)==($col|0);
 do {
  if ($252) {
   label = 17;
  } else {
   $253 = (($pMb) + 412|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = ($254|0)==(0);
   if ($255) {
    label = 17;
   } else {
    $$sum40 = (($$sum) + 16)|0;
    $258 = (($6) + ($$sum40)|0);
    $259 = HEAP8[$258>>0]|0;
    $260 = $259&255;
    $261 = $1 << 4;
    $$sum41 = (($$sum40) + ($261))|0;
    $262 = (($6) + ($$sum41)|0);
    $263 = HEAP8[$262>>0]|0;
    $264 = $263&255;
    $265 = (($264) + ($260))|0;
    $266 = $1 << 5;
    $$sum42 = (($$sum40) + ($266))|0;
    $267 = (($6) + ($$sum42)|0);
    $268 = HEAP8[$267>>0]|0;
    $269 = $268&255;
    $270 = (($265) + ($269))|0;
    $271 = ($1*48)|0;
    $$sum43 = (($$sum40) + ($271))|0;
    $272 = (($6) + ($$sum43)|0);
    $273 = HEAP8[$272>>0]|0;
    $274 = $273&255;
    $275 = (($270) + ($274))|0;
    $276 = $1 << 6;
    $$sum44 = (($$sum40) + ($276))|0;
    $277 = (($6) + ($$sum44)|0);
    $278 = HEAP8[$277>>0]|0;
    $279 = $278&255;
    $$sum45 = (($$sum44) + ($261))|0;
    $280 = (($6) + ($$sum45)|0);
    $281 = HEAP8[$280>>0]|0;
    $282 = $281&255;
    $283 = (($282) + ($279))|0;
    $$sum46 = (($$sum44) + ($266))|0;
    $284 = (($6) + ($$sum46)|0);
    $285 = HEAP8[$284>>0]|0;
    $286 = $285&255;
    $287 = (($283) + ($286))|0;
    $$sum47 = (($$sum44) + ($271))|0;
    $288 = (($6) + ($$sum47)|0);
    $289 = HEAP8[$288>>0]|0;
    $290 = $289&255;
    $291 = (($287) + ($290))|0;
    $$sum48 = (($$sum44) + ($276))|0;
    $292 = (($6) + ($$sum48)|0);
    $293 = HEAP8[$292>>0]|0;
    $294 = $293&255;
    $$sum49 = (($$sum48) + ($261))|0;
    $295 = (($6) + ($$sum49)|0);
    $296 = HEAP8[$295>>0]|0;
    $297 = $296&255;
    $298 = (($297) + ($294))|0;
    $$sum50 = (($$sum48) + ($266))|0;
    $299 = (($6) + ($$sum50)|0);
    $300 = HEAP8[$299>>0]|0;
    $301 = $300&255;
    $302 = (($298) + ($301))|0;
    $$sum51 = (($$sum48) + ($271))|0;
    $303 = (($6) + ($$sum51)|0);
    $304 = HEAP8[$303>>0]|0;
    $305 = $304&255;
    $306 = (($302) + ($305))|0;
    $$sum52 = (($$sum48) + ($276))|0;
    $307 = (($6) + ($$sum52)|0);
    $308 = HEAP8[$307>>0]|0;
    $309 = $308&255;
    $$sum53 = (($$sum52) + ($261))|0;
    $310 = (($6) + ($$sum53)|0);
    $311 = HEAP8[$310>>0]|0;
    $312 = $311&255;
    $313 = (($312) + ($309))|0;
    $$sum54 = (($$sum52) + ($266))|0;
    $314 = (($6) + ($$sum54)|0);
    $315 = HEAP8[$314>>0]|0;
    $316 = $315&255;
    $317 = (($313) + ($316))|0;
    $$sum55 = (($$sum52) + ($271))|0;
    $318 = (($6) + ($$sum55)|0);
    $319 = HEAP8[$318>>0]|0;
    $320 = $319&255;
    $321 = (($317) + ($320))|0;
    $322 = (($j$2) + 1)|0;
    $323 = (($ver$0) + 1)|0;
    $324 = (($291) + ($275))|0;
    $325 = (($306) + ($324))|0;
    $326 = HEAP32[$firstPhase>>2]|0;
    $327 = (($325) + ($326))|0;
    $328 = (($327) + ($321))|0;
    HEAP32[$firstPhase>>2] = $328;
    $329 = (($324) - ($306))|0;
    $330 = (($329) - ($321))|0;
    $331 = (($firstPhase) + 16|0);
    $332 = HEAP32[$331>>2]|0;
    $333 = (($330) + ($332))|0;
    HEAP32[$331>>2] = $333;
    $334 = ($hor$1|0)==(0);
    $335 = ($ver$0|0)!=(0);
    $or$cond5 = $334 & $335;
    if ($or$cond5) {
     $336 = (($l$sroa$32$0) + ($l$sroa$48$0))|0;
     $337 = (($336) + ($l$sroa$16$0))|0;
     $338 = (($337) + ($l$sroa$0$0))|0;
     $339 = (($338) - ($275))|0;
     $340 = (($339) - ($291))|0;
     $341 = (($340) - ($306))|0;
     $342 = (($341) - ($321))|0;
     $343 = $342 >> 5;
     $344 = (($firstPhase) + 4|0);
     HEAP32[$344>>2] = $343;
    } else {
     if (!($334)) {
      $610 = $335;$R$0128129 = 1;$j$3118134 = $322;$ver$1116135 = $323;
      label = 21;
      break;
     }
    }
    $349 = ($hor$0|0)!=(0);
    $350 = ($B$0|0)!=(0);
    $366 = $333;$611 = $335;$612 = $349;$613 = $350;$R$0127141160 = 1;$j$3117151155 = $322;$ver$1115152154 = $323;
    label = 27;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  $256 = ($hor$1|0)==(0);
  $257 = ($ver$0|0)!=(0);
  if ($256) {
   $609 = $257;$R$0127 = 0;$j$3117 = $j$2;$ver$1115 = $ver$0;
   label = 23;
  } else {
   $610 = $257;$R$0128129 = 0;$j$3118134 = $j$2;$ver$1116135 = $ver$0;
   label = 21;
  }
 }
 if ((label|0) == 21) {
  $345 = (($hor$1) + 3)|0;
  $346 = (($firstPhase) + 4|0);
  $347 = HEAP32[$346>>2]|0;
  $348 = $347 >> $345;
  HEAP32[$346>>2] = $348;
  $609 = $610;$R$0127 = $R$0128129;$j$3117 = $j$3118134;$ver$1115 = $ver$1116135;
  label = 23;
 }
 do {
  if ((label|0) == 23) {
   $351 = ($ver$1115|0)==(0);
   $352 = ($hor$0|0)!=(0);
   $or$cond7 = $351 & $352;
   $353 = ($B$0|0)!=(0);
   $or$cond9 = $or$cond7 & $353;
   if ($or$cond9) {
    $354 = (($a$sroa$32$0) + ($a$sroa$48$0))|0;
    $355 = (($354) + ($a$sroa$16$0))|0;
    $356 = (($355) + ($a$sroa$0$0))|0;
    $357 = (($356) - ($b$sroa$48$0))|0;
    $358 = (($357) - ($b$sroa$32$0))|0;
    $359 = (($358) - ($b$sroa$16$0))|0;
    $360 = (($359) - ($b$sroa$0$0))|0;
    $361 = $360 >> 5;
    $362 = (($firstPhase) + 16|0);
    HEAP32[$362>>2] = $361;
    $557 = $609;$570 = 1;$571 = 1;$R$0127140 = $R$0127;$j$3117150 = $j$3117;
    break;
   }
   if ($351) {
    $557 = $609;$570 = $352;$571 = $353;$R$0127140 = $R$0127;$j$3117150 = $j$3117;
   } else {
    $$phi$trans$insert = (($firstPhase) + 16|0);
    $$pre249 = HEAP32[$$phi$trans$insert>>2]|0;
    $366 = $$pre249;$611 = $609;$612 = $352;$613 = $353;$R$0127141160 = $R$0127;$j$3117151155 = $j$3117;$ver$1115152154 = $ver$1115;
    label = 27;
   }
  }
 } while(0);
 if ((label|0) == 27) {
  $363 = (($ver$1115152154) + 3)|0;
  $364 = (($firstPhase) + 16|0);
  $365 = $366 >> $363;
  HEAP32[$364>>2] = $365;
  $557 = $611;$570 = $612;$571 = $613;$R$0127140 = $R$0127141160;$j$3117150 = $j$3117151155;
 }
 if ((($j$3117150|0) == 2)) {
  $369 = HEAP32[$firstPhase>>2]|0;
  $370 = $369 >> 5;
  HEAP32[$firstPhase>>2] = $370;
 } else if ((($j$3117150|0) == 3)) {
  $371 = HEAP32[$firstPhase>>2]|0;
  $372 = ($371*21)|0;
  $373 = $372 >> 10;
  HEAP32[$firstPhase>>2] = $373;
 } else if ((($j$3117150|0) == 1)) {
  $367 = HEAP32[$firstPhase>>2]|0;
  $368 = $367 >> 4;
  HEAP32[$firstPhase>>2] = $368;
 } else {
  $374 = HEAP32[$firstPhase>>2]|0;
  $375 = $374 >> 6;
  HEAP32[$firstPhase>>2] = $375;
 }
 _Transform($firstPhase);
 $i$0244 = 0;$pData$0245 = $data;$pTmp$0246 = $firstPhase;
 while(1) {
  $376 = $i$0244 >>> 2;
  $377 = $376 & 3;
  $378 = (($pTmp$0246) + ($377<<2)|0);
  $379 = HEAP32[$378>>2]|0;
  $380 = ($379|0)<(0);
  if ($380) {
   $384 = 0;
  } else {
   $381 = ($379|0)>(255);
   $382 = $379&255;
   $phitmp39 = $381 ? -1 : $382;
   $384 = $phitmp39;
  }
  $383 = (($pData$0245) + 1|0);
  HEAP8[$pData$0245>>0] = $384;
  $385 = (($i$0244) + 1)|0;
  $386 = $385 & 63;
  $387 = ($386|0)==(0);
  $388 = (($pTmp$0246) + 16|0);
  $$pTmp$0 = $387 ? $388 : $pTmp$0246;
  $exitcond248 = ($385|0)==(256);
  if ($exitcond248) {
   break;
  } else {
   $i$0244 = $385;$pData$0245 = $383;$pTmp$0246 = $$pTmp$0;
  }
 }
 $389 = HEAP32[$currImage>>2]|0;
 $390 = Math_imul($3, $1)|0;
 $391 = $390 << 8;
 $392 = $row << 6;
 $393 = Math_imul($392, $1)|0;
 $394 = $col << 3;
 $$sum1 = (($393) + ($394))|0;
 $$sum2 = (($$sum1) + ($391))|0;
 $395 = (($389) + ($$sum2)|0);
 $396 = $1 << 3;
 $397 = (0 - ($396))|0;
 $$sum2930 = $397 | 1;
 $$sum31 = (($$sum2930) + 1)|0;
 $$sum3233 = $397 | 3;
 $$sum34 = (($$sum3233) + 1)|0;
 $$sum35 = (($$sum3233) + 2)|0;
 $$sum36 = (($$sum3233) + 3)|0;
 $$sum3738 = $397 | 7;
 $398 = (($firstPhase) + 4|0);
 $399 = $1 << 6;
 $$sum1920 = $399 | 1;
 $$sum21 = (($$sum1920) + 1)|0;
 $$sum2223 = $399 | 3;
 $$sum24 = (($$sum2223) + 1)|0;
 $$sum25 = (($$sum2223) + 2)|0;
 $$sum26 = (($$sum2223) + 3)|0;
 $$sum2728 = $399 | 7;
 $$sum12 = (($396) + -1)|0;
 $400 = $1 << 4;
 $$sum13 = (($400) + -1)|0;
 $$sum14 = (($$sum13) + ($396))|0;
 $$sum15 = (($$sum13) + ($400))|0;
 $$sum16 = (($$sum15) + ($396))|0;
 $$sum17 = (($$sum15) + ($400))|0;
 $$sum18 = (($$sum17) + ($396))|0;
 $401 = (($firstPhase) + 16|0);
 $$sum4 = (($396) + 8)|0;
 $$sum56 = $400 | 8;
 $$sum7 = (($$sum56) + ($396))|0;
 $$sum8 = (($$sum56) + ($400))|0;
 $$sum9 = (($$sum8) + ($396))|0;
 $$sum10 = (($$sum8) + ($400))|0;
 $$sum11 = (($$sum10) + ($396))|0;
 $402 = $390 << 6;
 $a$sroa$0$1231 = $a$sroa$0$0;$a$sroa$16$1230 = $a$sroa$16$0;$a$sroa$32$1229 = $a$sroa$32$0;$a$sroa$48$1228 = $a$sroa$48$0;$b$sroa$0$1235 = $b$sroa$0$0;$b$sroa$16$1234 = $b$sroa$16$0;$b$sroa$32$1233 = $b$sroa$32$0;$b$sroa$48$1232 = $b$sroa$48$0;$comp$0226 = 0;$l$sroa$0$1239 = $l$sroa$0$0;$l$sroa$16$1238 = $l$sroa$16$0;$l$sroa$32$1237 = $l$sroa$32$0;$l$sroa$48$1236 = $l$sroa$48$0;$mbPos$0227 = $395;
 while(1) {
  _H264SwDecMemset($firstPhase,0,64);
  if ($570) {
   $403 = (($mbPos$0227) + ($397)|0);
   $404 = (($mbPos$0227) + ($$sum2930)|0);
   $405 = HEAP8[$403>>0]|0;
   $406 = $405&255;
   $407 = (($mbPos$0227) + ($$sum31)|0);
   $408 = HEAP8[$404>>0]|0;
   $409 = $408&255;
   $410 = (($409) + ($406))|0;
   $411 = (($mbPos$0227) + ($$sum3233)|0);
   $412 = HEAP8[$407>>0]|0;
   $413 = $412&255;
   $414 = (($mbPos$0227) + ($$sum34)|0);
   $415 = HEAP8[$411>>0]|0;
   $416 = $415&255;
   $417 = (($416) + ($413))|0;
   $418 = (($mbPos$0227) + ($$sum35)|0);
   $419 = HEAP8[$414>>0]|0;
   $420 = $419&255;
   $421 = (($mbPos$0227) + ($$sum36)|0);
   $422 = HEAP8[$418>>0]|0;
   $423 = $422&255;
   $424 = (($423) + ($420))|0;
   $425 = (($mbPos$0227) + ($$sum3738)|0);
   $426 = HEAP8[$421>>0]|0;
   $427 = $426&255;
   $428 = HEAP8[$425>>0]|0;
   $429 = $428&255;
   $430 = (($429) + ($427))|0;
   $431 = (($417) + ($410))|0;
   $432 = (($424) + ($431))|0;
   $433 = HEAP32[$firstPhase>>2]|0;
   $434 = (($432) + ($433))|0;
   $435 = (($434) + ($430))|0;
   HEAP32[$firstPhase>>2] = $435;
   $436 = (($431) - ($424))|0;
   $437 = (($436) - ($430))|0;
   $438 = HEAP32[$398>>2]|0;
   $439 = (($437) + ($438))|0;
   HEAP32[$398>>2] = $439;
   $a$sroa$0$2 = $410;$a$sroa$16$2 = $417;$a$sroa$32$2 = $424;$a$sroa$48$2 = $430;$hor$2 = 1;
  } else {
   $a$sroa$0$2 = $a$sroa$0$1231;$a$sroa$16$2 = $a$sroa$16$1230;$a$sroa$32$2 = $a$sroa$32$1229;$a$sroa$48$2 = $a$sroa$48$1228;$hor$2 = 0;
  }
  if ($571) {
   $440 = (($mbPos$0227) + ($399)|0);
   $441 = (($mbPos$0227) + ($$sum1920)|0);
   $442 = HEAP8[$440>>0]|0;
   $443 = $442&255;
   $444 = (($mbPos$0227) + ($$sum21)|0);
   $445 = HEAP8[$441>>0]|0;
   $446 = $445&255;
   $447 = (($446) + ($443))|0;
   $448 = (($mbPos$0227) + ($$sum2223)|0);
   $449 = HEAP8[$444>>0]|0;
   $450 = $449&255;
   $451 = (($mbPos$0227) + ($$sum24)|0);
   $452 = HEAP8[$448>>0]|0;
   $453 = $452&255;
   $454 = (($453) + ($450))|0;
   $455 = (($mbPos$0227) + ($$sum25)|0);
   $456 = HEAP8[$451>>0]|0;
   $457 = $456&255;
   $458 = (($mbPos$0227) + ($$sum26)|0);
   $459 = HEAP8[$455>>0]|0;
   $460 = $459&255;
   $461 = (($460) + ($457))|0;
   $462 = (($mbPos$0227) + ($$sum2728)|0);
   $463 = HEAP8[$458>>0]|0;
   $464 = $463&255;
   $465 = HEAP8[$462>>0]|0;
   $466 = $465&255;
   $467 = (($466) + ($464))|0;
   $468 = (($hor$2) + 1)|0;
   $469 = (($454) + ($447))|0;
   $470 = (($461) + ($469))|0;
   $471 = HEAP32[$firstPhase>>2]|0;
   $472 = (($470) + ($471))|0;
   $473 = (($472) + ($467))|0;
   HEAP32[$firstPhase>>2] = $473;
   $474 = (($469) - ($461))|0;
   $475 = (($474) - ($467))|0;
   $476 = HEAP32[$398>>2]|0;
   $477 = (($475) + ($476))|0;
   HEAP32[$398>>2] = $477;
   $b$sroa$0$2 = $447;$b$sroa$16$2 = $454;$b$sroa$32$2 = $461;$b$sroa$48$2 = $467;$hor$3 = $468;
  } else {
   $b$sroa$0$2 = $b$sroa$0$1235;$b$sroa$16$2 = $b$sroa$16$1234;$b$sroa$32$2 = $b$sroa$32$1233;$b$sroa$48$2 = $b$sroa$48$1232;$hor$3 = $hor$2;
  }
  if ($557) {
   $478 = (($mbPos$0227) + -1|0);
   $479 = HEAP8[$478>>0]|0;
   $480 = $479&255;
   $481 = (($mbPos$0227) + ($$sum12)|0);
   $482 = HEAP8[$481>>0]|0;
   $483 = $482&255;
   $484 = (($483) + ($480))|0;
   $485 = (($mbPos$0227) + ($$sum13)|0);
   $486 = HEAP8[$485>>0]|0;
   $487 = $486&255;
   $488 = (($mbPos$0227) + ($$sum14)|0);
   $489 = HEAP8[$488>>0]|0;
   $490 = $489&255;
   $491 = (($490) + ($487))|0;
   $492 = (($mbPos$0227) + ($$sum15)|0);
   $493 = HEAP8[$492>>0]|0;
   $494 = $493&255;
   $495 = (($mbPos$0227) + ($$sum16)|0);
   $496 = HEAP8[$495>>0]|0;
   $497 = $496&255;
   $498 = (($497) + ($494))|0;
   $499 = (($mbPos$0227) + ($$sum17)|0);
   $500 = HEAP8[$499>>0]|0;
   $501 = $500&255;
   $502 = (($mbPos$0227) + ($$sum18)|0);
   $503 = HEAP8[$502>>0]|0;
   $504 = $503&255;
   $505 = (($504) + ($501))|0;
   $506 = (($hor$3) + 1)|0;
   $507 = (($491) + ($484))|0;
   $508 = (($498) + ($507))|0;
   $509 = HEAP32[$firstPhase>>2]|0;
   $510 = (($508) + ($509))|0;
   $511 = (($510) + ($505))|0;
   HEAP32[$firstPhase>>2] = $511;
   $512 = (($507) - ($498))|0;
   $513 = (($512) - ($505))|0;
   $514 = HEAP32[$401>>2]|0;
   $515 = (($513) + ($514))|0;
   HEAP32[$401>>2] = $515;
   $j$6 = $506;$l$sroa$0$2 = $484;$l$sroa$16$2 = $491;$l$sroa$32$2 = $498;$l$sroa$48$2 = $505;$ver$2 = 1;
  } else {
   $j$6 = $hor$3;$l$sroa$0$2 = $l$sroa$0$1239;$l$sroa$16$2 = $l$sroa$16$1238;$l$sroa$32$2 = $l$sroa$32$1237;$l$sroa$48$2 = $l$sroa$48$1236;$ver$2 = 0;
  }
  do {
   if ($R$0127140) {
    $517 = (($mbPos$0227) + 8|0);
    $518 = HEAP8[$517>>0]|0;
    $519 = $518&255;
    $520 = (($mbPos$0227) + ($$sum4)|0);
    $521 = HEAP8[$520>>0]|0;
    $522 = $521&255;
    $523 = (($522) + ($519))|0;
    $524 = (($mbPos$0227) + ($$sum56)|0);
    $525 = HEAP8[$524>>0]|0;
    $526 = $525&255;
    $527 = (($mbPos$0227) + ($$sum7)|0);
    $528 = HEAP8[$527>>0]|0;
    $529 = $528&255;
    $530 = (($529) + ($526))|0;
    $531 = (($mbPos$0227) + ($$sum8)|0);
    $532 = HEAP8[$531>>0]|0;
    $533 = $532&255;
    $534 = (($mbPos$0227) + ($$sum9)|0);
    $535 = HEAP8[$534>>0]|0;
    $536 = $535&255;
    $537 = (($536) + ($533))|0;
    $538 = (($mbPos$0227) + ($$sum10)|0);
    $539 = HEAP8[$538>>0]|0;
    $540 = $539&255;
    $541 = (($mbPos$0227) + ($$sum11)|0);
    $542 = HEAP8[$541>>0]|0;
    $543 = $542&255;
    $544 = (($543) + ($540))|0;
    $545 = (($j$6) + 1)|0;
    $546 = (($ver$2) + 1)|0;
    $547 = (($530) + ($523))|0;
    $548 = (($537) + ($547))|0;
    $549 = HEAP32[$firstPhase>>2]|0;
    $550 = (($548) + ($549))|0;
    $551 = (($550) + ($544))|0;
    HEAP32[$firstPhase>>2] = $551;
    $552 = (($547) - ($537))|0;
    $553 = (($552) - ($544))|0;
    $554 = HEAP32[$401>>2]|0;
    $555 = (($553) + ($554))|0;
    HEAP32[$401>>2] = $555;
    $556 = ($hor$3|0)==(0);
    $or$cond11 = $556 & $557;
    if ($or$cond11) {
     $558 = (($l$sroa$32$2) + ($l$sroa$48$2))|0;
     $559 = (($558) + ($l$sroa$16$2))|0;
     $560 = (($559) + ($l$sroa$0$2))|0;
     $561 = (($560) - ($523))|0;
     $562 = (($561) - ($530))|0;
     $563 = (($562) - ($537))|0;
     $564 = (($563) - ($544))|0;
     $565 = $564 >> 4;
     HEAP32[$398>>2] = $565;
     $582 = $555;$j$7166195199 = $545;$ver$3164196198 = $546;
     label = 54;
     break;
    } else {
     if ($556) {
      $582 = $555;$j$7166195199 = $545;$ver$3164196198 = $546;
      label = 54;
      break;
     } else {
      $j$7167180 = $545;$ver$3165181 = $546;
      label = 49;
      break;
     }
    }
   } else {
    $516 = ($hor$3|0)==(0);
    if ($516) {
     $j$7166 = $j$6;$ver$3164 = $ver$2;
     label = 50;
    } else {
     $j$7167180 = $j$6;$ver$3165181 = $ver$2;
     label = 49;
    }
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   $566 = (($hor$3) + 2)|0;
   $567 = HEAP32[$398>>2]|0;
   $568 = $567 >> $566;
   HEAP32[$398>>2] = $568;
   $j$7166 = $j$7167180;$ver$3164 = $ver$3165181;
   label = 50;
  }
  do {
   if ((label|0) == 50) {
    label = 0;
    $569 = ($ver$3164|0)==(0);
    $or$cond15 = $569 & $570;
    $or$cond17 = $or$cond15 & $571;
    if ($or$cond17) {
     $572 = (($a$sroa$32$2) + ($a$sroa$48$2))|0;
     $573 = (($572) + ($a$sroa$16$2))|0;
     $574 = (($573) + ($a$sroa$0$2))|0;
     $575 = (($574) - ($b$sroa$48$2))|0;
     $576 = (($575) - ($b$sroa$32$2))|0;
     $577 = (($576) - ($b$sroa$16$2))|0;
     $578 = (($577) - ($b$sroa$0$2))|0;
     $579 = $578 >> 4;
     HEAP32[$401>>2] = $579;
     $j$7166194 = $j$7166;
     break;
    }
    if ($569) {
     $j$7166194 = $j$7166;
    } else {
     $$pre = HEAP32[$401>>2]|0;
     $582 = $$pre;$j$7166195199 = $j$7166;$ver$3164196198 = $ver$3164;
     label = 54;
    }
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   $580 = (($ver$3164196198) + 2)|0;
   $581 = $582 >> $580;
   HEAP32[$401>>2] = $581;
   $j$7166194 = $j$7166195199;
  }
  if ((($j$7166194|0) == 1)) {
   $583 = HEAP32[$firstPhase>>2]|0;
   $584 = $583 >> 3;
   HEAP32[$firstPhase>>2] = $584;
  } else if ((($j$7166194|0) == 2)) {
   $585 = HEAP32[$firstPhase>>2]|0;
   $586 = $585 >> 4;
   HEAP32[$firstPhase>>2] = $586;
  } else if ((($j$7166194|0) == 3)) {
   $587 = HEAP32[$firstPhase>>2]|0;
   $588 = ($587*21)|0;
   $589 = $588 >> 9;
   HEAP32[$firstPhase>>2] = $589;
  } else {
   $590 = HEAP32[$firstPhase>>2]|0;
   $591 = $590 >> 5;
   HEAP32[$firstPhase>>2] = $591;
  }
  _Transform($firstPhase);
  $592 = $comp$0226 << 6;
  $$sum3 = (($592) + 256)|0;
  $593 = (($data) + ($$sum3)|0);
  $i$1223 = 0;$pData$1224 = $593;$pTmp$1225 = $firstPhase;
  while(1) {
   $594 = $i$1223 >>> 1;
   $595 = $594 & 3;
   $596 = (($pTmp$1225) + ($595<<2)|0);
   $597 = HEAP32[$596>>2]|0;
   $598 = ($597|0)<(0);
   if ($598) {
    $602 = 0;
   } else {
    $599 = ($597|0)>(255);
    $600 = $597&255;
    $phitmp = $599 ? -1 : $600;
    $602 = $phitmp;
   }
   $601 = (($pData$1224) + 1|0);
   HEAP8[$pData$1224>>0] = $602;
   $603 = (($i$1223) + 1)|0;
   $604 = $603 & 15;
   $605 = ($604|0)==(0);
   $606 = (($pTmp$1225) + 16|0);
   $$pTmp$1 = $605 ? $606 : $pTmp$1225;
   $exitcond = ($603|0)==(64);
   if ($exitcond) {
    break;
   } else {
    $i$1223 = $603;$pData$1224 = $601;$pTmp$1225 = $$pTmp$1;
   }
  }
  $607 = (($mbPos$0227) + ($402)|0);
  $608 = (($comp$0226) + 1)|0;
  $exitcond247 = ($608|0)==(2);
  if ($exitcond247) {
   break;
  } else {
   $a$sroa$0$1231 = $a$sroa$0$2;$a$sroa$16$1230 = $a$sroa$16$2;$a$sroa$32$1229 = $a$sroa$32$2;$a$sroa$48$1228 = $a$sroa$48$2;$b$sroa$0$1235 = $b$sroa$0$2;$b$sroa$16$1234 = $b$sroa$16$2;$b$sroa$32$1233 = $b$sroa$32$2;$b$sroa$48$1232 = $b$sroa$48$2;$comp$0226 = $608;$l$sroa$0$1239 = $l$sroa$0$2;$l$sroa$16$1238 = $l$sroa$16$2;$l$sroa$32$1237 = $l$sroa$32$2;$l$sroa$48$1236 = $l$sroa$48$2;$mbPos$0227 = $607;
  }
 }
 _h264bsdWriteMacroblock($currImage,$data);
 STACKTOP = sp;return;
}
function _Transform($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($data) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($data) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1 | $3;
 $5 = ($4|0)==(0);
 $6 = HEAP32[$data>>2]|0;
 if ($5) {
  $7 = (($data) + 60|0);
  HEAP32[$7>>2] = $6;
  $8 = (($data) + 56|0);
  HEAP32[$8>>2] = $6;
  $9 = (($data) + 52|0);
  HEAP32[$9>>2] = $6;
  $10 = (($data) + 48|0);
  HEAP32[$10>>2] = $6;
  $11 = (($data) + 44|0);
  HEAP32[$11>>2] = $6;
  $12 = (($data) + 40|0);
  HEAP32[$12>>2] = $6;
  $13 = (($data) + 36|0);
  HEAP32[$13>>2] = $6;
  $14 = (($data) + 32|0);
  HEAP32[$14>>2] = $6;
  $15 = (($data) + 28|0);
  HEAP32[$15>>2] = $6;
  $16 = (($data) + 24|0);
  HEAP32[$16>>2] = $6;
  $17 = (($data) + 20|0);
  HEAP32[$17>>2] = $6;
  HEAP32[$2>>2] = $6;
  $18 = (($data) + 12|0);
  HEAP32[$18>>2] = $6;
  $19 = (($data) + 8|0);
  HEAP32[$19>>2] = $6;
  HEAP32[$0>>2] = $6;
  STACKTOP = sp;return;
 } else {
  $20 = (($1) + ($6))|0;
  $21 = $1 >> 1;
  $22 = (($21) + ($6))|0;
  $23 = (($6) - ($21))|0;
  $24 = (($6) - ($1))|0;
  $25 = (($data) + 16|0);
  $26 = (($3) + ($20))|0;
  HEAP32[$data>>2] = $26;
  $27 = $3 >> 1;
  $28 = (($27) + ($20))|0;
  HEAP32[$25>>2] = $28;
  $29 = (($20) - ($27))|0;
  $30 = (($data) + 32|0);
  HEAP32[$30>>2] = $29;
  $31 = (($20) - ($3))|0;
  $32 = (($data) + 48|0);
  HEAP32[$32>>2] = $31;
  $33 = (($data) + 20|0);
  $34 = (($3) + ($22))|0;
  HEAP32[$0>>2] = $34;
  $35 = (($27) + ($22))|0;
  HEAP32[$33>>2] = $35;
  $36 = (($22) - ($27))|0;
  $37 = (($data) + 36|0);
  HEAP32[$37>>2] = $36;
  $38 = (($22) - ($3))|0;
  $39 = (($data) + 52|0);
  HEAP32[$39>>2] = $38;
  $40 = (($data) + 8|0);
  $41 = (($data) + 24|0);
  $42 = (($3) + ($23))|0;
  HEAP32[$40>>2] = $42;
  $43 = (($27) + ($23))|0;
  HEAP32[$41>>2] = $43;
  $44 = (($23) - ($27))|0;
  $45 = (($data) + 40|0);
  HEAP32[$45>>2] = $44;
  $46 = (($23) - ($3))|0;
  $47 = (($data) + 56|0);
  HEAP32[$47>>2] = $46;
  $48 = (($data) + 12|0);
  $49 = (($data) + 28|0);
  $50 = (($3) + ($24))|0;
  HEAP32[$48>>2] = $50;
  $51 = (($27) + ($24))|0;
  HEAP32[$49>>2] = $51;
  $52 = (($24) - ($27))|0;
  $53 = (($data) + 44|0);
  HEAP32[$53>>2] = $52;
  $54 = (($24) - ($3))|0;
  $55 = (($data) + 60|0);
  HEAP32[$55>>2] = $54;
  STACKTOP = sp;return;
 }
}
function _h264bsdDecodeVuiParameters($pStrmData,$pVuiParameters) {
 $pStrmData = $pStrmData|0;
 $pVuiParameters = $pVuiParameters|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _H264SwDecMemset($pVuiParameters,0,952);
 $0 = (_h264bsdGetBits($pStrmData,1)|0);
 $1 = ($0|0)==(-1);
 if ($1) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($0|0)==(1);
 $3 = $2&1;
 HEAP32[$pVuiParameters>>2] = $3;
 do {
  if ($2) {
   $4 = (_h264bsdGetBits($pStrmData,8)|0);
   $5 = ($4|0)==(-1);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $6 = (($pVuiParameters) + 4|0);
   HEAP32[$6>>2] = $4;
   $7 = ($4|0)==(255);
   if ($7) {
    $8 = (_h264bsdGetBits($pStrmData,16)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    $10 = (($pVuiParameters) + 8|0);
    HEAP32[$10>>2] = $8;
    $11 = (_h264bsdGetBits($pStrmData,16)|0);
    $12 = ($11|0)==(-1);
    if ($12) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $13 = (($pVuiParameters) + 12|0);
     HEAP32[$13>>2] = $11;
     break;
    }
   }
  }
 } while(0);
 $14 = (_h264bsdGetBits($pStrmData,1)|0);
 $15 = ($14|0)==(-1);
 if ($15) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = ($14|0)==(1);
 $17 = $16&1;
 $18 = (($pVuiParameters) + 16|0);
 HEAP32[$18>>2] = $17;
 do {
  if ($16) {
   $19 = (_h264bsdGetBits($pStrmData,1)|0);
   $20 = ($19|0)==(-1);
   if ($20) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $21 = ($19|0)==(1);
    $22 = $21&1;
    $23 = (($pVuiParameters) + 20|0);
    HEAP32[$23>>2] = $22;
    break;
   }
  }
 } while(0);
 $24 = (_h264bsdGetBits($pStrmData,1)|0);
 $25 = ($24|0)==(-1);
 if ($25) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = ($24|0)==(1);
 $27 = $26&1;
 $28 = (($pVuiParameters) + 24|0);
 HEAP32[$28>>2] = $27;
 do {
  if ($26) {
   $29 = (_h264bsdGetBits($pStrmData,3)|0);
   $30 = ($29|0)==(-1);
   if ($30) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $31 = (($pVuiParameters) + 28|0);
   HEAP32[$31>>2] = $29;
   $32 = (_h264bsdGetBits($pStrmData,1)|0);
   $33 = ($32|0)==(-1);
   if ($33) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $34 = ($32|0)==(1);
   $35 = $34&1;
   $36 = (($pVuiParameters) + 32|0);
   HEAP32[$36>>2] = $35;
   $37 = (_h264bsdGetBits($pStrmData,1)|0);
   $38 = ($37|0)==(-1);
   if ($38) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = ($37|0)==(1);
   $40 = $39&1;
   $41 = (($pVuiParameters) + 36|0);
   HEAP32[$41>>2] = $40;
   if (!($39)) {
    $51 = (($pVuiParameters) + 40|0);
    HEAP32[$51>>2] = 2;
    $52 = (($pVuiParameters) + 44|0);
    HEAP32[$52>>2] = 2;
    $53 = (($pVuiParameters) + 48|0);
    HEAP32[$53>>2] = 2;
    break;
   }
   $42 = (_h264bsdGetBits($pStrmData,8)|0);
   $43 = ($42|0)==(-1);
   if ($43) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $44 = (($pVuiParameters) + 40|0);
   HEAP32[$44>>2] = $42;
   $45 = (_h264bsdGetBits($pStrmData,8)|0);
   $46 = ($45|0)==(-1);
   if ($46) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $47 = (($pVuiParameters) + 44|0);
   HEAP32[$47>>2] = $45;
   $48 = (_h264bsdGetBits($pStrmData,8)|0);
   $49 = ($48|0)==(-1);
   if ($49) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $50 = (($pVuiParameters) + 48|0);
    HEAP32[$50>>2] = $48;
    break;
   }
  } else {
   $54 = (($pVuiParameters) + 28|0);
   HEAP32[$54>>2] = 5;
   $55 = (($pVuiParameters) + 40|0);
   HEAP32[$55>>2] = 2;
   $56 = (($pVuiParameters) + 44|0);
   HEAP32[$56>>2] = 2;
   $57 = (($pVuiParameters) + 48|0);
   HEAP32[$57>>2] = 2;
  }
 } while(0);
 $58 = (_h264bsdGetBits($pStrmData,1)|0);
 $59 = ($58|0)==(-1);
 if ($59) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $60 = ($58|0)==(1);
 $61 = $60&1;
 $62 = (($pVuiParameters) + 52|0);
 HEAP32[$62>>2] = $61;
 if ($60) {
  $63 = (($pVuiParameters) + 56|0);
  $64 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$63)|0);
  $65 = ($64|0)==(0);
  if (!($65)) {
   $$0 = $64;
   STACKTOP = sp;return ($$0|0);
  }
  $66 = HEAP32[$63>>2]|0;
  $67 = ($66>>>0)>(5);
  if ($67) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $68 = (($pVuiParameters) + 60|0);
  $69 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$68)|0);
  $70 = ($69|0)==(0);
  if (!($70)) {
   $$0 = $69;
   STACKTOP = sp;return ($$0|0);
  }
  $71 = HEAP32[$68>>2]|0;
  $72 = ($71>>>0)>(5);
  if ($72) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $73 = (_h264bsdGetBits($pStrmData,1)|0);
 $74 = ($73|0)==(-1);
 if ($74) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $75 = ($73|0)==(1);
 $76 = $75&1;
 $77 = (($pVuiParameters) + 64|0);
 HEAP32[$77>>2] = $76;
 do {
  if ($75) {
   $78 = (_h264bsdShowBits32($pStrmData)|0);
   $79 = (_h264bsdFlushBits($pStrmData,32)|0);
   $80 = ($79|0)==(-1);
   $81 = ($78|0)==(0);
   $or$cond = $80 | $81;
   if ($or$cond) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $82 = (($pVuiParameters) + 68|0);
   HEAP32[$82>>2] = $78;
   $83 = (_h264bsdShowBits32($pStrmData)|0);
   $84 = (_h264bsdFlushBits($pStrmData,32)|0);
   $85 = ($84|0)==(-1);
   $86 = ($83|0)==(0);
   $or$cond1 = $85 | $86;
   if ($or$cond1) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $87 = (($pVuiParameters) + 72|0);
   HEAP32[$87>>2] = $83;
   $88 = (_h264bsdGetBits($pStrmData,1)|0);
   $89 = ($88|0)==(-1);
   if ($89) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $90 = ($88|0)==(1);
    $91 = $90&1;
    $92 = (($pVuiParameters) + 76|0);
    HEAP32[$92>>2] = $91;
    break;
   }
  }
 } while(0);
 $93 = (_h264bsdGetBits($pStrmData,1)|0);
 $94 = ($93|0)==(-1);
 if ($94) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $95 = ($93|0)==(1);
 $96 = $95&1;
 $97 = (($pVuiParameters) + 80|0);
 HEAP32[$97>>2] = $96;
 if ($95) {
  $98 = (($pVuiParameters) + 84|0);
  $99 = (_DecodeHrdParameters($pStrmData,$98)|0);
  $100 = ($99|0)==(0);
  if (!($100)) {
   $$0 = $99;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $101 = (($pVuiParameters) + 84|0);
  HEAP32[$101>>2] = 1;
  $102 = (($pVuiParameters) + 96|0);
  HEAP32[$102>>2] = 288000001;
  $103 = (($pVuiParameters) + 224|0);
  HEAP32[$103>>2] = 288000001;
  $104 = (($pVuiParameters) + 480|0);
  HEAP32[$104>>2] = 24;
  $105 = (($pVuiParameters) + 484|0);
  HEAP32[$105>>2] = 24;
  $106 = (($pVuiParameters) + 488|0);
  HEAP32[$106>>2] = 24;
  $107 = (($pVuiParameters) + 492|0);
  HEAP32[$107>>2] = 24;
 }
 $108 = (_h264bsdGetBits($pStrmData,1)|0);
 $109 = ($108|0)==(-1);
 if ($109) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $110 = ($108|0)==(1);
 $111 = $110&1;
 $112 = (($pVuiParameters) + 496|0);
 HEAP32[$112>>2] = $111;
 if ($110) {
  $113 = (($pVuiParameters) + 500|0);
  $114 = (_DecodeHrdParameters($pStrmData,$113)|0);
  $115 = ($114|0)==(0);
  if (!($115)) {
   $$0 = $114;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $116 = (($pVuiParameters) + 500|0);
  HEAP32[$116>>2] = 1;
  $117 = (($pVuiParameters) + 512|0);
  HEAP32[$117>>2] = 240000001;
  $118 = (($pVuiParameters) + 640|0);
  HEAP32[$118>>2] = 240000001;
  $119 = (($pVuiParameters) + 896|0);
  HEAP32[$119>>2] = 24;
  $120 = (($pVuiParameters) + 900|0);
  HEAP32[$120>>2] = 24;
  $121 = (($pVuiParameters) + 904|0);
  HEAP32[$121>>2] = 24;
  $122 = (($pVuiParameters) + 908|0);
  HEAP32[$122>>2] = 24;
 }
 $123 = HEAP32[$97>>2]|0;
 $124 = ($123|0)==(0);
 if ($124) {
  $125 = HEAP32[$112>>2]|0;
  $126 = ($125|0)==(0);
  if (!($126)) {
   label = 46;
  }
 } else {
  label = 46;
 }
 do {
  if ((label|0) == 46) {
   $127 = (_h264bsdGetBits($pStrmData,1)|0);
   $128 = ($127|0)==(-1);
   if ($128) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $129 = ($127|0)==(1);
    $130 = $129&1;
    $131 = (($pVuiParameters) + 912|0);
    HEAP32[$131>>2] = $130;
    break;
   }
  }
 } while(0);
 $132 = (_h264bsdGetBits($pStrmData,1)|0);
 $133 = ($132|0)==(-1);
 if ($133) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $134 = ($132|0)==(1);
 $135 = $134&1;
 $136 = (($pVuiParameters) + 916|0);
 HEAP32[$136>>2] = $135;
 $137 = (_h264bsdGetBits($pStrmData,1)|0);
 $138 = ($137|0)==(-1);
 if ($138) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $139 = ($137|0)==(1);
 $140 = $139&1;
 $141 = (($pVuiParameters) + 920|0);
 HEAP32[$141>>2] = $140;
 do {
  if ($139) {
   $142 = (_h264bsdGetBits($pStrmData,1)|0);
   $143 = ($142|0)==(-1);
   if ($143) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $144 = ($142|0)==(1);
   $145 = $144&1;
   $146 = (($pVuiParameters) + 924|0);
   HEAP32[$146>>2] = $145;
   $147 = (($pVuiParameters) + 928|0);
   $148 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$147)|0);
   $149 = ($148|0)==(0);
   if (!($149)) {
    $$0 = $148;
    STACKTOP = sp;return ($$0|0);
   }
   $150 = HEAP32[$147>>2]|0;
   $151 = ($150>>>0)>(16);
   if ($151) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $152 = (($pVuiParameters) + 932|0);
   $153 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$152)|0);
   $154 = ($153|0)==(0);
   if (!($154)) {
    $$0 = $153;
    STACKTOP = sp;return ($$0|0);
   }
   $155 = HEAP32[$152>>2]|0;
   $156 = ($155>>>0)>(16);
   if ($156) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $157 = (($pVuiParameters) + 936|0);
   $158 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$157)|0);
   $159 = ($158|0)==(0);
   if (!($159)) {
    $$0 = $158;
    STACKTOP = sp;return ($$0|0);
   }
   $160 = HEAP32[$157>>2]|0;
   $161 = ($160>>>0)>(16);
   if ($161) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $162 = (($pVuiParameters) + 940|0);
   $163 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$162)|0);
   $164 = ($163|0)==(0);
   if (!($164)) {
    $$0 = $163;
    STACKTOP = sp;return ($$0|0);
   }
   $165 = HEAP32[$162>>2]|0;
   $166 = ($165>>>0)>(16);
   if ($166) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $167 = (($pVuiParameters) + 944|0);
   $168 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$167)|0);
   $169 = ($168|0)==(0);
   if (!($169)) {
    $$0 = $168;
    STACKTOP = sp;return ($$0|0);
   }
   $170 = (($pVuiParameters) + 948|0);
   $171 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$170)|0);
   $172 = ($171|0)==(0);
   if ($172) {
    break;
   } else {
    $$0 = $171;
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $173 = (($pVuiParameters) + 924|0);
   HEAP32[$173>>2] = 1;
   $174 = (($pVuiParameters) + 928|0);
   HEAP32[$174>>2] = 2;
   $175 = (($pVuiParameters) + 932|0);
   HEAP32[$175>>2] = 1;
   $176 = (($pVuiParameters) + 936|0);
   HEAP32[$176>>2] = 16;
   $177 = (($pVuiParameters) + 940|0);
   HEAP32[$177>>2] = 16;
   $178 = (($pVuiParameters) + 944|0);
   HEAP32[$178>>2] = 16;
   $179 = (($pVuiParameters) + 948|0);
   HEAP32[$179>>2] = 16;
  }
 } while(0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _DecodeHrdParameters($pStrmData,$pHrdParameters) {
 $pStrmData = $pStrmData|0;
 $pHrdParameters = $pHrdParameters|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$pHrdParameters)|0);
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $2 = HEAP32[$pHrdParameters>>2]|0;
   $3 = (($2) + 1)|0;
   HEAP32[$pHrdParameters>>2] = $3;
   $4 = ($3>>>0)>(32);
   if ($4) {
    $$0 = 1;
   } else {
    $5 = (_h264bsdGetBits($pStrmData,4)|0);
    $6 = ($5|0)==(-1);
    if ($6) {
     $$0 = 1;
    } else {
     $7 = (($pHrdParameters) + 4|0);
     HEAP32[$7>>2] = $5;
     $8 = (_h264bsdGetBits($pStrmData,4)|0);
     $9 = ($8|0)==(-1);
     if ($9) {
      $$0 = 1;
     } else {
      $10 = (($pHrdParameters) + 8|0);
      HEAP32[$10>>2] = $8;
      $11 = HEAP32[$pHrdParameters>>2]|0;
      $12 = ($11|0)==(0);
      if (!($12)) {
       $i$01 = 0;
       while(1) {
        $13 = ((($pHrdParameters) + ($i$01<<2)|0) + 12|0);
        $14 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$13)|0);
        $15 = ($14|0)==(0);
        if (!($15)) {
         $$0 = $14;
         break L1;
        }
        $16 = HEAP32[$13>>2]|0;
        $17 = ($16|0)==(-1);
        if ($17) {
         $$0 = 1;
         break L1;
        }
        $18 = (($16) + 1)|0;
        HEAP32[$13>>2] = $18;
        $19 = HEAP32[$7>>2]|0;
        $20 = (($19) + 6)|0;
        $21 = $18 << $20;
        HEAP32[$13>>2] = $21;
        $22 = ((($pHrdParameters) + ($i$01<<2)|0) + 140|0);
        $23 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$22)|0);
        $24 = ($23|0)==(0);
        if (!($24)) {
         $$0 = $23;
         break L1;
        }
        $25 = HEAP32[$22>>2]|0;
        $26 = ($25|0)==(-1);
        if ($26) {
         $$0 = 1;
         break L1;
        }
        $27 = (($25) + 1)|0;
        HEAP32[$22>>2] = $27;
        $28 = HEAP32[$10>>2]|0;
        $29 = (($28) + 4)|0;
        $30 = $27 << $29;
        HEAP32[$22>>2] = $30;
        $31 = (_h264bsdGetBits($pStrmData,1)|0);
        $32 = ($31|0)==(-1);
        if ($32) {
         $$0 = 1;
         break L1;
        }
        $33 = ($31|0)==(1);
        $34 = $33&1;
        $35 = ((($pHrdParameters) + ($i$01<<2)|0) + 268|0);
        HEAP32[$35>>2] = $34;
        $36 = (($i$01) + 1)|0;
        $37 = HEAP32[$pHrdParameters>>2]|0;
        $38 = ($36>>>0)<($37>>>0);
        if ($38) {
         $i$01 = $36;
        } else {
         break;
        }
       }
      }
      $39 = (_h264bsdGetBits($pStrmData,5)|0);
      $40 = ($39|0)==(-1);
      if ($40) {
       $$0 = 1;
      } else {
       $41 = (($39) + 1)|0;
       $42 = (($pHrdParameters) + 396|0);
       HEAP32[$42>>2] = $41;
       $43 = (_h264bsdGetBits($pStrmData,5)|0);
       $44 = ($43|0)==(-1);
       if ($44) {
        $$0 = 1;
       } else {
        $45 = (($43) + 1)|0;
        $46 = (($pHrdParameters) + 400|0);
        HEAP32[$46>>2] = $45;
        $47 = (_h264bsdGetBits($pStrmData,5)|0);
        $48 = ($47|0)==(-1);
        if ($48) {
         $$0 = 1;
        } else {
         $49 = (($47) + 1)|0;
         $50 = (($pHrdParameters) + 404|0);
         HEAP32[$50>>2] = $49;
         $51 = (_h264bsdGetBits($pStrmData,5)|0);
         $52 = ($51|0)==(-1);
         if ($52) {
          $$0 = 1;
         } else {
          $53 = (($pHrdParameters) + 408|0);
          HEAP32[$53>>2] = $51;
          $$0 = 0;
         }
        }
       }
      }
     }
    }
   }
  } else {
   $$0 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDecodePicOrderCnt($poc,$sps,$pSliceHeader,$pNalUnit) {
 $poc = $poc|0;
 $sps = $sps|0;
 $pSliceHeader = $pSliceHeader|0;
 $pNalUnit = $pNalUnit|0;
 var $$ = 0, $$16 = 0, $$2 = 0, $$3 = 0, $$absFrameNum$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $absFrameNum$0 = 0, $containsMmco5$0 = 0, $expectedDeltaPicOrderCntCycle$0$lcssa = 0, $expectedDeltaPicOrderCntCycle$08 = 0, $frameNumInPicOrderCntCycle$0 = 0, $frameNumOffset$0 = 0, $frameNumOffset$1$ph = 0, $frameNumOffset$14 = 0, $i$0 = 0, $i$17 = 0, $i$25 = 0;
 var $or$cond = 0, $picOrderCnt$0 = 0, $picOrderCnt$26 = 0, $picOrderCnt$3 = 0, $picOrderCnt$4 = 0, $picOrderCnt$6 = 0, $picOrderCnt$7 = 0, $picOrderCntCycleCnt$0 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pSliceHeader) + 284|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $containsMmco5$0 = 0;
  } else {
   $i$0 = 0;
   while(1) {
    $3 = ((($pSliceHeader) + (($i$0*20)|0)|0) + 288|0);
    $4 = HEAP32[$3>>2]|0;
    if ((($4|0) == 5)) {
     $containsMmco5$0 = 1;
     break L1;
    } else if ((($4|0) == 0)) {
     break;
    }
    $5 = (($i$0) + 1)|0;
    $i$0 = $5;
   }
   $containsMmco5$0 = 0;
  }
 } while(0);
 $6 = (($sps) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 if ((($7|0) == 1)) {
  $56 = HEAP32[$pNalUnit>>2]|0;
  $57 = ($56|0)==(5);
  if ($57) {
   $frameNumOffset$0 = 0;
  } else {
   $58 = (($poc) + 8|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($pSliceHeader) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59>>>0)>($61>>>0);
   $63 = (($poc) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   if ($62) {
    $65 = (($sps) + 12|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (($66) + ($64))|0;
    $frameNumOffset$0 = $67;
   } else {
    $frameNumOffset$0 = $64;
   }
  }
  $68 = (($sps) + 36|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)==(0);
  if ($70) {
   $absFrameNum$0 = 0;
  } else {
   $71 = (($pSliceHeader) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) + ($frameNumOffset$0))|0;
   $absFrameNum$0 = $73;
  }
  $74 = (($pNalUnit) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75|0)==(0);
  $77 = ($absFrameNum$0|0)!=(0);
  $or$cond = $76 & $77;
  $78 = $or$cond << 31 >> 31;
  $$absFrameNum$0 = (($78) + ($absFrameNum$0))|0;
  $79 = ($$absFrameNum$0|0)!=(0);
  if ($79) {
   $80 = (($$absFrameNum$0) + -1)|0;
   $81 = (($80>>>0) / ($69>>>0))&-1;
   $82 = (($80>>>0) % ($69>>>0))&-1;
   $frameNumInPicOrderCntCycle$0 = $82;$picOrderCntCycleCnt$0 = $81;
  } else {
   $frameNumInPicOrderCntCycle$0 = 0;$picOrderCntCycleCnt$0 = 0;
  }
  if ($70) {
   $expectedDeltaPicOrderCntCycle$0$lcssa = 0;
  } else {
   $83 = (($sps) + 40|0);
   $84 = HEAP32[$83>>2]|0;
   $expectedDeltaPicOrderCntCycle$08 = 0;$i$17 = 0;
   while(1) {
    $85 = (($84) + ($i$17<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + ($expectedDeltaPicOrderCntCycle$08))|0;
    $88 = (($i$17) + 1)|0;
    $89 = ($88>>>0)<($69>>>0);
    if ($89) {
     $expectedDeltaPicOrderCntCycle$08 = $87;$i$17 = $88;
    } else {
     $expectedDeltaPicOrderCntCycle$0$lcssa = $87;
     break;
    }
   }
  }
  if ($79) {
   $90 = Math_imul($expectedDeltaPicOrderCntCycle$0$lcssa, $picOrderCntCycleCnt$0)|0;
   $91 = (($sps) + 40|0);
   $92 = HEAP32[$91>>2]|0;
   $i$25 = 0;$picOrderCnt$26 = $90;
   while(1) {
    $93 = (($92) + ($i$25<<2)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($94) + ($picOrderCnt$26))|0;
    $96 = (($i$25) + 1)|0;
    $97 = ($96>>>0)>($frameNumInPicOrderCntCycle$0>>>0);
    if ($97) {
     $picOrderCnt$3 = $95;
     break;
    } else {
     $i$25 = $96;$picOrderCnt$26 = $95;
    }
   }
  } else {
   $picOrderCnt$3 = 0;
  }
  if ($76) {
   $98 = (($sps) + 28|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (($99) + ($picOrderCnt$3))|0;
   $picOrderCnt$4 = $100;
  } else {
   $picOrderCnt$4 = $picOrderCnt$3;
  }
  $101 = (($sps) + 32|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($pSliceHeader) + 32|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + ($102))|0;
  $106 = ($containsMmco5$0|0)==(0);
  $107 = (($poc) + 12|0);
  if ($106) {
   $108 = (($pSliceHeader) + 28|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ($105|0)<(0);
   $111 = $110 ? $105 : 0;
   $112 = (($111) + ($picOrderCnt$4))|0;
   $$2 = (($112) + ($109))|0;
   HEAP32[$107>>2] = $frameNumOffset$0;
   $113 = (($pSliceHeader) + 12|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($poc) + 8|0);
   HEAP32[$115>>2] = $114;
   $picOrderCnt$7 = $$2;
   STACKTOP = sp;return ($picOrderCnt$7|0);
  } else {
   HEAP32[$107>>2] = 0;
   $116 = (($poc) + 8|0);
   HEAP32[$116>>2] = 0;
   $picOrderCnt$7 = 0;
   STACKTOP = sp;return ($picOrderCnt$7|0);
  }
 } else if ((($7|0) == 0)) {
  $8 = HEAP32[$pNalUnit>>2]|0;
  $9 = ($8|0)==(5);
  if ($9) {
   $10 = (($poc) + 4|0);
   HEAP32[$10>>2] = 0;
   HEAP32[$poc>>2] = 0;
   $11 = (($pSliceHeader) + 20|0);
   $12 = HEAP32[$11>>2]|0;
   $140 = $poc;$24 = $12;$26 = 0;
   label = 11;
  } else {
   $$pre = HEAP32[$poc>>2]|0;
   $13 = (($pSliceHeader) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($$pre>>>0)>($14>>>0);
   if ($15) {
    $16 = (($$pre) - ($14))|0;
    $17 = (($sps) + 20|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 >>> 1;
    $20 = ($16>>>0)<($19>>>0);
    if ($20) {
     $140 = $poc;$24 = $14;$26 = $$pre;
     label = 11;
    } else {
     $21 = (($poc) + 4|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($22) + ($18))|0;
     $41 = $14;$53 = $poc;$picOrderCnt$0 = $23;
    }
   } else {
    $140 = $poc;$24 = $14;$26 = $$pre;
    label = 11;
   }
  }
  do {
   if ((label|0) == 11) {
    $25 = ($24>>>0)>($26>>>0);
    if ($25) {
     $27 = (($24) - ($26))|0;
     $28 = (($sps) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $29 >>> 1;
     $31 = ($27>>>0)>($30>>>0);
     if ($31) {
      $32 = (($poc) + 4|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($33) - ($29))|0;
      $41 = $24;$53 = $140;$picOrderCnt$0 = $34;
      break;
     }
    }
    $35 = (($poc) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $41 = $24;$53 = $140;$picOrderCnt$0 = $36;
   }
  } while(0);
  $37 = (($pNalUnit) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0);
  if ($39) {
   $40 = (($41) + ($picOrderCnt$0))|0;
   $42 = (($pSliceHeader) + 24|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)<(0);
   $45 = $44 ? $43 : 0;
   $$16 = (($40) + ($45))|0;
   $picOrderCnt$7 = $$16;
   STACKTOP = sp;return ($picOrderCnt$7|0);
  }
  $46 = (($poc) + 4|0);
  HEAP32[$46>>2] = $picOrderCnt$0;
  $47 = (($pSliceHeader) + 24|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)<(0);
  $50 = ($containsMmco5$0|0)==(0);
  if ($50) {
   $54 = $49 ? $48 : 0;
   $55 = (($41) + ($picOrderCnt$0))|0;
   $$ = (($55) + ($54))|0;
   HEAP32[$53>>2] = $41;
   $picOrderCnt$7 = $$;
   STACKTOP = sp;return ($picOrderCnt$7|0);
  } else {
   $51 = (($poc) + 4|0);
   HEAP32[$51>>2] = 0;
   $52 = (0 - ($48))|0;
   $storemerge = $49 ? $52 : 0;
   HEAP32[$53>>2] = $storemerge;
   $picOrderCnt$7 = 0;
   STACKTOP = sp;return ($picOrderCnt$7|0);
  }
 } else {
  $117 = HEAP32[$pNalUnit>>2]|0;
  $118 = ($117|0)==(5);
  if ($118) {
   $$pre13 = (($poc) + 12|0);
   $$pre$phiZ2D = $$pre13;$frameNumOffset$14 = 0;$picOrderCnt$6 = 0;
  } else {
   $119 = (($poc) + 8|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($pSliceHeader) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ($120>>>0)>($122>>>0);
   $124 = (($poc) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   if ($123) {
    $126 = (($sps) + 12|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (($127) + ($125))|0;
    $frameNumOffset$1$ph = $128;
   } else {
    $frameNumOffset$1$ph = $125;
   }
   $129 = (($pNalUnit) + 4|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ($130|0)==(0);
   $132 = (($122) + ($frameNumOffset$1$ph))|0;
   $133 = $132 << 1;
   $134 = $131 << 31 >> 31;
   $$3 = (($133) + ($134))|0;
   $$pre$phiZ2D = $124;$frameNumOffset$14 = $frameNumOffset$1$ph;$picOrderCnt$6 = $$3;
  }
  $135 = ($containsMmco5$0|0)==(0);
  if ($135) {
   HEAP32[$$pre$phiZ2D>>2] = $frameNumOffset$14;
   $136 = (($pSliceHeader) + 12|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (($poc) + 8|0);
   HEAP32[$138>>2] = $137;
   $picOrderCnt$7 = $picOrderCnt$6;
   STACKTOP = sp;return ($picOrderCnt$7|0);
  } else {
   HEAP32[$$pre$phiZ2D>>2] = 0;
   $139 = (($poc) + 8|0);
   HEAP32[$139>>2] = 0;
   $picOrderCnt$7 = 0;
   STACKTOP = sp;return ($picOrderCnt$7|0);
  }
 }
 return (0)|0;
}
function _h264bsdInit($pStorage,$noOutputReordering) {
 $pStorage = $pStorage|0;
 $noOutputReordering = $noOutputReordering|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _h264bsdInitStorage($pStorage);
 $0 = (_H264SwDecMalloc(2112)|0);
 $1 = (($pStorage) + 3376|0);
 HEAP32[$1>>2] = $0;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 1;
 } else {
  $3 = ($noOutputReordering|0)==(0);
  if ($3) {
   $$0 = 0;
  } else {
   $4 = (($pStorage) + 1216|0);
   HEAP32[$4>>2] = 1;
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDecode($pStorage,$byteStrm,$len,$picId,$readBytes) {
 $pStorage = $pStorage|0;
 $byteStrm = $byteStrm|0;
 $len = $len|0;
 $picId = $picId|0;
 $readBytes = $readBytes|0;
 var $$ = 0, $$0 = 0, $$in = 0, $$pre$phi17Z2D = 0, $$pre$phi20Z2D = 0, $$pre$phiZ2D = 0, $$pre15 = 0, $$pre16 = 0, $$pre19 = 0, $$pre21 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $accessUnitBoundaryFlag = 0, $nalUnit = 0, $noOutputOfPriorPicsFlag = 0, $oldSPS$0 = 0, $or$cond3 = 0, $picParamSet = 0, $ppsId = 0, $seqParamSet = 0, $strm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $ppsId = sp + 204|0;
 $nalUnit = sp;
 $seqParamSet = sp + 112|0;
 $picParamSet = sp + 40|0;
 $strm = sp + 16|0;
 $accessUnitBoundaryFlag = sp + 12|0;
 $noOutputOfPriorPicsFlag = sp + 8|0;
 HEAP32[$accessUnitBoundaryFlag>>2] = 0;
 $0 = (($pStorage) + 3344|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 4;
 } else {
  $3 = (($pStorage) + 3348|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($byteStrm|0);
  if ($5) {
   $6 = (($pStorage) + 3356|0);
   ;HEAP32[$strm+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$strm+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$strm+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$strm+12>>2]=HEAP32[$6+12>>2]|0;
   $7 = HEAP32[$strm>>2]|0;
   $8 = (($strm) + 4|0);
   HEAP32[$8>>2] = $7;
   $9 = (($strm) + 8|0);
   HEAP32[$9>>2] = 0;
   $10 = (($strm) + 16|0);
   HEAP32[$10>>2] = 0;
   $11 = (($pStorage) + 3352|0);
   $12 = HEAP32[$11>>2]|0;
   HEAP32[$readBytes>>2] = $12;
  } else {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $13 = (_h264bsdExtractNalUnit($byteStrm,$len,$strm,$readBytes)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = (($pStorage) + 3356|0);
    ;HEAP32[$15+0>>2]=HEAP32[$strm+0>>2]|0;HEAP32[$15+4>>2]=HEAP32[$strm+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$strm+8>>2]|0;HEAP32[$15+12>>2]=HEAP32[$strm+12>>2]|0;HEAP32[$15+16>>2]=HEAP32[$strm+16>>2]|0;
    $16 = HEAP32[$readBytes>>2]|0;
    $17 = (($pStorage) + 3352|0);
    HEAP32[$17>>2] = $16;
    $18 = (($pStorage) + 3348|0);
    HEAP32[$18>>2] = $byteStrm;
    break;
   } else {
    $$0 = 3;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 $19 = (_h264bsdDecodeNalUnit($strm,$nalUnit)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = HEAP32[$nalUnit>>2]|0;
 $22 = (($21) + -1)|0;
 $23 = ($22>>>0)>(11);
 if ($23) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = (_h264bsdCheckAccessUnitBoundary($strm,$nalUnit,$pStorage,$accessUnitBoundaryFlag)|0);
 if ((($24|0) == 65520)) {
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else if ((($24|0) == 0)) {
  $25 = HEAP32[$accessUnitBoundaryFlag>>2]|0;
  $26 = ($25|0)==(0);
  do {
   if ($26) {
    label = 19;
   } else {
    $27 = (($pStorage) + 1184|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(0);
    if (!($29)) {
     $30 = (($pStorage) + 16|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==(0|0);
     if (!($32)) {
      $33 = (($pStorage) + 3380|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($34|0)==(0);
      if (!($35)) {
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $36 = (($pStorage) + 1188|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)==(0);
      if ($38) {
       $39 = (($pStorage) + 1220|0);
       $40 = (_h264bsdAllocateDpbImage($39)|0);
       $41 = (($pStorage) + 1336|0);
       HEAP32[$41>>2] = $40;
       _h264bsdInitRefPicList($39);
       (_h264bsdConceal($pStorage,$41,0)|0);
      } else {
       $42 = (($pStorage) + 1336|0);
       $43 = (($pStorage) + 1372|0);
       $44 = HEAP32[$43>>2]|0;
       (_h264bsdConceal($pStorage,$42,$44)|0);
      }
      HEAP32[$readBytes>>2] = 0;
      HEAP32[$0>>2] = 1;
      $47 = (($pStorage) + 1180|0);
      HEAP32[$47>>2] = 0;
      $$pre15 = (($pStorage) + 1336|0);
      $$pre16 = (($pStorage) + 1360|0);
      $$pre$phi17Z2D = $$pre16;$$pre$phiZ2D = $$pre15;
      break;
     }
    }
    $45 = (($pStorage) + 1188|0);
    HEAP32[$45>>2] = 0;
    $46 = (($pStorage) + 1180|0);
    HEAP32[$46>>2] = 0;
    label = 19;
   }
  } while(0);
  do {
   if ((label|0) == 19) {
    $48 = HEAP32[$nalUnit>>2]|0;
    if ((($48|0) == 1) | (($48|0) == 5)) {
     $$in = (($pStorage) + 1180|0);
     $65 = HEAP32[$$in>>2]|0;
     $66 = (($pStorage) + 1180|0);
     $67 = ($65|0)==(0);
     if (!($67)) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $68 = (($pStorage) + 1184|0);
     HEAP32[$68>>2] = 1;
     $69 = (_h264bsdIsStartOfPicture($pStorage)|0);
     $70 = ($69|0)==(0);
     if (!($70)) {
      $71 = (($pStorage) + 1204|0);
      HEAP32[$71>>2] = 0;
      $72 = (($pStorage) + 1208|0);
      HEAP32[$72>>2] = $picId;
      (_h264bsdCheckPpsId($strm,$ppsId)|0);
      $73 = (($pStorage) + 8|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = HEAP32[$ppsId>>2]|0;
      $76 = HEAP32[$nalUnit>>2]|0;
      $77 = ($76|0)==(5);
      $78 = $77&1;
      $79 = (_h264bsdActivateParamSets($pStorage,$75,$78)|0);
      $80 = ($79|0)==(0);
      if (!($80)) {
       $81 = (($pStorage) + 4|0);
       HEAP32[$81>>2] = 256;
       $82 = (($pStorage) + 12|0);
       HEAP32[$82>>2] = 0;
       HEAP32[$73>>2] = 32;
       $83 = (($pStorage) + 16|0);
       HEAP32[$83>>2] = 0;
       $84 = (($pStorage) + 3380|0);
       HEAP32[$84>>2] = 0;
       $85 = ($79|0)==(65535);
       $$ = $85 ? 5 : 4;
       $$0 = $$;
       STACKTOP = sp;return ($$0|0);
      }
      $86 = HEAP32[$73>>2]|0;
      $87 = ($74|0)==($86|0);
      if (!($87)) {
       $88 = (($pStorage) + 16|0);
       $89 = HEAP32[$88>>2]|0;
       HEAP32[$noOutputOfPriorPicsFlag>>2] = 1;
       $90 = HEAP32[$pStorage>>2]|0;
       $91 = ($90>>>0)<(32);
       if ($91) {
        $92 = ((($pStorage) + ($90<<2)|0) + 20|0);
        $93 = HEAP32[$92>>2]|0;
        $oldSPS$0 = $93;
       } else {
        $oldSPS$0 = 0;
       }
       HEAP32[$readBytes>>2] = 0;
       HEAP32[$0>>2] = 1;
       $94 = HEAP32[$nalUnit>>2]|0;
       $95 = ($94|0)==(5);
       if ($95) {
        $96 = (($pStorage) + 12|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = (_h264bsdCheckPriorPicsFlag($noOutputOfPriorPicsFlag,$strm,$89,$97,5)|0);
        $99 = HEAP32[$noOutputOfPriorPicsFlag>>2]|0;
        $100 = $99 | $98;
        $101 = ($100|0)==(0);
        if ($101) {
         $102 = (($pStorage) + 1220|0);
         $103 = (($pStorage) + 1276|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = ($104|0)!=(0);
         $106 = ($oldSPS$0|0)==(0|0);
         $or$cond3 = $105 | $106;
         if ($or$cond3) {
          label = 39;
         } else {
          $107 = (($oldSPS$0) + 52|0);
          $108 = HEAP32[$107>>2]|0;
          $109 = (($89) + 52|0);
          $110 = HEAP32[$109>>2]|0;
          $111 = ($108|0)==($110|0);
          if ($111) {
           $112 = (($oldSPS$0) + 56|0);
           $113 = HEAP32[$112>>2]|0;
           $114 = (($89) + 56|0);
           $115 = HEAP32[$114>>2]|0;
           $116 = ($113|0)==($115|0);
           if ($116) {
            $117 = (($oldSPS$0) + 88|0);
            $118 = HEAP32[$117>>2]|0;
            $119 = (($89) + 88|0);
            $120 = HEAP32[$119>>2]|0;
            $121 = ($118|0)==($120|0);
            if ($121) {
             _h264bsdFlushDpb($102);
            } else {
             label = 39;
            }
           } else {
            label = 39;
           }
          } else {
           label = 39;
          }
         }
        } else {
         label = 39;
        }
       } else {
        label = 39;
       }
       if ((label|0) == 39) {
        $122 = (($pStorage) + 1280|0);
        HEAP32[$122>>2] = 0;
       }
       $123 = HEAP32[$73>>2]|0;
       HEAP32[$pStorage>>2] = $123;
       $$0 = 2;
       STACKTOP = sp;return ($$0|0);
      }
     }
     $124 = (($pStorage) + 3380|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ($125|0)==(0);
     if (!($126)) {
      $$0 = 3;
      STACKTOP = sp;return ($$0|0);
     }
     $127 = (($pStorage) + 1368|0);
     $128 = (($pStorage) + 2356|0);
     $129 = (($pStorage) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($pStorage) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (_h264bsdDecodeSliceHeader($strm,$128,$130,$132,$nalUnit)|0);
     $134 = ($133|0)==(0);
     if (!($134)) {
      $$0 = 3;
      STACKTOP = sp;return ($$0|0);
     }
     $135 = (_h264bsdIsStartOfPicture($pStorage)|0);
     $136 = ($135|0)==(0);
     if ($136) {
      $$pre19 = (($pStorage) + 1220|0);
      $$pre$phi20Z2D = $$pre19;
     } else {
      $137 = HEAP32[$nalUnit>>2]|0;
      $138 = ($137|0)==(5);
      $$pre21 = (($pStorage) + 1220|0);
      if (!($138)) {
       $139 = (($pStorage) + 2368|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = (($nalUnit) + 4|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)!=(0);
       $144 = $143&1;
       $145 = HEAP32[$129>>2]|0;
       $146 = (($145) + 48|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = (_h264bsdCheckGapsInFrameNum($$pre21,$140,$144,$147)|0);
       $149 = ($148|0)==(0);
       if (!($149)) {
        $$0 = 3;
        STACKTOP = sp;return ($$0|0);
       }
      }
      $150 = (_h264bsdAllocateDpbImage($$pre21)|0);
      $151 = (($pStorage) + 1336|0);
      HEAP32[$151>>2] = $150;
      $$pre$phi20Z2D = $$pre21;
     }
     _memcpy(($127|0),($128|0),988)|0;
     $152 = (($pStorage) + 1188|0);
     HEAP32[$152>>2] = 1;
     $153 = (($pStorage) + 1360|0);
     $154 = $nalUnit;
     $155 = $154;
     $156 = HEAP32[$155>>2]|0;
     $157 = (($154) + 4)|0;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = $153;
     $161 = $160;
     HEAP32[$161>>2] = $156;
     $162 = (($160) + 4)|0;
     $163 = $162;
     HEAP32[$163>>2] = $159;
     $164 = (($pStorage) + 1432|0);
     $165 = HEAP32[$164>>2]|0;
     _h264bsdComputeSliceGroupMap($pStorage,$165);
     _h264bsdInitRefPicList($$pre$phi20Z2D);
     $166 = (($pStorage) + 1436|0);
     $167 = (($pStorage) + 1380|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = (($pStorage) + 1412|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = (_h264bsdReorderRefPicList($$pre$phi20Z2D,$166,$168,$170)|0);
     $172 = ($171|0)==(0);
     if (!($172)) {
      $$0 = 3;
      STACKTOP = sp;return ($$0|0);
     }
     $173 = (($pStorage) + 1336|0);
     $174 = (_h264bsdDecodeSliceData($strm,$pStorage,$173,$127)|0);
     $175 = ($174|0)==(0);
     if (!($175)) {
      $176 = HEAP32[$127>>2]|0;
      _h264bsdMarkSliceCorrupted($pStorage,$176);
      $$0 = 3;
      STACKTOP = sp;return ($$0|0);
     }
     $177 = (_h264bsdIsEndOfPicture($pStorage)|0);
     $178 = ($177|0)==(0);
     if ($178) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     } else {
      HEAP32[$66>>2] = 1;
      $$pre$phi17Z2D = $153;$$pre$phiZ2D = $173;
      break;
     }
    } else if ((($48|0) == 7)) {
     $49 = (_h264bsdDecodeSeqParamSet($strm,$seqParamSet)|0);
     $50 = ($49|0)==(0);
     if ($50) {
      (_h264bsdStoreSeqParamSet($pStorage,$seqParamSet)|0);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     } else {
      $51 = (($seqParamSet) + 40|0);
      $52 = HEAP32[$51>>2]|0;
      _H264SwDecFree($52);
      HEAP32[$51>>2] = 0;
      $53 = (($seqParamSet) + 84|0);
      $54 = HEAP32[$53>>2]|0;
      _H264SwDecFree($54);
      HEAP32[$53>>2] = 0;
      $$0 = 3;
      STACKTOP = sp;return ($$0|0);
     }
    } else if ((($48|0) == 8)) {
     $55 = (_h264bsdDecodePicParamSet($strm,$picParamSet)|0);
     $56 = ($55|0)==(0);
     if ($56) {
      (_h264bsdStorePicParamSet($pStorage,$picParamSet)|0);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     } else {
      $57 = (($picParamSet) + 20|0);
      $58 = HEAP32[$57>>2]|0;
      _H264SwDecFree($58);
      HEAP32[$57>>2] = 0;
      $59 = (($picParamSet) + 24|0);
      $60 = HEAP32[$59>>2]|0;
      _H264SwDecFree($60);
      HEAP32[$59>>2] = 0;
      $61 = (($picParamSet) + 28|0);
      $62 = HEAP32[$61>>2]|0;
      _H264SwDecFree($62);
      HEAP32[$61>>2] = 0;
      $63 = (($picParamSet) + 44|0);
      $64 = HEAP32[$63>>2]|0;
      _H264SwDecFree($64);
      HEAP32[$63>>2] = 0;
      $$0 = 3;
      STACKTOP = sp;return ($$0|0);
     }
    } else {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $179 = (($pStorage) + 1212|0);
  $180 = HEAP32[$179>>2]|0;
  _h264bsdFilterPicture($$pre$phiZ2D,$180);
  _h264bsdResetStorage($pStorage);
  $181 = (($pStorage) + 1284|0);
  $182 = (($pStorage) + 16|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (($pStorage) + 1368|0);
  $185 = (_h264bsdDecodePicOrderCnt($181,$183,$184,$$pre$phi17Z2D)|0);
  $186 = (($pStorage) + 1188|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = ($187|0)==(0);
  do {
   if (!($188)) {
    $189 = (($pStorage) + 1364|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = ($190|0)==(0);
    $192 = (($pStorage) + 1220|0);
    if ($191) {
     $203 = (($pStorage) + 1380|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = HEAP32[$$pre$phi17Z2D>>2]|0;
     $206 = ($205|0)==(5);
     $207 = $206&1;
     $208 = (($pStorage) + 1208|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = (($pStorage) + 1204|0);
     $211 = HEAP32[$210>>2]|0;
     (_h264bsdMarkDecRefPic($192,0,$$pre$phiZ2D,$204,$185,$207,$209,$211)|0);
     break;
    } else {
     $193 = (($pStorage) + 1644|0);
     $194 = (($pStorage) + 1380|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = HEAP32[$$pre$phi17Z2D>>2]|0;
     $197 = ($196|0)==(5);
     $198 = $197&1;
     $199 = (($pStorage) + 1208|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = (($pStorage) + 1204|0);
     $202 = HEAP32[$201>>2]|0;
     (_h264bsdMarkDecRefPic($192,$193,$$pre$phiZ2D,$195,$185,$198,$200,$202)|0);
     break;
    }
   }
  } while(0);
  $212 = (($pStorage) + 1184|0);
  HEAP32[$212>>2] = 0;
  HEAP32[$186>>2] = 0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _h264bsdShutdown($pStorage) {
 $pStorage = $pStorage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond3 = 0, $i$02 = 0, $i$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$02 = 0;
 while(1) {
  $0 = ((($pStorage) + ($i$02<<2)|0) + 20|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = (($1) + 40|0);
   $4 = HEAP32[$3>>2]|0;
   _H264SwDecFree($4);
   $5 = HEAP32[$0>>2]|0;
   $6 = (($5) + 40|0);
   HEAP32[$6>>2] = 0;
   $7 = HEAP32[$0>>2]|0;
   $8 = (($7) + 84|0);
   $9 = HEAP32[$8>>2]|0;
   _H264SwDecFree($9);
   $10 = HEAP32[$0>>2]|0;
   $11 = (($10) + 84|0);
   HEAP32[$11>>2] = 0;
   $12 = HEAP32[$0>>2]|0;
   _H264SwDecFree($12);
   HEAP32[$0>>2] = 0;
  }
  $13 = (($i$02) + 1)|0;
  $exitcond3 = ($13|0)==(32);
  if ($exitcond3) {
   $i$11 = 0;
   break;
  } else {
   $i$02 = $13;
  }
 }
 while(1) {
  $14 = ((($pStorage) + ($i$11<<2)|0) + 148|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = (($15) + 20|0);
   $18 = HEAP32[$17>>2]|0;
   _H264SwDecFree($18);
   $19 = HEAP32[$14>>2]|0;
   $20 = (($19) + 20|0);
   HEAP32[$20>>2] = 0;
   $21 = HEAP32[$14>>2]|0;
   $22 = (($21) + 24|0);
   $23 = HEAP32[$22>>2]|0;
   _H264SwDecFree($23);
   $24 = HEAP32[$14>>2]|0;
   $25 = (($24) + 24|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$14>>2]|0;
   $27 = (($26) + 28|0);
   $28 = HEAP32[$27>>2]|0;
   _H264SwDecFree($28);
   $29 = HEAP32[$14>>2]|0;
   $30 = (($29) + 28|0);
   HEAP32[$30>>2] = 0;
   $31 = HEAP32[$14>>2]|0;
   $32 = (($31) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   _H264SwDecFree($33);
   $34 = HEAP32[$14>>2]|0;
   $35 = (($34) + 44|0);
   HEAP32[$35>>2] = 0;
   $36 = HEAP32[$14>>2]|0;
   _H264SwDecFree($36);
   HEAP32[$14>>2] = 0;
  }
  $37 = (($i$11) + 1)|0;
  $exitcond = ($37|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $i$11 = $37;
  }
 }
 $38 = (($pStorage) + 3376|0);
 $39 = HEAP32[$38>>2]|0;
 _H264SwDecFree($39);
 HEAP32[$38>>2] = 0;
 $40 = (($pStorage) + 1212|0);
 $41 = HEAP32[$40>>2]|0;
 _H264SwDecFree($41);
 HEAP32[$40>>2] = 0;
 $42 = (($pStorage) + 1172|0);
 $43 = HEAP32[$42>>2]|0;
 _H264SwDecFree($43);
 HEAP32[$42>>2] = 0;
 $44 = (($pStorage) + 1220|0);
 _h264bsdFreeDpb($44);
 STACKTOP = sp;return;
}
function _h264bsdNextOutputPicture($pStorage,$picId,$isIdrPic,$numErrMbs) {
 $pStorage = $pStorage|0;
 $picId = $picId|0;
 $isIdrPic = $isIdrPic|0;
 $numErrMbs = $numErrMbs|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStorage) + 1220|0);
 $1 = (_h264bsdDpbOutputPicture($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($1) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$picId>>2] = $4;
 $5 = (($1) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$isIdrPic>>2] = $6;
 $7 = (($1) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$numErrMbs>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdPicWidth($pStorage) {
 $pStorage = $pStorage|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStorage) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (($1) + 52|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdPicHeight($pStorage) {
 $pStorage = $pStorage|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStorage) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (($1) + 56|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdFlushBuffer($pStorage) {
 $pStorage = $pStorage|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStorage) + 1220|0);
 _h264bsdFlushDpb($0);
 STACKTOP = sp;return;
}
function _h264bsdCheckValidParamSets($pStorage) {
 $pStorage = $pStorage|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_h264bsdValidParamSets($pStorage)|0);
 $1 = ($0|0)==(0);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _h264bsdVideoRange($pStorage) {
 $pStorage = $pStorage|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStorage) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($1) + 80|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if (!($5)) {
   $6 = (($1) + 84|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $9 = (($7) + 24|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0);
    if (!($11)) {
     $12 = (($7) + 32|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==(0);
     if (!($14)) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdMatrixCoefficients($pStorage) {
 $pStorage = $pStorage|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStorage) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 2;
 } else {
  $3 = (($1) + 80|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 2;
  } else {
   $6 = (($1) + 84|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = 2;
   } else {
    $9 = (($7) + 24|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0);
    if ($11) {
     $$0 = 2;
    } else {
     $12 = (($7) + 36|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==(0);
     if ($14) {
      $$0 = 2;
     } else {
      $15 = (($7) + 48|0);
      $16 = HEAP32[$15>>2]|0;
      $$0 = $16;
     }
    }
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCroppingParams($pStorage,$croppingFlag,$leftOffset,$width,$topOffset,$height) {
 $pStorage = $pStorage|0;
 $croppingFlag = $croppingFlag|0;
 $leftOffset = $leftOffset|0;
 $width = $width|0;
 $topOffset = $topOffset|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStorage) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($1) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if (!($5)) {
   HEAP32[$croppingFlag>>2] = 1;
   $6 = (($1) + 64|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 << 1;
   HEAP32[$leftOffset>>2] = $8;
   $9 = (($1) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10 << 4;
   $12 = HEAP32[$6>>2]|0;
   $13 = (($1) + 68|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($12))|0;
   $16 = $15 << 1;
   $17 = (($11) - ($16))|0;
   HEAP32[$width>>2] = $17;
   $18 = (($1) + 72|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $19 << 1;
   HEAP32[$topOffset>>2] = $20;
   $21 = (($1) + 56|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $22 << 4;
   $24 = HEAP32[$18>>2]|0;
   $25 = (($1) + 76|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + ($24))|0;
   $28 = $27 << 1;
   $29 = (($23) - ($28))|0;
   $storemerge = $29;
   HEAP32[$height>>2] = $storemerge;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$croppingFlag>>2] = 0;
 HEAP32[$leftOffset>>2] = 0;
 HEAP32[$width>>2] = 0;
 HEAP32[$topOffset>>2] = 0;
 $storemerge = 0;
 HEAP32[$height>>2] = $storemerge;
 STACKTOP = sp;return;
}
function _h264bsdSampleAspectRatio($pStorage,$sarWidth,$sarHeight) {
 $pStorage = $pStorage|0;
 $sarWidth = $sarWidth|0;
 $sarHeight = $sarHeight|0;
 var $$ = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $h$0 = 0, $or$cond = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStorage) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   $h$0 = 1;$w$0 = 1;
  } else {
   $3 = (($1) + 80|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0);
   if ($5) {
    $h$0 = 1;$w$0 = 1;
   } else {
    $6 = (($1) + 84|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(0|0);
    if ($8) {
     $h$0 = 1;$w$0 = 1;
    } else {
     $9 = HEAP32[$7>>2]|0;
     $10 = ($9|0)==(0);
     if ($10) {
      $h$0 = 1;$w$0 = 1;
     } else {
      $11 = (($7) + 4|0);
      $12 = HEAP32[$11>>2]|0;
      do {
       switch ($12|0) {
       case 6:  {
        $h$0 = 11;$w$0 = 24;
        break L1;
        break;
       }
       case 5:  {
        $h$0 = 33;$w$0 = 40;
        break L1;
        break;
       }
       case 1: case 0:  {
        $h$0 = $12;$w$0 = $12;
        break L1;
        break;
       }
       case 7:  {
        $h$0 = 11;$w$0 = 20;
        break L1;
        break;
       }
       case 10:  {
        $h$0 = 11;$w$0 = 18;
        break L1;
        break;
       }
       case 11:  {
        $h$0 = 11;$w$0 = 15;
        break L1;
        break;
       }
       case 2:  {
        $h$0 = 11;$w$0 = 12;
        break L1;
        break;
       }
       case 13:  {
        $h$0 = 99;$w$0 = 160;
        break L1;
        break;
       }
       case 9:  {
        $h$0 = 33;$w$0 = 80;
        break L1;
        break;
       }
       case 8:  {
        $h$0 = 11;$w$0 = 32;
        break L1;
        break;
       }
       case 4:  {
        $h$0 = 11;$w$0 = 16;
        break L1;
        break;
       }
       case 3:  {
        $h$0 = 11;$w$0 = 10;
        break L1;
        break;
       }
       case 12:  {
        $h$0 = 33;$w$0 = 64;
        break L1;
        break;
       }
       case 255:  {
        $13 = (($7) + 8|0);
        $14 = HEAP32[$13>>2]|0;
        $15 = (($7) + 12|0);
        $16 = HEAP32[$15>>2]|0;
        $17 = ($14|0)==(0);
        $18 = ($16|0)==(0);
        $or$cond = $17 | $18;
        $$ = $or$cond ? 0 : $14;
        $$2 = $or$cond ? 0 : $16;
        $h$0 = $$2;$w$0 = $$;
        break L1;
        break;
       }
       default: {
        $h$0 = 0;$w$0 = 0;
        break L1;
       }
       }
      } while(0);
     }
    }
   }
  }
 } while(0);
 HEAP32[$sarWidth>>2] = $w$0;
 HEAP32[$sarHeight>>2] = $h$0;
 STACKTOP = sp;return;
}
function _h264bsdProfile($pStorage) {
 $pStorage = $pStorage|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pStorage) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _H264SwDecInit($decInst,$noOutputReordering) {
 $decInst = $decInst|0;
 $noOutputReordering = $noOutputReordering|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($decInst|0)==(0|0);
 do {
  if ($0) {
   $$0 = -1;
  } else {
   $1 = (_H264SwDecMalloc(3396)|0);
   $2 = ($1|0)==(0|0);
   if ($2) {
    $$0 = -4;
   } else {
    $3 = (($1) + 8|0);
    $4 = (_h264bsdInit($3,$noOutputReordering)|0);
    $5 = ($4|0)==(0);
    if ($5) {
     HEAP32[$1>>2] = 1;
     $6 = (($1) + 4|0);
     HEAP32[$6>>2] = 0;
     HEAP32[$decInst>>2] = $1;
     $$0 = 0;
     break;
    } else {
     _h264bsdShutdown($3);
     _H264SwDecFree($1);
     $$0 = -4;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _H264SwDecGetInfo($decInst,$pDecInfo) {
 $decInst = $decInst|0;
 $pDecInfo = $pDecInfo|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($decInst|0)==(0|0);
 $1 = ($pDecInfo|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($decInst) + 8|0);
 $3 = (($decInst) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -6;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($decInst) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = -6;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (_h264bsdPicWidth($2)|0);
 $10 = $9 << 4;
 $11 = (($pDecInfo) + 4|0);
 HEAP32[$11>>2] = $10;
 $12 = (_h264bsdPicHeight($2)|0);
 $13 = $12 << 4;
 $14 = (($pDecInfo) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = (_h264bsdVideoRange($2)|0);
 $16 = (($pDecInfo) + 12|0);
 HEAP32[$16>>2] = $15;
 $17 = (_h264bsdMatrixCoefficients($2)|0);
 $18 = (($pDecInfo) + 16|0);
 HEAP32[$18>>2] = $17;
 $19 = (($pDecInfo) + 28|0);
 $20 = (($pDecInfo) + 32|0);
 $21 = (($pDecInfo) + 36|0);
 $22 = (($pDecInfo) + 40|0);
 $23 = (($pDecInfo) + 44|0);
 _h264bsdCroppingParams($2,$19,$20,$21,$22,$23);
 $24 = (($pDecInfo) + 20|0);
 $25 = (($pDecInfo) + 24|0);
 _h264bsdSampleAspectRatio($2,$24,$25);
 $26 = (_h264bsdProfile($2)|0);
 HEAP32[$pDecInfo>>2] = $26;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _H264SwDecDecode($decInst,$pInput,$pOutput) {
 $decInst = $decInst|0;
 $pInput = $pInput|0;
 $pOutput = $pOutput|0;
 var $$ = 0, $$0 = 0, $$4 = 0, $$pre = 0, $$returnValue$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $numReadBytes = 0, $or$cond = 0, $returnValue$0 = 0, $returnValue$2 = 0, $strmLen$0 = 0, $tmpStream$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $numReadBytes = sp;
 $0 = ($pInput|0)==(0|0);
 $1 = ($pOutput|0)==(0|0);
 $or$cond = $0 | $1;
 L1: do {
  if ($or$cond) {
   $$0 = -1;
  } else {
   $2 = HEAP32[$pInput>>2]|0;
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$0 = -1;
   } else {
    $4 = (($pInput) + 4|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==(0);
    if ($6) {
     $$0 = -1;
    } else {
     $7 = ($decInst|0)==(0|0);
     if ($7) {
      $$0 = -3;
     } else {
      $8 = HEAP32[$decInst>>2]|0;
      $9 = ($8|0)==(0);
      if ($9) {
       $$0 = -3;
      } else {
       HEAP32[$pOutput>>2] = 0;
       HEAP32[$numReadBytes>>2] = 0;
       $10 = (($pInput) + 12|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = (($decInst) + 8|0);
       $13 = (($decInst) + 3392|0);
       HEAP32[$13>>2] = $11;
       $14 = (($pInput) + 8|0);
       $15 = $8;$returnValue$0 = 1;$strmLen$0 = $5;$tmpStream$0 = $2;
       while(1) {
        $16 = ($15|0)==(2);
        if ($16) {
         label = 8;
         break;
        }
        $19 = HEAP32[$14>>2]|0;
        $20 = (_h264bsdDecode($12,$tmpStream$0,$strmLen$0,$19,$numReadBytes)|0);
        $21 = HEAP32[$numReadBytes>>2]|0;
        $22 = (($tmpStream$0) + ($21)|0);
        $23 = (($strmLen$0) - ($21))|0;
        $24 = ($23|0)<(0);
        $$ = $24 ? 0 : $23;
        HEAP32[$pOutput>>2] = $22;
        if ((($20|0) == 2)) {
         break;
        } else if ((($20|0) == 5)) {
         $$0 = -4;
         break L1;
        } else if ((($20|0) == 4)) {
         $37 = (_h264bsdCheckValidParamSets($12)|0);
         $38 = $37 | $$;
         $39 = ($38|0)==(0);
         $$returnValue$0 = $39 ? -2 : $returnValue$0;
         $returnValue$2 = $$returnValue$0;
        } else if ((($20|0) == 1)) {
         label = 13;
         break;
        } else {
         $returnValue$2 = $returnValue$0;
        }
        $40 = ($$|0)==(0);
        if ($40) {
         $$0 = $returnValue$2;
         break L1;
        }
        $$pre = HEAP32[$decInst>>2]|0;
        $15 = $$pre;$returnValue$0 = $returnValue$2;$strmLen$0 = $$;$tmpStream$0 = $22;
       }
       if ((label|0) == 8) {
        HEAP32[$decInst>>2] = 1;
        $17 = HEAP32[$numReadBytes>>2]|0;
        $18 = (($tmpStream$0) + ($17)|0);
        HEAP32[$pOutput>>2] = $18;
       }
       else if ((label|0) == 13) {
        $33 = (($decInst) + 4|0);
        $34 = HEAP32[$33>>2]|0;
        $35 = (($34) + 1)|0;
        HEAP32[$33>>2] = $35;
        $36 = ($$|0)==(0);
        $$4 = $36 ? 2 : 3;
        $$0 = $$4;
        break;
       }
       $25 = (($decInst) + 1288|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(0);
       if ($27) {
        $$0 = 4;
       } else {
        $28 = (($decInst) + 1244|0);
        $29 = HEAP32[$28>>2]|0;
        $30 = (($decInst) + 1248|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = ($29|0)==($31|0);
        if ($32) {
         $$0 = 4;
        } else {
         HEAP32[$25>>2] = 0;
         HEAP32[$decInst>>2] = 2;
         $$0 = 3;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _H264SwDecGetAPIVersion($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 2;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = 3;
 STACKTOP = sp;return;
}
function _H264SwDecNextPicture($decInst,$pOutput,$flushBuffer) {
 $decInst = $decInst|0;
 $pOutput = $pOutput|0;
 $flushBuffer = $flushBuffer|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isIdrPic = 0, $numErrMbs = 0, $or$cond = 0, $picId = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $numErrMbs = sp + 8|0;
 $isIdrPic = sp + 4|0;
 $picId = sp;
 $0 = ($decInst|0)==(0|0);
 $1 = ($pOutput|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($flushBuffer|0)==(0);
 $$pre = (($decInst) + 8|0);
 if (!($2)) {
  _h264bsdFlushBuffer($$pre);
 }
 $3 = (_h264bsdNextOutputPicture($$pre,$picId,$isIdrPic,$numErrMbs)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$pOutput>>2] = $3;
 $5 = HEAP32[$picId>>2]|0;
 $6 = (($pOutput) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$isIdrPic>>2]|0;
 $8 = (($pOutput) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$numErrMbs>>2]|0;
 $10 = (($pOutput) + 12|0);
 HEAP32[$10>>2] = $9;
 $$0 = 2;
 STACKTOP = sp;return ($$0|0);
}
function _broadwayCreateStream($length) {
 $length = $length|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc($length)|0);
 HEAP32[((7160 + 8|0))>>2] = $0;
 HEAP32[((7160 + 4|0))>>2] = $0;
 HEAP32[7160>>2] = $length;
 $1 = (($0) + ($length)|0);
 HEAP32[((7160 + 12|0))>>2] = $1;
 STACKTOP = sp;return ($0|0);
}
function _broadwaySetStreamLength($length) {
 $length = $length|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[7160>>2] = $length;
 STACKTOP = sp;return;
}
function _broadwayPlayStream() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((7160 + 4|0))>>2]|0;
 HEAP32[7144>>2] = $0;
 $1 = HEAP32[7160>>2]|0;
 HEAP32[((7144 + 4|0))>>2] = $1;
 while(1) {
  (_broadwayDecode()|0);
  $2 = HEAP32[((7144 + 4|0))>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _broadwayInit() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_H264SwDecInit(7176,0)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  HEAP32[7184>>2] = 1;
  HEAP32[7192>>2] = 1;
  $$0 = 0;
 } else {
  (_puts((7280|0))|0);
  $2 = HEAP32[7136>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0 = -1;
  } else {
   _free($2);
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _broadwayDecode() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7192>>2]|0;
 HEAP32[((7144 + 8|0))>>2] = $0;
 $1 = HEAP32[7176>>2]|0;
 $2 = (_H264SwDecDecode($1,7144,7200)|0);
 switch ($2|0) {
 case 1: case -2:  {
  HEAP32[((7144 + 4|0))>>2] = 0;
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 2:  {
  HEAP32[((7144 + 4|0))>>2] = 0;
  break;
 }
 case 4:  {
  $3 = HEAP32[7176>>2]|0;
  $4 = (_H264SwDecGetInfo($3,7208)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $6 = HEAP32[((7208 + 4|0))>>2]|0;
  $7 = HEAP32[((7208 + 8|0))>>2]|0;
  $8 = ($6*3)|0;
  $9 = Math_imul($8, $7)|0;
  $10 = $9 >>> 1;
  HEAP32[7256>>2] = $10;
  _broadwayOnHeadersDecoded();
  $11 = HEAP32[7200>>2]|0;
  $12 = HEAP32[7144>>2]|0;
  $13 = $11;
  $14 = $12;
  $15 = HEAP32[((7144 + 4|0))>>2]|0;
  $16 = (($14) - ($13))|0;
  $17 = (($16) + ($15))|0;
  HEAP32[((7144 + 4|0))>>2] = $17;
  HEAP32[7144>>2] = $11;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 3:  {
  $18 = HEAP32[7200>>2]|0;
  $19 = HEAP32[7144>>2]|0;
  $20 = $18;
  $21 = $19;
  $22 = HEAP32[((7144 + 4|0))>>2]|0;
  $23 = (($21) - ($20))|0;
  $24 = (($23) + ($22))|0;
  HEAP32[((7144 + 4|0))>>2] = $24;
  HEAP32[7144>>2] = $18;
  break;
 }
 default: {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 }
 $25 = HEAP32[7192>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[7192>>2] = $26;
 $27 = HEAP32[7176>>2]|0;
 $28 = (_H264SwDecNextPicture($27,7264,0)|0);
 $29 = ($28|0)==(2);
 if (!($29)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $30 = HEAP32[7184>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[7184>>2] = $31;
  $32 = HEAP32[7264>>2]|0;
  $33 = HEAP32[((7208 + 4|0))>>2]|0;
  $34 = HEAP32[((7208 + 8|0))>>2]|0;
  _broadwayOnPictureDecoded(($32|0),($33|0),($34|0));
  $35 = HEAP32[7176>>2]|0;
  $36 = (_H264SwDecNextPicture($35,7264,0)|0);
  $37 = ($36|0)==(2);
  if (!($37)) {
   $$0 = $2;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _broadwayExit() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7136>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  _free($0);
 }
 STACKTOP = sp;return;
}
function _broadwayGetMajorVersion() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 _H264SwDecGetAPIVersion($0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _broadwayGetMinorVersion() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 _H264SwDecGetAPIVersion($0);
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _H264SwDecMalloc($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc($size)|0);
 STACKTOP = sp;return ($0|0);
}
function _H264SwDecFree($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 STACKTOP = sp;return;
}
function _H264SwDecMemcpy($dest,$src,$count) {
 $dest = $dest|0;
 $src = $src|0;
 $count = $count|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memcpy(($dest|0),($src|0),($count|0))|0;
 STACKTOP = sp;return;
}
function _H264SwDecMemset($ptr,$value,$count) {
 $ptr = $ptr|0;
 $value = $value|0;
 $count = $count|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $value&255;
 _memset(($ptr|0),($0|0),($count|0))|0;
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0;
 var $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0, $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0;
 var $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0;
 var $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0;
 var $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0;
 var $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$027$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$026$i = 0, $T$052$i$i = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0;
 var $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0;
 var $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$073$i = 0, $sp$166$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0;
 var $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[7312>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((7312 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((7312 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[7312>>2] = $22;
     } else {
      $23 = HEAP32[((7312 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((7312 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((7312 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((7312 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[7312>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[((7312 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((7312 + 8|0))>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((7312 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((7312 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[7312>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[7312>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((7312 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((7312 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((7312 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((7312 + 8|0))>>2] = $81;
     HEAP32[((7312 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((7312 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((7312 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((7312 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((7312 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((7312 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((7312 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((7312 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((7312 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((7312 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $224 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i;
      $225 = HEAP32[((7312 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((7312 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((7312 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[7312>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[7312>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((7312 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((7312 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((7312 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((7312 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((7312 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i) + 8|0);
     $mem$0 = $243;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((7312 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((7312 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L9: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$2$i = $286;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L9;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((7312 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        continue;
       }
       $339 = (($t$230$i) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((7312 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((7312 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = (($R$0$i18) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((7312 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((7312 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((7312 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((7312 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((7312 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((7312 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L87: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((7312 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[7312>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[7312>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((7312 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((7312 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((7312 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((7312 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((7312 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((7312 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         L108: do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$027$i = $483;$T$026$i = $475;
           while(1) {
            $491 = $K12$027$i >>> 31;
            $492 = ((($T$026$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $K12$027$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L108;
            } else {
             $K12$027$i = $485;$T$026$i = $487;
            }
           }
           $494 = HEAP32[((7312 + 16|0))>>2]|0;
           $495 = ($492>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$026$i;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L87;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((7312 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((7312 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((7312 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((7312 + 20|0))>>2] = $514;
   HEAP32[((7312 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((7312 + 8|0))>>2] = 0;
   HEAP32[((7312 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  STACKTOP = sp;return ($mem$0|0);
 }
 $526 = HEAP32[((7312 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((7312 + 12|0))>>2] = $528;
  $529 = HEAP32[((7312 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((7312 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  STACKTOP = sp;return ($mem$0|0);
 }
 $536 = HEAP32[7784>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((7784 + 8|0))>>2] = $538;
    HEAP32[((7784 + 4|0))>>2] = $538;
    HEAP32[((7784 + 12|0))>>2] = -1;
    HEAP32[((7784 + 16|0))>>2] = -1;
    HEAP32[((7784 + 20|0))>>2] = 0;
    HEAP32[((7312 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[7784>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((7784 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $552 = HEAP32[((7312 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((7312 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $558 = HEAP32[((7312 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L266: do {
  if ($560) {
   $561 = HEAP32[((7312 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   L268: do {
    if ($562) {
     label = 181;
    } else {
     $sp$0$i$i = ((7312 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 181;
       break L268;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $572 = ($sp$0$i$i|0)==(0|0);
     if ($572) {
      label = 181;
     } else {
      $595 = HEAP32[((7312 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$sp$0$i$i>>2]|0;
       $601 = HEAP32[$565>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 190;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((7784 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((7312 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((7312 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 190;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L288: do {
    if ((label|0) == 190) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 201;
      break L266;
     }
    }
    else if ((label|0) == 191) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((7784 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L288;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 201;
      break L266;
     }
    }
   } while(0);
   $619 = HEAP32[((7312 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((7312 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 198;
  } else {
   $tsize$1$i = 0;
   label = 198;
  }
 } while(0);
 if ((label|0) == 198) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 201;
    }
   }
  }
 }
 if ((label|0) == 201) {
  $632 = HEAP32[((7312 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((7312 + 432|0))>>2] = $633;
  $634 = HEAP32[((7312 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((7312 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((7312 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L308: do {
   if ($637) {
    $638 = HEAP32[((7312 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((7312 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((7312 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((7312 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((7312 + 460|0))>>2] = 0;
    $641 = HEAP32[7784>>2]|0;
    HEAP32[((7312 + 36|0))>>2] = $641;
    HEAP32[((7312 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((7312 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((7312 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((7312 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((7312 + 24|0))>>2] = $654;
    HEAP32[((7312 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((7784 + 16|0))>>2]|0;
    HEAP32[((7312 + 28|0))>>2] = $660;
   } else {
    $sp$073$i = ((7312 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$073$i>>2]|0;
     $662 = (($sp$073$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      label = 213;
      break;
     }
     $666 = (($sp$073$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$073$i = $667;
     }
    }
    if ((label|0) == 213) {
     $669 = (($sp$073$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($663) + ($tsize$244$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((7312 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((7312 + 24|0))>>2] = $684;
       HEAP32[((7312 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((7784 + 16|0))>>2]|0;
       HEAP32[((7312 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((7312 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((7312 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$166$i = ((7312 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$166$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 223;
      break;
     }
     $696 = (($sp$166$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$166$i = $697;
     }
    }
    if ((label|0) == 223) {
     $699 = (($sp$166$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$166$i>>2] = $tbase$245$i;
      $703 = (($sp$166$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L345: do {
       if ($729) {
        $730 = HEAP32[((7312 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((7312 + 12|0))>>2] = $731;
        HEAP32[((7312 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((7312 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((7312 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((7312 + 8|0))>>2] = $737;
         HEAP32[((7312 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L353: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((7312 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[7312>>2]|0;
            $764 = $763 & $762;
            HEAP32[7312>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $789;$RP$0$i$i = $788;
              }
             } else {
              $R$0$i$i = $786;$RP$0$i$i = $785;
             }
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if (!($793)) {
               $R$0$i$i = $792;$RP$0$i$i = $791;
               continue;
              }
              $794 = (($R$0$i$i) + 16|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if ($796) {
               break;
              } else {
               $R$0$i$i = $795;$RP$0$i$i = $794;
              }
             }
             $797 = ($RP$0$i$i>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((7312 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((7312 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((7312 + 4|0))>>2] = $807;
             break L353;
            } else {
             $808 = HEAP32[((7312 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L353;
             }
            }
           } while(0);
           $815 = HEAP32[((7312 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((7312 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((7312 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[7312>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[7312>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((7312 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((7312 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((7312 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((7312 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((7312 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((7312 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        L442: do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $T$0$lcssa$i26$i = $904;
            break L442;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          $911 = HEAP32[((7312 + 16|0))>>2]|0;
          $912 = ($909>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$909>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L345;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((7312 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((7312 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($929) + -47)|0;
    $$sum1$i14$i = (($929) + -39)|0;
    $934 = (($926) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($926) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((7312 + 24|0))>>2] = $953;
    HEAP32[((7312 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((7784 + 16|0))>>2]|0;
    HEAP32[((7312 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((7312 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((7312 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((7312 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((7312 + 448|0))+12>>2]|0;
    HEAP32[((7312 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((7312 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((7312 + 460|0))>>2] = 0;
    HEAP32[((7312 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($930>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($930>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((7312 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[7312>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[7312>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((7312 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((7312 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((7312 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((7312 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((7312 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((7312 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     L493: do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $T$0$lcssa$i$i = $1043;
         break L493;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       $1050 = HEAP32[((7312 + 16|0))>>2]|0;
       $1051 = ($1048>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1048>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L308;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((7312 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((7312 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((7312 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((7312 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((7312 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$058 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0;
 var $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$057 = 0, $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((7312 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((7312 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((7312 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((7312 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[7312>>2]|0;
     $36 = $35 & $34;
     HEAP32[7312>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((7312 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((7312 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((7312 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((7312 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((7312 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((7312 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((7312 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((7312 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((7312 + 12|0))>>2] = $120;
   HEAP32[((7312 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((7312 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    STACKTOP = sp;return;
   }
   HEAP32[((7312 + 20|0))>>2] = 0;
   HEAP32[((7312 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $125 = HEAP32[((7312 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((7312 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((7312 + 8|0))>>2] = $128;
   HEAP32[((7312 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   STACKTOP = sp;return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((7312 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((7312 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[7312>>2]|0;
     $152 = $151 & $150;
     HEAP32[7312>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((7312 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = (($R7$0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[((7312 + 16|0))>>2]|0;
      $188 = ($RP9$0>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((7312 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((7312 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((7312 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((7312 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((7312 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((7312 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((7312 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((7312 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((7312 + 8|0))>>2] = $133;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((7312 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[7312>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[7312>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((7312 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((7312 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((7312 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  STACKTOP = sp;return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((7312 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((7312 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((7312 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   L205: do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$058 = $292;$T$057 = $284;
     while(1) {
      $300 = $K19$058 >>> 31;
      $301 = ((($T$057) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       break;
      }
      $294 = $K19$058 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L205;
      } else {
       $K19$058 = $294;$T$057 = $296;
      }
     }
     $303 = HEAP32[((7312 + 16|0))>>2]|0;
     $304 = ($301>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$301>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$057;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((7312 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((7312 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((7312 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = ((7312 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((7312 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function runPostSets() {
 
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}

// EMSCRIPTEN_END_FUNCS

  
  function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    FUNCTION_TABLE_viiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0);
  }

function b0(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(0); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_viiiii = [b0,_FillRow1,_h264bsdFillRow7,b0];

  return { _strlen: _strlen, _free: _free, _broadwayGetMajorVersion: _broadwayGetMajorVersion, _get_h264bsdClip: _get_h264bsdClip, _broadwayExit: _broadwayExit, _memset: _memset, _broadwayCreateStream: _broadwayCreateStream, _malloc: _malloc, _memcpy: _memcpy, _broadwayGetMinorVersion: _broadwayGetMinorVersion, _broadwayPlayStream: _broadwayPlayStream, _broadwaySetStreamLength: _broadwaySetStreamLength, _broadwayInit: _broadwayInit, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_viiiii: dynCall_viiiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _strlen = Module["_strlen"] = asm["_strlen"];
var _free = Module["_free"] = asm["_free"];
var _broadwayGetMajorVersion = Module["_broadwayGetMajorVersion"] = asm["_broadwayGetMajorVersion"];
var _get_h264bsdClip = Module["_get_h264bsdClip"] = asm["_get_h264bsdClip"];
var _broadwayExit = Module["_broadwayExit"] = asm["_broadwayExit"];
var _memset = Module["_memset"] = asm["_memset"];
var _broadwayCreateStream = Module["_broadwayCreateStream"] = asm["_broadwayCreateStream"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _broadwayGetMinorVersion = Module["_broadwayGetMinorVersion"] = asm["_broadwayGetMinorVersion"];
var _broadwayPlayStream = Module["_broadwayPlayStream"] = asm["_broadwayPlayStream"];
var _broadwaySetStreamLength = Module["_broadwaySetStreamLength"] = asm["_broadwaySetStreamLength"];
var _broadwayInit = Module["_broadwayInit"] = asm["_broadwayInit"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = false;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



